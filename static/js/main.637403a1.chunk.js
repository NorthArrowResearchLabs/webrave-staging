(this["webpackJsonp@riverscapes/app-webrave"]=this["webpackJsonp@riverscapes/app-webrave"]||[]).push([[0],{11:function(e,t,a){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,a,r){void 0===r&&(r=a),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[a]}})}:function(e,t,a,r){void 0===r&&(r=a),e[r]=t[a]}),n=this&&this.__exportStar||function(e,t){for(var a in e)"default"===a||Object.prototype.hasOwnProperty.call(t,a)||r(t,e,a)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.typeDefs=void 0,n(a(412),t),n(a(461),t),n(a(296),t);var i=a(462);Object.defineProperty(t,"typeDefs",{enumerable:!0,get:function(){return o(i).default}}),n(a(463),t),n(a(464),t),n(a(466),t),n(a(467),t)},296:function(e,t,a){"use strict";var r,n;Object.defineProperty(t,"__esModule",{value:!0}),t.ProjectTreeLayerTileTypes=t.ProjectTreeLayerTypes=t.TileTypes=t.SymbologyStatus=t.TilingStatusFinished=t.TilingStatus=t.RampType=t.AccessEnum=t.WarehouseRoleEnum=t.FieldTypeEnum=void 0,function(e){e.string="S",e.number="N",e.boolean="BOOL",e.stringArr="SARR",e.numberArr="NARR"}(t.FieldTypeEnum||(t.FieldTypeEnum={})),function(e){e.SuperUser="SUPER",e.Admin="ADMIN",e.Observer="OBSERVER",e.Participant="PARTICIPANT"}(t.WarehouseRoleEnum||(t.WarehouseRoleEnum={})),function(e){e.Public="PUBLIC",e.Private="PRIVATE",e.Secret="SECRET"}(t.AccessEnum||(t.AccessEnum={})),function(e){e.INTERPOLATED="INTERPOLATED",e.DISCRETE="DISCRETE",e.EXACT="EXACT"}(t.RampType||(t.RampType={})),function(e){e.UNKNOWN="UNKNOWN",e.QUEUED="QUEUED",e.FETCHING="FETCHING",e.NOT_APPLICABLE="NOT_APPLICABLE",e.CREATING="CREATING",e.NO_GEOMETRIES="NO_GEOMETRIES",e.TIMEOUT="TIMEOUT",e.TILING_ERROR="TILING_ERROR",e.INDEX_NOT_FOUND="INDEX_NOT_FOUND",e.LAYER_NOT_FOUND="LAYER_NOT_FOUND",e.FETCH_ERROR="FETCH_ERROR",e.SUCCESS="SUCCESS"}(r=t.TilingStatus||(t.TilingStatus={})),t.TilingStatusFinished=[r.NOT_APPLICABLE,r.NO_GEOMETRIES,r.TIMEOUT,r.TILING_ERROR,r.SUCCESS],function(e){e.UNKNOWN="UNKNOWN",e.FETCHING="FETCHING",e.MISSING="MISSING",e.NOT_APPLICABLE="NOT_APPLICABLE",e.FOUND="FOUND",e.ERROR="ERROR"}(t.SymbologyStatus||(t.SymbologyStatus={})),function(e){e.RASTER="RASTER",e.HTML="HTML",e.VECTOR_SHP="VECTOR_SHP",e.VECTOR_GPKG="VECTOR_GPKG"}(t.TileTypes||(t.TileTypes={})),function(e){e.REPORT="report",e.RASTER="raster",e.LINE="line",e.POLYGON="polygon",e.POINT="point",e.FILE="file",e.TIN="tin"}(n=t.ProjectTreeLayerTypes||(t.ProjectTreeLayerTypes={})),t.ProjectTreeLayerTileTypes=[n.RASTER,n.POLYGON,n.LINE,n.POINT]},351:function(e){e.exports=JSON.parse('{"version":8,"name":"Satellite Streets","metadata":{"mapbox:type":"default","mapbox:origin":"satellite-streets-v11","mapbox:sdk-support":{"android":"9.3.0","ios":"5.10.0","js":"2.0.0"},"mapbox:autocomposite":true,"mapbox:groups":{"Satellite imagery, land":{"name":"Satellite imagery, land","collapsed":false},"Road network, tunnels-case":{"name":"Road network, tunnels-case","collapsed":false},"Walking, cycling, etc., tunnels":{"name":"Walking, cycling, etc., tunnels","collapsed":false},"Road network, tunnels":{"name":"Road network, tunnels","collapsed":false},"Walking, cycling, etc., surface":{"name":"Walking, cycling, etc., surface","collapsed":false},"Road network, surface":{"name":"Road network, surface","collapsed":false},"Road network, surface-icons":{"name":"Road network, surface-icons","collapsed":false},"Walking, cycling, etc., barriers-bridges":{"name":"Walking, cycling, etc., barriers-bridges","collapsed":false},"Road network, bridges":{"name":"Road network, bridges","collapsed":false},"Transit, elevated":{"name":"Transit, elevated","collapsed":false},"Administrative boundaries, admin":{"name":"Administrative boundaries, admin","collapsed":false},"Road network, road-labels":{"name":"Road network, road-labels","collapsed":false},"Transit, ferry-aerialway-labels":{"name":"Transit, ferry-aerialway-labels","collapsed":false},"Natural features, natural-labels":{"name":"Natural features, natural-labels","collapsed":false},"Point of interest labels, poi-labels":{"name":"Point of interest labels, poi-labels","collapsed":false},"Transit, transit-labels":{"name":"Transit, transit-labels","collapsed":false},"Place labels, place-labels":{"name":"Place labels, place-labels","collapsed":false}},"mapbox:decompiler":{"id":"satellite-streets-v11","componentVersion":"9.0.0","strata":[{"id":"satellite-streets-v11","order":[["transit","built"],["satellite","land"],["road-network","tunnels-case"],["walking-cycling","tunnels"],["road-network","tunnels"],["transit","ferries"],["walking-cycling","surface"],["road-network","surface"],["transit","surface"],["road-network","surface-icons"],["walking-cycling","barriers-bridges"],["road-network","bridges"],["transit","bridges"],["road-network","traffic-and-closures"],["transit","elevated"],["admin-boundaries","admin"],["road-network","road-labels"],["walking-cycling","walking-cycling-labels"],["transit","ferry-aerialway-labels"],["natural-features","natural-labels"],["point-of-interest-labels","poi-labels"],["transit","transit-labels"],["place-labels","place-labels"]]}],"components":{"satellite":"9.0.0","road-network":"9.0.0","walking-cycling":"9.0.0","admin-boundaries":"9.0.0","natural-features":"9.0.0","point-of-interest-labels":"9.0.0","transit":"9.0.0","place-labels":"9.0.0"},"propConfig":{"satellite":{},"road-network":{"roadsFont":["DIN Pro Medium","Arial Unicode MS Regular"],"color-road":"hsla(0, 0%, 90%, 0.5)","color-motorway-trunk":"hsla(36, 87%, 68%, 0.7)","construction":false,"color-road-label":"hsl(0, 0%, 100%)","fadeOutRoadsOnZoom":true,"railwayCrossings":false,"polygonFeatures":false,"color-base":"hsl(0, 0%, 0%)","minorRoads":false,"turningCircles":false,"color-road-outline":"hsla(0, 1%, 10%, 0.5)"},"walking-cycling":{"roadsFont":["DIN Pro Medium","Arial Unicode MS Regular"],"golfHoleLabelLine":false,"color-road":"hsla(0, 0%, 90%, 0.5)","color-greenspace":"hsl(94, 100%, 14%)","walkingCyclingPisteBackground":false,"color-road-label":"hsl(0, 0%, 100%)","color-greenspace-label":"hsl(94, 100%, 74%)","poiEtcFont":["DIN Pro Bold","Arial Unicode MS Bold"],"color-base":"hsl(0, 0%, 0%)","pedestrianPolygonFeatures":false,"color-road-outline":"hsla(0, 1%, 10%, 0.5)","labels":false},"admin-boundaries":{"admin0Width":1.5,"color-base":"hsl(0, 0%, 0%)","color-place-label":"hsl(0, 0%, 100%)","color-admin-boundary":"hsl(0, 0%, 0%)"},"natural-features":{"poiEtcFont":["DIN Pro Bold","Arial Unicode MS Bold"],"color-base":"hsl(0, 0%, 0%)","color-water":"hsl(196, 50%, 50%)","color-poi":"hsl(0, 0%, 100%)"},"point-of-interest-labels":{"poiEtcFont":["DIN Pro Bold","Arial Unicode MS Bold"],"color-base":"hsl(0, 0%, 0%)","color-poi":"hsl(0, 0%, 100%)","color-greenspace":"hsl(94, 100%, 14%)","color-greenspace-label":"hsl(94, 100%, 74%)","color-hospital":"hsl(0, 0%, 100%)","color-school":"hsl(0, 0%, 100%)"},"transit":{"color-airport":"hsl(0, 0%, 100%)","matchLabelAndIcon":false,"roadsFont":["DIN Pro Medium","Arial Unicode MS Regular"],"aeroways":false,"color-transit":"hsl(0, 0%, 100%)","color-road":"hsla(0, 0%, 90%, 0.5)","color-water":"hsl(196, 50%, 50%)","color-road-label":"hsl(0, 0%, 100%)","railways":false,"ferries":false,"poiEtcFont":["DIN Pro Bold","Arial Unicode MS Bold"],"color-base":"hsl(0, 0%, 0%)","color-road-outline":"hsla(0, 1%, 10%, 0.5)"},"place-labels":{"settlementsMinorFont":["DIN Pro Medium","Arial Unicode MS Regular"],"settlementSubdivisionsFont":["DIN Pro Medium","Arial Unicode MS Regular"],"color-base":"hsl(0, 0%, 0%)","color-place-label":"hsl(0, 0%, 100%)"}}}},"center":[-118.4106,33.750013],"zoom":13,"sources":{"mapbox://mapbox.satellite":{"url":"mapbox://mapbox.satellite","type":"raster","tileSize":256},"mapbox://mapbox.mapbox-traffic-v1":{"url":"mapbox://mapbox.mapbox-traffic-v1","type":"vector"},"composite":{"url":"mapbox://mapbox.mapbox-streets-v8","type":"vector"}},"sprite":"mapbox://sprites/northarrowresearch/ckmuw9x2e5f0417pe3vy7y0cz/55jsegcrpjhdm8ibxtin56tly","glyphs":"mapbox://fonts/northarrowresearch/{fontstack}/{range}.pbf","layers":[{"id":"background","type":"background","metadata":{"mapbox:featureComponent":"satellite","mapbox:group":"Satellite imagery, land"},"layout":{},"paint":{"background-color":"hsl(222, 56%, 4%)"}},{"id":"satellite","type":"raster","metadata":{"mapbox:featureComponent":"satellite","mapbox:group":"Satellite imagery, land"},"source":"mapbox://mapbox.satellite","layout":{},"paint":{}},{"id":"tunnel-street-minor-low","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, tunnels-case"},"source":"composite","source-layer":"road","minzoom":13,"filter":["all",["==",["get","structure"],"tunnel"],["step",["zoom"],["match",["get","class"],["street","street_limited","primary_link"],true,false],14,["match",["get","class"],["street","street_limited","primary_link","secondary_link","tertiary_link"],true,false]],["==",["geometry-type"],"LineString"]],"layout":{},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],12,0.5,14,["match",["get","class"],["street","street_limited","primary_link"],2,"track",1,0.5],18,["match",["get","class"],["street","street_limited","primary_link"],18,12]],"line-color":"hsla(0, 0%, 90%, 0.5)","line-opacity":["interpolate",["linear"],["zoom"],13,1,15,0]}},{"id":"tunnel-street-minor-case","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, tunnels-case"},"source":"composite","source-layer":"road","minzoom":13,"filter":["all",["==",["get","structure"],"tunnel"],["step",["zoom"],["match",["get","class"],["street","street_limited","primary_link"],true,false],14,["match",["get","class"],["street","street_limited","primary_link","secondary_link","tertiary_link"],true,false]],["==",["geometry-type"],"LineString"]],"layout":{},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],12,0.75,20,2],"line-color":"hsla(0, 0%, 0%, 0.5)","line-gap-width":["interpolate",["exponential",1.5],["zoom"],12,0.5,14,["match",["get","class"],["street","street_limited","primary_link"],2,"track",1,0.5],18,["match",["get","class"],["street","street_limited","primary_link"],18,12]],"line-opacity":["interpolate",["linear"],["zoom"],13,1,15,0],"line-dasharray":[3,3]}},{"id":"tunnel-primary-secondary-tertiary-case","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, tunnels-case"},"source":"composite","source-layer":"road","minzoom":13,"filter":["all",["==",["get","structure"],"tunnel"],["match",["get","class"],["primary","secondary","tertiary"],true,false],["==",["geometry-type"],"LineString"]],"layout":{},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],10,["match",["get","class"],"primary",1,0.75],18,2],"line-color":"hsla(0, 0%, 0%, 0.5)","line-gap-width":["interpolate",["exponential",1.5],["zoom"],5,["match",["get","class"],"primary",0.75,0.1],18,["match",["get","class"],"primary",32,26]],"line-dasharray":[3,3],"line-opacity":["interpolate",["linear"],["zoom"],13,0.3,15,0]}},{"id":"tunnel-major-link-case","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, tunnels-case"},"source":"composite","source-layer":"road","minzoom":13,"filter":["all",["==",["get","structure"],"tunnel"],["match",["get","class"],["motorway_link","trunk_link"],true,false],["==",["geometry-type"],"LineString"]],"layout":{},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],12,0.75,20,2],"line-color":"hsla(0, 0%, 90%, 0.5)","line-gap-width":["interpolate",["exponential",1.5],["zoom"],12,0.5,14,2,18,18],"line-dasharray":[3,3],"line-opacity":["interpolate",["linear"],["zoom"],13,1,15,0]}},{"id":"tunnel-motorway-trunk-case","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, tunnels-case"},"source":"composite","source-layer":"road","minzoom":13,"filter":["all",["==",["get","structure"],"tunnel"],["match",["get","class"],["motorway","trunk"],true,false],["==",["geometry-type"],"LineString"]],"layout":{},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],10,1,18,2],"line-color":"hsla(0, 1%, 22%, 0.5)","line-gap-width":["interpolate",["exponential",1.5],["zoom"],5,0.75,18,32],"line-dasharray":[3,3],"line-opacity":["interpolate",["linear"],["zoom"],13,1,15,0]}},{"id":"tunnel-path","type":"line","metadata":{"mapbox:featureComponent":"walking-cycling","mapbox:group":"Walking, cycling, etc., tunnels"},"source":"composite","source-layer":"road","minzoom":14,"filter":["all",["==",["get","structure"],"tunnel"],["==",["get","class"],"path"],["!=",["get","type"],"steps"],["==",["geometry-type"],"LineString"]],"layout":{},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],15,1,18,4],"line-color":"hsl(0, 0%, 10%)","line-dasharray":["step",["zoom"],["literal",[1,0]],15,["literal",[1.75,1]],16,["literal",[1,0.75]],17,["literal",[1,0.5]]]}},{"id":"tunnel-steps","type":"line","metadata":{"mapbox:featureComponent":"walking-cycling","mapbox:group":"Walking, cycling, etc., tunnels"},"source":"composite","source-layer":"road","minzoom":14,"filter":["all",["==",["get","structure"],"tunnel"],["==",["get","type"],"steps"],["==",["geometry-type"],"LineString"]],"layout":{},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],15,1,16,1.6,18,6],"line-color":"hsl(0, 0%, 10%)","line-dasharray":["step",["zoom"],["literal",[1,0]],15,["literal",[1.75,1]],16,["literal",[1,0.75]],17,["literal",[0.3,0.3]]]}},{"id":"tunnel-pedestrian","type":"line","metadata":{"mapbox:featureComponent":"walking-cycling","mapbox:group":"Walking, cycling, etc., tunnels"},"source":"composite","source-layer":"road","minzoom":13,"filter":["all",["==",["get","structure"],"tunnel"],["==",["get","class"],"pedestrian"],["==",["geometry-type"],"LineString"]],"layout":{},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],14,0.5,18,12],"line-color":"hsl(0, 0%, 10%)","line-dasharray":["step",["zoom"],["literal",[1,0]],15,["literal",[1.5,0.4]],16,["literal",[1,0.2]]]}},{"id":"tunnel-major-link","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, tunnels"},"source":"composite","source-layer":"road","minzoom":13,"filter":["all",["==",["get","structure"],"tunnel"],["match",["get","class"],["motorway_link","trunk_link"],true,false],["==",["geometry-type"],"LineString"]],"layout":{},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],12,0.5,14,2,18,18],"line-color":["match",["get","class"],"motorway_link","hsla(26, 100%, 78%, 0.7)","hsla(46, 77%, 78%, 0.7)"],"line-opacity":["interpolate",["linear"],["zoom"],13,1,15,0]}},{"id":"tunnel-street-minor","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, tunnels"},"source":"composite","source-layer":"road","minzoom":13,"filter":["all",["==",["get","structure"],"tunnel"],["step",["zoom"],["match",["get","class"],["street","street_limited","primary_link"],true,false],14,["match",["get","class"],["street","street_limited","primary_link","secondary_link","tertiary_link"],true,false]],["==",["geometry-type"],"LineString"]],"layout":{},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],12,0.5,14,["match",["get","class"],["street","street_limited","primary_link"],2,"track",1,0.5],18,["match",["get","class"],["street","street_limited","primary_link"],18,12]],"line-color":["match",["get","class"],"street_limited","hsl(0, 2%, 22%)","hsla(0, 0%, 90%, 0.5)"],"line-opacity":["interpolate",["linear"],["zoom"],13,1,15,0]}},{"id":"tunnel-primary-secondary-tertiary","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, tunnels"},"source":"composite","source-layer":"road","minzoom":13,"filter":["all",["==",["get","structure"],"tunnel"],["match",["get","class"],["primary","secondary","tertiary"],true,false],["==",["geometry-type"],"LineString"]],"layout":{},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],5,["match",["get","class"],"primary",0.75,0.1],18,["match",["get","class"],"primary",32,26]],"line-color":"hsla(0, 0%, 90%, 0.5)","line-opacity":["interpolate",["linear"],["zoom"],13,0.3,15,0]}},{"id":"tunnel-oneway-arrow-blue","type":"symbol","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, tunnels"},"source":"composite","source-layer":"road","minzoom":15,"filter":["all",["==",["get","structure"],"tunnel"],["==",["get","oneway"],"true"],["step",["zoom"],["match",["get","class"],["primary","secondary","street","street_limited","tertiary"],true,false],16,["match",["get","class"],["primary","secondary","tertiary","street","street_limited","primary_link","secondary_link","tertiary_link"],true,false]]],"layout":{"symbol-placement":"line","icon-image":["step",["zoom"],"oneway-small",17,["match",["get","class"],["primary","secondary","tertiary","street","street_limited"],"oneway-large","oneway-small"],18,"oneway-large"],"symbol-spacing":200,"icon-rotation-alignment":"map"},"paint":{}},{"id":"tunnel-motorway-trunk","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, tunnels"},"source":"composite","source-layer":"road","minzoom":13,"filter":["all",["==",["get","structure"],"tunnel"],["match",["get","class"],["motorway","trunk"],true,false],["==",["geometry-type"],"LineString"]],"layout":{},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],5,0.75,18,32],"line-color":["match",["get","class"],"motorway","hsla(26, 100%, 78%, 0.7)","hsla(46, 77%, 78%, 0.7)"],"line-opacity":["interpolate",["linear"],["zoom"],13,1,15,0]}},{"id":"tunnel-oneway-arrow-white","type":"symbol","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, tunnels"},"source":"composite","source-layer":"road","minzoom":16,"filter":["all",["==",["get","structure"],"tunnel"],["match",["get","class"],["motorway","motorway_link","trunk","trunk_link"],true,false],["==",["get","oneway"],"true"]],"layout":{"symbol-placement":"line","icon-image":["step",["zoom"],"oneway-white-small",17,"oneway-white-large"],"symbol-spacing":200},"paint":{}},{"id":"road-path","type":"line","metadata":{"mapbox:featureComponent":"walking-cycling","mapbox:group":"Walking, cycling, etc., surface"},"source":"composite","source-layer":"road","minzoom":12,"filter":["all",["==",["get","class"],"path"],["step",["zoom"],["!",["match",["get","type"],["steps","sidewalk","crossing"],true,false]],16,["!=",["get","type"],"steps"]],["match",["get","structure"],["none","ford"],true,false],["==",["geometry-type"],"LineString"]],"layout":{"line-join":["step",["zoom"],"miter",14,"round"]},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],13,0.5,14,1,15,1,18,4],"line-color":"hsl(0, 0%, 22%)","line-dasharray":["step",["zoom"],["literal",[4,0.3]],15,["literal",[1.75,0.3]],16,["literal",[1,0.3]],17,["literal",[1,0.25]]]}},{"id":"road-steps","type":"line","metadata":{"mapbox:featureComponent":"walking-cycling","mapbox:group":"Walking, cycling, etc., surface"},"source":"composite","source-layer":"road","minzoom":14,"filter":["all",["==",["get","type"],"steps"],["match",["get","structure"],["none","ford"],true,false],["==",["geometry-type"],"LineString"]],"layout":{"line-join":"round"},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],15,1,16,1.6,18,6],"line-color":"hsl(0, 0%, 22%)","line-dasharray":["step",["zoom"],["literal",[1,0]],15,["literal",[1.75,1]],16,["literal",[1,0.75]],17,["literal",[0.3,0.3]]]}},{"id":"road-pedestrian","type":"line","metadata":{"mapbox:featureComponent":"walking-cycling","mapbox:group":"Walking, cycling, etc., surface"},"source":"composite","source-layer":"road","minzoom":12,"filter":["all",["==",["get","class"],"pedestrian"],["match",["get","structure"],["none","ford"],true,false],["==",["geometry-type"],"LineString"]],"layout":{"line-join":["step",["zoom"],"miter",14,"round"]},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],14,0.5,18,12],"line-color":"hsl(0, 0%, 22%)","line-dasharray":["step",["zoom"],["literal",[1,0]],15,["literal",[1.5,0.4]],16,["literal",[1,0.2]]]}},{"id":"road-minor-low","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, surface"},"source":"composite","source-layer":"road","minzoom":13,"filter":["all",["step",["zoom"],false,14,["match",["get","class"],["secondary_link","tertiary_link"],true,false]],["match",["get","structure"],["none","ford"],true,false],["==",["geometry-type"],"LineString"]],"layout":{"line-cap":["step",["zoom"],"butt",14,"round"],"line-join":["step",["zoom"],"miter",14,"round"]},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],14,["match",["get","class"],"track",1,0.5],18,12],"line-color":"hsla(0, 0%, 90%, 0.5)","line-opacity":["interpolate",["linear"],["zoom"],13,1,15,0]}},{"id":"road-minor-case","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, surface"},"source":"composite","source-layer":"road","minzoom":13,"filter":["all",["step",["zoom"],false,14,["match",["get","class"],["secondary_link","tertiary_link"],true,false]],["match",["get","structure"],["none","ford"],true,false],["==",["geometry-type"],"LineString"]],"layout":{"line-cap":["step",["zoom"],"butt",14,"round"],"line-join":["step",["zoom"],"miter",14,"round"]},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],12,0.75,20,2],"line-color":"hsla(0, 1%, 10%, 0.5)","line-gap-width":["interpolate",["exponential",1.5],["zoom"],14,["match",["get","class"],"track",1,0.5],18,12],"line-opacity":["interpolate",["linear"],["zoom"],13,1,15,0]}},{"id":"road-street-low","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, surface"},"source":"composite","source-layer":"road","minzoom":11,"filter":["all",["match",["get","class"],["street","street_limited","primary_link"],true,false],["match",["get","structure"],["none","ford"],true,false],["==",["geometry-type"],"LineString"]],"layout":{"line-cap":["step",["zoom"],"butt",14,"round"],"line-join":["step",["zoom"],"miter",14,"round"]},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],12,0.5,14,2,18,18],"line-color":"hsla(0, 0%, 90%, 0.5)","line-opacity":["interpolate",["linear"],["zoom"],13,0.3,15,0]}},{"id":"road-street-case","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, surface"},"source":"composite","source-layer":"road","minzoom":11,"filter":["all",["match",["get","class"],["street","street_limited","primary_link"],true,false],["match",["get","structure"],["none","ford"],true,false],["==",["geometry-type"],"LineString"]],"layout":{"line-cap":["step",["zoom"],"butt",14,"round"],"line-join":["step",["zoom"],"miter",14,"round"]},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],12,0.75,20,2],"line-color":"hsla(0, 1%, 10%, 0.5)","line-gap-width":["interpolate",["exponential",1.5],["zoom"],12,0.5,14,2,18,18],"line-opacity":["interpolate",["linear"],["zoom"],13,0.3,15,0]}},{"id":"road-secondary-tertiary-case","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, surface"},"source":"composite","source-layer":"road","minzoom":8,"filter":["all",["match",["get","class"],["secondary","tertiary"],true,false],["match",["get","structure"],["none","ford"],true,false],["==",["geometry-type"],"LineString"]],"layout":{"line-cap":["step",["zoom"],"butt",14,"round"],"line-join":["step",["zoom"],"miter",14,"round"]},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],10,0.75,18,2],"line-color":"hsla(0, 1%, 10%, 0.5)","line-gap-width":["interpolate",["exponential",1.5],["zoom"],5,0.1,18,26],"line-opacity":["interpolate",["linear"],["zoom"],13,0.3,15,0]}},{"id":"road-primary-case","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, surface"},"source":"composite","source-layer":"road","minzoom":7,"filter":["all",["==",["get","class"],"primary"],["match",["get","structure"],["none","ford"],true,false],["==",["geometry-type"],"LineString"]],"layout":{"line-cap":["step",["zoom"],"butt",14,"round"],"line-join":["step",["zoom"],"miter",14,"round"]},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],10,1,18,2],"line-color":"hsla(0, 1%, 10%, 0.5)","line-gap-width":["interpolate",["exponential",1.5],["zoom"],5,0.75,18,32],"line-opacity":["interpolate",["linear"],["zoom"],13,1,15,0]}},{"id":"road-major-link-case","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, surface"},"source":"composite","source-layer":"road","minzoom":10,"filter":["all",["match",["get","class"],["motorway_link","trunk_link"],true,false],["match",["get","structure"],["none","ford"],true,false],["==",["geometry-type"],"LineString"]],"layout":{"line-cap":["step",["zoom"],"butt",14,"round"],"line-join":["step",["zoom"],"miter",14,"round"]},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],12,0.75,20,2],"line-color":"hsla(0, 1%, 22%, 0.5)","line-gap-width":["interpolate",["exponential",1.5],["zoom"],12,0.5,14,2,18,18],"line-opacity":["interpolate",["linear"],["zoom"],13,1,15,0]}},{"id":"road-motorway-trunk-case","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, surface"},"source":"composite","source-layer":"road","minzoom":5,"filter":["all",["match",["get","class"],["motorway","trunk"],true,false],["match",["get","structure"],["none","ford"],true,false],["==",["geometry-type"],"LineString"]],"layout":{"line-cap":["step",["zoom"],"butt",14,"round"],"line-join":["step",["zoom"],"miter",14,"round"]},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],10,1,18,2],"line-color":"hsla(0, 1%, 22%, 0.5)","line-gap-width":["interpolate",["exponential",1.5],["zoom"],5,0.75,18,32],"line-opacity":["interpolate",["linear"],["zoom"],13,1,15,0]}},{"id":"road-major-link","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, surface"},"source":"composite","source-layer":"road","minzoom":10,"filter":["all",["match",["get","class"],["motorway_link","trunk_link"],true,false],["match",["get","structure"],["none","ford"],true,false],["==",["geometry-type"],"LineString"]],"layout":{"line-cap":["step",["zoom"],"butt",13,"round"],"line-join":["step",["zoom"],"miter",13,"round"]},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],12,0.5,14,2,18,18],"line-color":["match",["get","class"],"motorway_link","hsla(26, 100%, 68%, 0.7)","hsla(46, 87%, 68%, 0.7)"],"line-opacity":["interpolate",["linear"],["zoom"],13,1,15,0]}},{"id":"road-minor","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, surface"},"source":"composite","source-layer":"road","minzoom":13,"filter":["all",["step",["zoom"],false,14,["match",["get","class"],["secondary_link","tertiary_link"],true,false]],["match",["get","structure"],["none","ford"],true,false],["==",["geometry-type"],"LineString"]],"layout":{"line-cap":["step",["zoom"],"butt",14,"round"],"line-join":["step",["zoom"],"miter",14,"round"]},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],14,["match",["get","class"],"track",1,0.5],18,12],"line-color":"hsla(0, 0%, 90%, 0.5)","line-opacity":["interpolate",["linear"],["zoom"],13,1,15,0]}},{"id":"road-street","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, surface"},"source":"composite","source-layer":"road","minzoom":11,"filter":["all",["match",["get","class"],["street","street_limited","primary_link"],true,false],["match",["get","structure"],["none","ford"],true,false],["==",["geometry-type"],"LineString"]],"layout":{"line-cap":["step",["zoom"],"butt",14,"round"],"line-join":["step",["zoom"],"miter",14,"round"]},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],12,0.5,14,2,18,18],"line-color":["match",["get","class"],"street_limited","hsl(0, 2%, 22%)","hsla(0, 0%, 90%, 0.5)"],"line-opacity":["interpolate",["linear"],["zoom"],13,0.3,15,0]}},{"id":"road-secondary-tertiary","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, surface"},"source":"composite","source-layer":"road","minzoom":8,"filter":["all",["match",["get","class"],["secondary","tertiary"],true,false],["match",["get","structure"],["none","ford"],true,false],["==",["geometry-type"],"LineString"]],"layout":{"line-cap":["step",["zoom"],"butt",14,"round"],"line-join":["step",["zoom"],"miter",14,"round"]},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],5,0.1,18,26],"line-color":"hsla(0, 0%, 90%, 0.5)","line-opacity":["interpolate",["linear"],["zoom"],13,0.3,15,0]}},{"id":"road-primary","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, surface"},"source":"composite","source-layer":"road","minzoom":6,"filter":["all",["==",["get","class"],"primary"],["match",["get","structure"],["none","ford"],true,false],["==",["geometry-type"],"LineString"]],"layout":{"line-cap":["step",["zoom"],"butt",14,"round"],"line-join":["step",["zoom"],"miter",14,"round"]},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],5,0.75,18,32],"line-color":"hsla(0, 0%, 90%, 0.5)","line-opacity":["interpolate",["linear"],["zoom"],13,1,15,0]}},{"id":"road-oneway-arrow-blue","type":"symbol","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, surface"},"source":"composite","source-layer":"road","minzoom":15,"filter":["all",["==",["get","oneway"],"true"],["step",["zoom"],["match",["get","class"],["primary","secondary","tertiary","street","street_limited"],true,false],16,["match",["get","class"],["primary","secondary","tertiary","street","street_limited","primary_link","secondary_link","tertiary_link"],true,false]],["match",["get","structure"],["none","ford"],true,false]],"layout":{"symbol-placement":"line","icon-image":["step",["zoom"],"oneway-small",17,["match",["get","class"],["primary","secondary","tertiary","street","street_limited"],"oneway-large","oneway-small"],18,"oneway-large"],"symbol-spacing":200,"icon-rotation-alignment":"map"},"paint":{}},{"id":"road-motorway-trunk","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, surface"},"source":"composite","source-layer":"road","filter":["all",["match",["get","class"],["motorway","trunk"],true,false],["match",["get","structure"],["none","ford"],true,false],["==",["geometry-type"],"LineString"]],"layout":{"line-cap":["step",["zoom"],"butt",13,"round"],"line-join":["step",["zoom"],"miter",13,"round"]},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],5,0.75,18,32],"line-color":["step",["zoom"],["match",["get","class"],"motorway","hsla(26, 87%, 62%, 0.7)","hsla(0, 0%, 90%, 0.5)"],6,["match",["get","class"],"motorway","hsla(26, 87%, 62%, 0.7)","hsla(46, 80%, 60%, 0.7)"],9,["match",["get","class"],"motorway","hsla(26, 100%, 68%, 0.7)","hsla(46, 87%, 68%, 0.7)"]],"line-opacity":["interpolate",["linear"],["zoom"],13,1,15,0]}},{"id":"road-oneway-arrow-white","type":"symbol","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, surface-icons"},"source":"composite","source-layer":"road","minzoom":16,"filter":["all",["==",["get","oneway"],"true"],["match",["get","class"],["motorway","trunk","motorway_link","trunk_link"],true,false],["match",["get","structure"],["none","ford"],true,false]],"layout":{"symbol-placement":"line","icon-image":["step",["zoom"],"oneway-white-small",17,"oneway-white-large"],"symbol-spacing":200},"paint":{}},{"id":"bridge-path","type":"line","metadata":{"mapbox:featureComponent":"walking-cycling","mapbox:group":"Walking, cycling, etc., barriers-bridges"},"source":"composite","source-layer":"road","minzoom":14,"filter":["all",["==",["get","structure"],"bridge"],["==",["get","class"],"path"],["==",["geometry-type"],"LineString"],["!=",["get","type"],"steps"]],"layout":{"line-join":"round"},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],15,1,18,4],"line-color":"hsl(0, 0%, 22%)","line-dasharray":["step",["zoom"],["literal",[4,0.3]],15,["literal",[1.75,0.3]],16,["literal",[1,0.3]],17,["literal",[1,0.25]]]}},{"id":"bridge-steps","type":"line","metadata":{"mapbox:featureComponent":"walking-cycling","mapbox:group":"Walking, cycling, etc., barriers-bridges"},"source":"composite","source-layer":"road","minzoom":14,"filter":["all",["==",["get","type"],"steps"],["==",["get","structure"],"bridge"],["==",["geometry-type"],"LineString"]],"layout":{"line-join":"round"},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],15,1,16,1.6,18,6],"line-color":"hsl(0, 0%, 22%)","line-dasharray":["step",["zoom"],["literal",[1,0]],15,["literal",[1.75,1]],16,["literal",[1,0.75]],17,["literal",[0.3,0.3]]]}},{"id":"bridge-pedestrian","type":"line","metadata":{"mapbox:featureComponent":"walking-cycling","mapbox:group":"Walking, cycling, etc., barriers-bridges"},"source":"composite","source-layer":"road","minzoom":13,"filter":["all",["==",["get","structure"],"bridge"],["==",["get","class"],"pedestrian"],["==",["geometry-type"],"LineString"]],"layout":{"line-join":"round"},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],14,0.5,18,12],"line-color":"hsl(0, 0%, 22%)","line-dasharray":["step",["zoom"],["literal",[1,0]],15,["literal",[1.5,0.4]],16,["literal",[1,0.2]]]}},{"id":"bridge-street-minor-low","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, bridges"},"source":"composite","source-layer":"road","minzoom":13,"filter":["all",["==",["get","structure"],"bridge"],["step",["zoom"],["match",["get","class"],["street","street_limited","primary_link"],true,false],14,["match",["get","class"],["street","street_limited","primary_link","secondary_link","tertiary_link"],true,false]],["==",["geometry-type"],"LineString"]],"layout":{"line-cap":["step",["zoom"],"butt",14,"round"],"line-join":["step",["zoom"],"miter",14,"round"]},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],12,0.5,14,["match",["get","class"],["street","street_limited","primary_link"],2,"track",1,0.5],18,["match",["get","class"],["street","street_limited","primary_link"],18,12]],"line-color":"hsla(0, 0%, 90%, 0.5)","line-opacity":["interpolate",["linear"],["zoom"],13,1,15,0]}},{"id":"bridge-street-minor-case","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, bridges"},"source":"composite","source-layer":"road","minzoom":13,"filter":["all",["==",["get","structure"],"bridge"],["step",["zoom"],["match",["get","class"],["street","street_limited","primary_link"],true,false],14,["match",["get","class"],["street","street_limited","primary_link","secondary_link","tertiary_link"],true,false]],["==",["geometry-type"],"LineString"]],"layout":{"line-join":"round"},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],12,0.75,20,2],"line-color":"hsla(0, 1%, 10%, 0.5)","line-gap-width":["interpolate",["exponential",1.5],["zoom"],12,0.5,14,["match",["get","class"],["street","street_limited","primary_link"],2,"track",1,0.5],18,["match",["get","class"],["street","street_limited","primary_link"],18,12]],"line-opacity":["interpolate",["linear"],["zoom"],13,1,15,0]}},{"id":"bridge-primary-secondary-tertiary-case","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, bridges"},"source":"composite","source-layer":"road","minzoom":13,"filter":["all",["==",["get","structure"],"bridge"],["match",["get","class"],["primary","secondary","tertiary"],true,false],["==",["geometry-type"],"LineString"]],"layout":{"line-join":"round"},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],10,["match",["get","class"],"primary",1,0.75],18,2],"line-color":"hsla(0, 1%, 10%, 0.5)","line-gap-width":["interpolate",["exponential",1.5],["zoom"],5,["match",["get","class"],"primary",0.75,0.1],18,["match",["get","class"],"primary",32,26]],"line-opacity":["interpolate",["linear"],["zoom"],13,0.3,15,0]}},{"id":"bridge-major-link-case","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, bridges"},"source":"composite","source-layer":"road","minzoom":13,"filter":["all",["==",["get","structure"],"bridge"],["match",["get","class"],["motorway_link","trunk_link"],true,false],["<=",["get","layer"],1],["==",["geometry-type"],"LineString"]],"layout":{"line-join":"round"},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],12,0.75,20,2],"line-color":"hsla(0, 1%, 22%, 0.5)","line-gap-width":["interpolate",["exponential",1.5],["zoom"],12,0.5,14,2,18,18],"line-opacity":["interpolate",["linear"],["zoom"],13,1,15,0]}},{"id":"bridge-motorway-trunk-case","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, bridges"},"source":"composite","source-layer":"road","minzoom":13,"filter":["all",["==",["get","structure"],"bridge"],["match",["get","class"],["motorway","trunk"],true,false],["<=",["get","layer"],1],["==",["geometry-type"],"LineString"]],"layout":{"line-join":"round"},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],10,1,18,2],"line-color":"hsla(0, 1%, 22%, 0.5)","line-gap-width":["interpolate",["exponential",1.5],["zoom"],5,0.75,18,32],"line-opacity":["interpolate",["linear"],["zoom"],13,1,15,0]}},{"id":"bridge-major-link","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, bridges"},"source":"composite","source-layer":"road","minzoom":13,"filter":["all",["==",["get","structure"],"bridge"],["match",["get","class"],["motorway_link","trunk_link"],true,false],["<=",["get","layer"],1],["==",["geometry-type"],"LineString"]],"layout":{"line-cap":"round","line-join":"round"},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],12,0.5,14,2,18,18],"line-color":["match",["get","class"],"motorway_link","hsla(26, 100%, 68%, 0.7)","hsla(46, 87%, 68%, 0.7)"],"line-opacity":["interpolate",["linear"],["zoom"],13,1,15,0]}},{"id":"bridge-street-minor","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, bridges"},"source":"composite","source-layer":"road","minzoom":13,"filter":["all",["==",["get","structure"],"bridge"],["step",["zoom"],["match",["get","class"],["street","street_limited","primary_link"],true,false],14,["match",["get","class"],["street","street_limited","primary_link","secondary_link","tertiary_link"],true,false]],["==",["geometry-type"],"LineString"]],"layout":{"line-cap":["step",["zoom"],"butt",14,"round"],"line-join":["step",["zoom"],"miter",14,"round"]},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],12,0.5,14,["match",["get","class"],["street","street_limited","primary_link"],2,"track",1,0.5],18,["match",["get","class"],["street","street_limited","primary_link"],18,12]],"line-color":["match",["get","class"],"street_limited","hsl(0, 2%, 22%)","hsla(0, 0%, 90%, 0.5)"],"line-opacity":["interpolate",["linear"],["zoom"],13,1,15,0]}},{"id":"bridge-primary-secondary-tertiary","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, bridges"},"source":"composite","source-layer":"road","minzoom":13,"filter":["all",["==",["get","structure"],"bridge"],["match",["get","class"],["primary","secondary","tertiary"],true,false],["==",["geometry-type"],"LineString"]],"layout":{"line-cap":["step",["zoom"],"butt",14,"round"],"line-join":["step",["zoom"],"miter",14,"round"]},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],5,["match",["get","class"],"primary",0.75,0.1],18,["match",["get","class"],"primary",32,26]],"line-color":"hsla(0, 0%, 90%, 0.5)","line-opacity":["interpolate",["linear"],["zoom"],13,0.3,15,0]}},{"id":"bridge-oneway-arrow-blue","type":"symbol","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, bridges"},"source":"composite","source-layer":"road","minzoom":15,"filter":["all",["==",["get","structure"],"bridge"],["==",["get","oneway"],"true"],["step",["zoom"],["match",["get","class"],["primary","secondary","tertiary","street","street_limited"],true,false],16,["match",["get","class"],["primary","secondary","tertiary","street","street_limited","primary_link","secondary_link","tertiary_link"],true,false]]],"layout":{"symbol-placement":"line","icon-image":["step",["zoom"],"oneway-small",17,["match",["get","class"],["primary","secondary","tertiary","street","street_limited"],"oneway-large","oneway-small"],18,"oneway-large"],"symbol-spacing":200,"icon-rotation-alignment":"map"},"paint":{}},{"id":"bridge-motorway-trunk","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, bridges"},"source":"composite","source-layer":"road","minzoom":13,"filter":["all",["==",["get","structure"],"bridge"],["match",["get","class"],["motorway","trunk"],true,false],["<=",["get","layer"],1],["==",["geometry-type"],"LineString"]],"layout":{"line-cap":"round","line-join":"round"},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],5,0.75,18,32],"line-color":["match",["get","class"],"motorway","hsla(26, 100%, 68%, 0.7)","hsla(46, 87%, 68%, 0.7)"],"line-opacity":["interpolate",["linear"],["zoom"],13,1,15,0]}},{"id":"bridge-major-link-2-case","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, bridges"},"source":"composite","source-layer":"road","minzoom":13,"filter":["all",["==",["get","structure"],"bridge"],[">=",["get","layer"],2],["match",["get","class"],["motorway_link","trunk_link"],true,false],["==",["geometry-type"],"LineString"]],"layout":{"line-join":"round"},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],12,0.75,20,2],"line-color":"hsla(0, 1%, 22%, 0.5)","line-gap-width":["interpolate",["exponential",1.5],["zoom"],12,0.5,14,2,18,18],"line-opacity":["interpolate",["linear"],["zoom"],13,1,15,0]}},{"id":"bridge-motorway-trunk-2-case","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, bridges"},"source":"composite","source-layer":"road","minzoom":13,"filter":["all",["==",["get","structure"],"bridge"],[">=",["get","layer"],2],["match",["get","class"],["motorway","trunk"],true,false],["==",["geometry-type"],"LineString"]],"layout":{"line-join":"round"},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],10,1,18,2],"line-color":"hsla(0, 1%, 22%, 0.5)","line-gap-width":["interpolate",["exponential",1.5],["zoom"],5,0.75,18,32],"line-opacity":["interpolate",["linear"],["zoom"],13,1,15,0]}},{"id":"bridge-major-link-2","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, bridges"},"source":"composite","source-layer":"road","minzoom":13,"filter":["all",["==",["get","structure"],"bridge"],[">=",["get","layer"],2],["match",["get","class"],["motorway_link","trunk_link"],true,false],["==",["geometry-type"],"LineString"]],"layout":{"line-cap":"round","line-join":"round"},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],12,0.5,14,2,18,18],"line-color":["match",["get","class"],"motorway_link","hsla(26, 100%, 68%, 0.7)","hsla(46, 87%, 68%, 0.7)"],"line-opacity":["interpolate",["linear"],["zoom"],13,1,15,0]}},{"id":"bridge-motorway-trunk-2","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, bridges"},"source":"composite","source-layer":"road","minzoom":13,"filter":["all",["==",["get","structure"],"bridge"],[">=",["get","layer"],2],["match",["get","class"],["motorway","trunk"],true,false],["==",["geometry-type"],"LineString"]],"layout":{"line-cap":["step",["zoom"],"butt",14,"round"],"line-join":["step",["zoom"],"miter",14,"round"]},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],5,0.75,18,32],"line-color":["match",["get","class"],"motorway","hsla(26, 100%, 68%, 0.7)","hsla(46, 87%, 68%, 0.7)"],"line-opacity":["interpolate",["linear"],["zoom"],13,1,15,0]}},{"id":"bridge-oneway-arrow-white","type":"symbol","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, bridges"},"source":"composite","source-layer":"road","minzoom":16,"filter":["all",["==",["get","structure"],"bridge"],["match",["get","class"],["motorway","trunk","motorway_link","trunk_link"],true,false],["==",["get","oneway"],"true"]],"layout":{"symbol-placement":"line","icon-image":["step",["zoom"],"oneway-white-small",17,"oneway-white-large"],"symbol-spacing":200},"paint":{}},{"id":"aerialway","type":"line","metadata":{"mapbox:featureComponent":"transit","mapbox:group":"Transit, elevated"},"source":"composite","source-layer":"road","minzoom":12,"filter":["==",["get","class"],"aerialway"],"layout":{"line-join":"round"},"paint":{"line-color":"hsla(0, 0%, 25%, 0.5)","line-width":["interpolate",["exponential",1.5],["zoom"],14,0.5,20,1]}},{"id":"admin-1-boundary-bg","type":"line","metadata":{"mapbox:featureComponent":"admin-boundaries","mapbox:group":"Administrative boundaries, admin"},"source":"composite","source-layer":"admin","minzoom":7,"filter":["all",["==",["get","admin_level"],1],["==",["get","maritime"],"false"],["match",["get","worldview"],["all","US"],true,false]],"layout":{"line-join":"bevel"},"paint":{"line-color":["interpolate",["linear"],["zoom"],8,"hsl(0, 0%, 14%)",16,"hsl(0, 0%, 30%)"],"line-width":["interpolate",["linear"],["zoom"],7,3.75,12,5.5],"line-opacity":["interpolate",["linear"],["zoom"],7,0,8,0.75],"line-dasharray":[1,0],"line-blur":["interpolate",["linear"],["zoom"],3,0,8,3]}},{"id":"admin-0-boundary-bg","type":"line","metadata":{"mapbox:featureComponent":"admin-boundaries","mapbox:group":"Administrative boundaries, admin"},"source":"composite","source-layer":"admin","minzoom":1,"filter":["all",["==",["get","admin_level"],0],["==",["get","maritime"],"false"],["match",["get","worldview"],["all","US"],true,false]],"layout":{},"paint":{"line-width":["interpolate",["linear"],["zoom"],3,5.25,10,12],"line-color":["interpolate",["linear"],["zoom"],6,"hsl(0, 0%, 14%)",8,"hsl(0, 0%, 30%)"],"line-opacity":["interpolate",["linear"],["zoom"],3,0,4,0.5],"line-blur":["interpolate",["linear"],["zoom"],3,0,10,3]}},{"id":"admin-1-boundary","type":"line","metadata":{"mapbox:featureComponent":"admin-boundaries","mapbox:group":"Administrative boundaries, admin"},"source":"composite","source-layer":"admin","minzoom":2,"filter":["all",["==",["get","admin_level"],1],["==",["get","maritime"],"false"],["match",["get","worldview"],["all","US"],true,false]],"layout":{"line-join":"round","line-cap":"round"},"paint":{"line-dasharray":["step",["zoom"],["literal",[2,0]],7,["literal",[2,2,6,2]]],"line-width":["interpolate",["linear"],["zoom"],7,0.75,12,1.5],"line-opacity":["interpolate",["linear"],["zoom"],2,0,3,1],"line-color":["interpolate",["linear"],["zoom"],3,"hsl(0, 0%, 0%)",7,"hsl(0, 0%, 5%)"]}},{"id":"admin-0-boundary","type":"line","metadata":{"mapbox:featureComponent":"admin-boundaries","mapbox:group":"Administrative boundaries, admin"},"source":"composite","source-layer":"admin","minzoom":1,"filter":["all",["==",["get","admin_level"],0],["==",["get","disputed"],"false"],["==",["get","maritime"],"false"],["match",["get","worldview"],["all","US"],true,false]],"layout":{"line-join":"round","line-cap":"round"},"paint":{"line-color":"hsl(0, 0%, 0%)","line-width":["interpolate",["linear"],["zoom"],3,0.75,10,3],"line-dasharray":[10,0]}},{"id":"admin-0-boundary-disputed","type":"line","metadata":{"mapbox:featureComponent":"admin-boundaries","mapbox:group":"Administrative boundaries, admin"},"source":"composite","source-layer":"admin","minzoom":1,"filter":["all",["==",["get","disputed"],"true"],["==",["get","admin_level"],0],["==",["get","maritime"],"false"],["match",["get","worldview"],["all","US"],true,false]],"layout":{"line-join":"round"},"paint":{"line-color":"hsl(0, 0%, 0%)","line-width":["interpolate",["linear"],["zoom"],3,0.75,10,3],"line-dasharray":["step",["zoom"],["literal",[3.25,3.25]],6,["literal",[2.5,2.5]],7,["literal",[2,2.25]],8,["literal",[1.75,2]]]}},{"id":"road-label","type":"symbol","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, road-labels"},"source":"composite","source-layer":"road","minzoom":10,"filter":["step",["zoom"],["match",["get","class"],["motorway","trunk","primary","secondary","tertiary"],true,false],12,["match",["get","class"],["motorway","trunk","primary","secondary","tertiary","street","street_limited"],true,false],15,["match",["get","class"],["path","pedestrian","golf","ferry","aerialway","track","service"],false,true]],"layout":{"text-size":["interpolate",["linear"],["zoom"],10,["match",["get","class"],["motorway","trunk","primary","secondary","tertiary"],10,["motorway_link","trunk_link","primary_link","secondary_link","tertiary_link","street","street_limited"],9,6.5],18,["match",["get","class"],["motorway","trunk","primary","secondary","tertiary"],16,["motorway_link","trunk_link","primary_link","secondary_link","tertiary_link","street","street_limited"],14,13]],"text-max-angle":30,"text-font":["DIN Pro Medium","Arial Unicode MS Regular"],"symbol-placement":"line","text-padding":1,"text-rotation-alignment":"map","text-pitch-alignment":"viewport","text-field":["coalesce",["get","name_en"],["get","name"]],"text-letter-spacing":0.01},"paint":{"text-color":"hsl(0, 0%, 100%)","text-halo-color":["match",["get","class"],["motorway","trunk"],"hsla(0, 5%, 0%, 0.75)","hsl(0, 5%, 0%)"],"text-halo-width":1,"text-halo-blur":1}},{"id":"road-intersection","type":"symbol","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, road-labels"},"source":"composite","source-layer":"road","minzoom":15,"filter":["all",["==",["get","class"],"intersection"],["has","name"]],"layout":{"text-field":["coalesce",["get","name_en"],["get","name"]],"icon-image":"intersection","icon-text-fit":"both","icon-text-fit-padding":[1,2,1,2],"text-size":["interpolate",["exponential",1.2],["zoom"],15,9,18,12],"text-font":["DIN Pro Bold","Arial Unicode MS Bold"]},"paint":{"text-color":"hsl(230, 57%, 64%)"}},{"id":"road-number-shield","type":"symbol","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, road-labels"},"source":"composite","source-layer":"road","minzoom":6,"filter":["all",["has","reflen"],["<=",["get","reflen"],6],["step",["zoom"],["==",["geometry-type"],"Point"],11,[">",["get","len"],5000],12,[">",["get","len"],2500],13,[">",["get","len"],1000],14,true]],"layout":{"text-size":9,"icon-image":["concat",["get","shield"],"-",["to-string",["get","reflen"]]],"icon-rotation-alignment":"viewport","text-max-angle":38,"symbol-spacing":["interpolate",["linear"],["zoom"],11,150,14,200],"text-font":["DIN Pro Bold","Arial Unicode MS Bold"],"symbol-placement":["step",["zoom"],"point",11,"line"],"text-rotation-alignment":"viewport","text-field":["get","ref"],"text-letter-spacing":0.05},"paint":{"text-color":["match",["get","shield_text_color"],"white","hsl(0, 0%, 100%)","yellow","hsl(50, 100%, 70%)","orange","hsl(25, 100%, 75%)","blue","hsl(230, 57%, 44%)","hsl(230, 18%, 13%)"]}},{"id":"road-exit-shield","type":"symbol","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, road-labels"},"source":"composite","source-layer":"motorway_junction","minzoom":14,"filter":["all",["has","reflen"],["<=",["get","reflen"],9]],"layout":{"text-field":["get","ref"],"text-size":9,"icon-image":["concat","motorway-exit-",["to-string",["get","reflen"]]],"text-font":["DIN Pro Bold","Arial Unicode MS Bold"]},"paint":{"text-color":"hsl(0, 0%, 100%)","text-translate":[0,0]}},{"id":"ferry-aerialway-label","type":"symbol","metadata":{"mapbox:featureComponent":"transit","mapbox:group":"Transit, ferry-aerialway-labels"},"source":"composite","source-layer":"road","minzoom":15,"filter":["match",["get","class"],"aerialway",true,false],"layout":{"text-size":["interpolate",["linear"],["zoom"],10,6.5,18,13],"text-max-angle":30,"text-font":["DIN Pro Medium","Arial Unicode MS Regular"],"symbol-placement":"line","text-padding":1,"text-rotation-alignment":"map","text-pitch-alignment":"viewport","text-field":["coalesce",["get","name_en"],["get","name"]],"text-letter-spacing":0.01},"paint":{"text-color":["match",["get","class"],"ferry","hsl(196, 18%, 86%)","hsl(0, 0%, 100%)"],"text-halo-color":["match",["get","class"],"ferry","hsl(196, 50%, 50%)","hsl(0, 5%, 0%)"],"text-halo-width":1,"text-halo-blur":1}},{"id":"waterway-label","type":"symbol","metadata":{"mapbox:featureComponent":"natural-features","mapbox:group":"Natural features, natural-labels"},"source":"composite","source-layer":"natural_label","minzoom":13,"filter":["all",["match",["get","class"],["canal","river","stream"],["match",["get","worldview"],["all","US"],true,false],["disputed_canal","disputed_river","disputed_stream"],["all",["==",["get","disputed"],"true"],["match",["get","worldview"],["all","US"],true,false]],false],["==",["geometry-type"],"LineString"]],"layout":{"text-font":["DIN Pro Italic","Arial Unicode MS Regular"],"text-max-angle":30,"symbol-spacing":["interpolate",["linear",1],["zoom"],15,250,17,400],"text-size":["interpolate",["linear"],["zoom"],13,12,18,16],"symbol-placement":"line","text-pitch-alignment":"viewport","text-field":["coalesce",["get","name_en"],["get","name"]]},"paint":{"text-color":"hsl(196, 18%, 90%)"}},{"id":"natural-line-label","type":"symbol","metadata":{"mapbox:featureComponent":"natural-features","mapbox:group":"Natural features, natural-labels"},"source":"composite","source-layer":"natural_label","minzoom":4,"filter":["all",["match",["get","class"],["glacier","landform"],["match",["get","worldview"],["all","US"],true,false],["disputed_glacier","disputed_landform"],["all",["==",["get","disputed"],"true"],["match",["get","worldview"],["all","US"],true,false]],false],["==",["geometry-type"],"LineString"],["<=",["get","filterrank"],2]],"layout":{"text-size":["step",["zoom"],["step",["get","sizerank"],18,5,12],17,["step",["get","sizerank"],18,13,12]],"text-max-angle":30,"text-field":["coalesce",["get","name_en"],["get","name"]],"text-font":["DIN Pro Bold","Arial Unicode MS Bold"],"symbol-placement":"line-center","text-pitch-alignment":"viewport"},"paint":{"text-halo-width":0.5,"text-halo-color":"hsl(0, 5%, 0%)","text-halo-blur":0.5,"text-color":["step",["zoom"],["step",["get","sizerank"],"hsl(0, 0%, 100%)",5,"hsl(0, 0%, 100%)"],17,["step",["get","sizerank"],"hsl(0, 0%, 100%)",13,"hsl(0, 0%, 100%)"]]}},{"id":"natural-point-label","type":"symbol","metadata":{"mapbox:featureComponent":"natural-features","mapbox:group":"Natural features, natural-labels"},"source":"composite","source-layer":"natural_label","minzoom":4,"filter":["all",["match",["get","class"],["dock","glacier","landform","water_feature","wetland"],["match",["get","worldview"],["all","US"],true,false],["disputed_dock","disputed_glacier","disputed_landform","disputed_water_feature","disputed_wetland"],["all",["==",["get","disputed"],"true"],["match",["get","worldview"],["all","US"],true,false]],false],["==",["geometry-type"],"Point"],["<=",["get","filterrank"],2]],"layout":{"text-size":["step",["zoom"],["step",["get","sizerank"],18,5,12],17,["step",["get","sizerank"],18,13,12]],"icon-image":["step",["zoom"],["concat",["get","maki"],"-11"],15,["concat",["get","maki"],"-15"]],"text-font":["DIN Pro Bold","Arial Unicode MS Bold"],"text-offset":["step",["zoom"],["step",["get","sizerank"],["literal",[0,0]],5,["literal",[0,0.75]]],17,["step",["get","sizerank"],["literal",[0,0]],13,["literal",[0,0.75]]]],"text-anchor":["step",["zoom"],["step",["get","sizerank"],"center",5,"top"],17,["step",["get","sizerank"],"center",13,"top"]],"text-field":["coalesce",["get","name_en"],["get","name"]]},"paint":{"icon-opacity":["step",["zoom"],["step",["get","sizerank"],0,5,1],17,["step",["get","sizerank"],0,13,1]],"text-halo-color":"hsl(0, 5%, 0%)","text-halo-width":0.5,"text-halo-blur":0.5,"text-color":["step",["zoom"],["step",["get","sizerank"],"hsl(0, 0%, 100%)",5,"hsl(0, 0%, 100%)"],17,["step",["get","sizerank"],"hsl(0, 0%, 100%)",13,"hsl(0, 0%, 100%)"]]}},{"id":"water-line-label","type":"symbol","metadata":{"mapbox:featureComponent":"natural-features","mapbox:group":"Natural features, natural-labels"},"source":"composite","source-layer":"natural_label","filter":["all",["match",["get","class"],["bay","ocean","reservoir","sea","water"],["match",["get","worldview"],["all","US"],true,false],["disputed_bay","disputed_ocean","disputed_reservoir","disputed_sea","disputed_water"],["all",["==",["get","disputed"],"true"],["match",["get","worldview"],["all","US"],true,false]],false],["==",["geometry-type"],"LineString"]],"layout":{"text-size":["interpolate",["linear"],["zoom"],7,["step",["get","sizerank"],20,6,18,12,12],10,["step",["get","sizerank"],15,9,12],18,["step",["get","sizerank"],15,9,14]],"text-max-angle":30,"text-letter-spacing":["match",["get","class"],"ocean",0.25,["sea","bay"],0.15,0],"text-font":["DIN Pro Italic","Arial Unicode MS Regular"],"symbol-placement":"line-center","text-pitch-alignment":"viewport","text-field":["coalesce",["get","name_en"],["get","name"]]},"paint":{"text-color":["match",["get","class"],["bay","ocean","sea"],"hsl(196, 46%, 70%)","hsl(196, 18%, 90%)"]}},{"id":"water-point-label","type":"symbol","metadata":{"mapbox:featureComponent":"natural-features","mapbox:group":"Natural features, natural-labels"},"source":"composite","source-layer":"natural_label","filter":["all",["match",["get","class"],["bay","ocean","reservoir","sea","water"],["match",["get","worldview"],["all","US"],true,false],["disputed_bay","disputed_ocean","disputed_reservoir","disputed_sea","disputed_water"],["all",["==",["get","disputed"],"true"],["match",["get","worldview"],["all","US"],true,false]],false],["==",["geometry-type"],"Point"]],"layout":{"text-line-height":1.3,"text-size":["interpolate",["linear"],["zoom"],7,["step",["get","sizerank"],20,6,15,12,12],10,["step",["get","sizerank"],15,9,12]],"text-font":["DIN Pro Italic","Arial Unicode MS Regular"],"text-field":["coalesce",["get","name_en"],["get","name"]],"text-letter-spacing":["match",["get","class"],"ocean",0.25,["bay","sea"],0.15,0.01],"text-max-width":["match",["get","class"],"ocean",4,"sea",5,["bay","water"],7,10]},"paint":{"text-color":["match",["get","class"],["bay","ocean","sea"],"hsl(196, 46%, 70%)","hsl(196, 18%, 90%)"]}},{"id":"poi-label","type":"symbol","metadata":{"mapbox:featureComponent":"point-of-interest-labels","mapbox:group":"Point of interest labels, poi-labels"},"source":"composite","source-layer":"poi_label","minzoom":6,"filter":["<=",["get","filterrank"],["+",["step",["zoom"],0,16,1,17,2],3]],"layout":{"text-size":["step",["zoom"],["step",["get","sizerank"],18,5,12],17,["step",["get","sizerank"],18,13,12]],"icon-image":["step",["zoom"],["case",["has","maki_beta"],["image",["concat",["get","maki_beta"],"-11"]],["image",["concat",["get","maki"],"-11"]]],15,["case",["has","maki_beta"],["image",["concat",["get","maki_beta"],"-15"]],["image",["concat",["get","maki"],"-15"]]]],"text-font":["DIN Pro Bold","Arial Unicode MS Bold"],"text-offset":["step",["zoom"],["step",["get","sizerank"],["literal",[0,0]],5,["literal",[0,0.75]]],17,["step",["get","sizerank"],["literal",[0,0]],13,["literal",[0,0.75]]]],"text-anchor":["step",["zoom"],["step",["get","sizerank"],"center",5,"top"],17,["step",["get","sizerank"],"center",13,"top"]],"text-field":["coalesce",["get","name_en"],["get","name"]]},"paint":{"icon-opacity":["step",["zoom"],["step",["get","sizerank"],0,5,1],17,["step",["get","sizerank"],0,13,1]],"text-halo-color":["match",["get","class"],"park_like","hsl(94, 100%, 0%)","medical","hsl(0, 5%, 3%)","hsl(0, 5%, 0%)"],"text-halo-width":0.5,"text-halo-blur":0.5,"text-color":["step",["zoom"],["step",["get","sizerank"],["match",["get","class"],"food_and_drink","hsl(356, 0%, 100%)","park_like","hsl(94, 100%, 84%)","hsl(0, 0%, 100%)"],5,["match",["get","class"],"food_and_drink","hsl(356, 0%, 100%)","park_like","hsl(94, 100%, 73%)","hsl(0, 0%, 100%)"]],17,["step",["get","sizerank"],["match",["get","class"],"food_and_drink","hsl(356, 0%, 100%)","park_like","hsl(94, 100%, 84%)","hsl(0, 0%, 100%)"],13,["match",["get","class"],"food_and_drink","hsl(356, 0%, 100%)","park_like","hsl(94, 100%, 73%)","hsl(0, 0%, 100%)"]]]}},{"id":"transit-label","type":"symbol","metadata":{"mapbox:featureComponent":"transit","mapbox:group":"Transit, transit-labels"},"source":"composite","source-layer":"transit_stop_label","minzoom":12,"filter":["step",["zoom"],["all",["match",["get","mode"],"rail",true,"metro_rail",true,false],["!=",["get","stop_type"],"entrance"]],15,["all",["match",["get","mode"],"rail",true,"metro_rail",true,"light_rail",true,false],["!=",["get","stop_type"],"entrance"]],16,["all",["match",["get","mode"],"ferry",false,"bus",false,true],["!=",["get","stop_type"],"entrance"]],17,["all",["match",["get","mode"],"ferry",false,true],["!=",["get","stop_type"],"entrance"]],19,["match",["get","mode"],"ferry",false,true]],"layout":{"text-size":12,"icon-image":["get","network"],"text-font":["DIN Pro Bold","Arial Unicode MS Bold"],"text-justify":["match",["get","stop_type"],"entrance","left","center"],"text-offset":["match",["get","stop_type"],"entrance",["literal",[1,0]],["literal",[0,0.8]]],"text-anchor":["match",["get","stop_type"],"entrance","left","top"],"text-field":["step",["zoom"],"",14,["match",["get","mode"],["rail","metro_rail"],["coalesce",["get","name_en"],["get","name"]],""],16,["match",["get","mode"],["bus","bicycle"],"",["coalesce",["get","name_en"],["get","name"]]],18,["coalesce",["get","name_en"],["get","name"]]],"text-letter-spacing":0.01,"text-max-width":["match",["get","stop_type"],"entrance",15,9]},"paint":{"text-halo-color":"hsl(0, 5%, 0%)","text-color":"hsl(0, 0%, 100%)","text-halo-blur":0.5,"text-halo-width":0.5}},{"id":"airport-label","type":"symbol","metadata":{"mapbox:featureComponent":"transit","mapbox:group":"Transit, transit-labels"},"source":"composite","source-layer":"airport_label","minzoom":8,"filter":["match",["get","class"],["military","civil"],["match",["get","worldview"],["all","US"],true,false],["disputed_military","disputed_civil"],["all",["==",["get","disputed"],"true"],["match",["get","worldview"],["all","US"],true,false]],false],"layout":{"text-line-height":1.1,"text-size":["step",["get","sizerank"],18,9,12],"icon-image":["step",["get","sizerank"],["concat",["get","maki"],"-15"],9,["concat",["get","maki"],"-11"]],"text-font":["DIN Pro Bold","Arial Unicode MS Bold"],"text-offset":[0,0.75],"text-rotation-alignment":"viewport","text-anchor":"top","text-field":["step",["get","sizerank"],["coalesce",["get","name_en"],["get","name"]],15,["get","ref"]],"text-letter-spacing":0.01,"text-max-width":9},"paint":{"text-color":"hsl(0, 0%, 100%)","text-halo-color":"hsl(0, 20%, 3%)","text-halo-width":1}},{"id":"settlement-subdivision-label","type":"symbol","metadata":{"mapbox:featureComponent":"place-labels","mapbox:group":"Place labels, place-labels"},"source":"composite","source-layer":"place_label","minzoom":10,"maxzoom":15,"filter":["all",["match",["get","class"],"settlement_subdivision",["match",["get","worldview"],["all","US"],true,false],"disputed_settlement_subdivision",["all",["==",["get","disputed"],"true"],["match",["get","worldview"],["all","US"],true,false]],false],["<=",["get","filterrank"],4]],"layout":{"text-field":["coalesce",["get","name_en"],["get","name"]],"text-transform":"uppercase","text-font":["DIN Pro Medium","Arial Unicode MS Regular"],"text-letter-spacing":["match",["get","type"],"suburb",0.15,0.1],"text-max-width":7,"text-padding":3,"text-size":["interpolate",["cubic-bezier",0.5,0,1,1],["zoom"],11,["match",["get","type"],"suburb",11,10.5],15,["match",["get","type"],"suburb",15,14]]},"paint":{"text-halo-color":"hsla(0, 5%, 0%, 0.75)","text-halo-width":1,"text-color":"hsl(0, 0%, 100%)","text-halo-blur":0.5}},{"id":"settlement-minor-label","type":"symbol","metadata":{"mapbox:featureComponent":"place-labels","mapbox:group":"Place labels, place-labels"},"source":"composite","source-layer":"place_label","maxzoom":15,"filter":["all",["<=",["get","filterrank"],3],["match",["get","class"],"settlement",["match",["get","worldview"],["all","US"],true,false],"disputed_settlement",["all",["==",["get","disputed"],"true"],["match",["get","worldview"],["all","US"],true,false]],false],["step",["zoom"],true,8,[">=",["get","symbolrank"],11],10,[">=",["get","symbolrank"],12],11,[">=",["get","symbolrank"],13],12,[">=",["get","symbolrank"],15],13,[">=",["get","symbolrank"],11],14,[">=",["get","symbolrank"],13]]],"layout":{"text-line-height":1.1,"text-size":["interpolate",["cubic-bezier",0.2,0,0.9,1],["zoom"],3,["step",["get","symbolrank"],12,9,11,10,10.5,12,9.5,14,8.5,16,6.5,17,4],13,["step",["get","symbolrank"],23,9,21,10,19,11,17,12,16,13,15,15,13]],"icon-image":["step",["zoom"],["case",["==",["get","capital"],2],"border-dot-13",["step",["get","symbolrank"],"dot-11",9,"dot-10",11,"dot-9"]],8,""],"text-font":["DIN Pro Medium","Arial Unicode MS Regular"],"text-justify":["step",["zoom"],["match",["get","text_anchor"],["left","bottom-left","top-left"],"left",["right","bottom-right","top-right"],"right","center"],8,"center"],"text-offset":["step",["zoom"],["match",["get","capital"],2,["match",["get","text_anchor"],"bottom",["literal",[0,-0.3]],"bottom-left",["literal",[0.3,-0.1]],"left",["literal",[0.45,0.1]],"top-left",["literal",[0.3,0.1]],"top",["literal",[0,0.3]],"top-right",["literal",[-0.3,0.1]],"right",["literal",[-0.45,0]],"bottom-right",["literal",[-0.3,-0.1]],["literal",[0,-0.3]]],["match",["get","text_anchor"],"bottom",["literal",[0,-0.25]],"bottom-left",["literal",[0.2,-0.05]],"left",["literal",[0.4,0.05]],"top-left",["literal",[0.2,0.05]],"top",["literal",[0,0.25]],"top-right",["literal",[-0.2,0.05]],"right",["literal",[-0.4,0.05]],"bottom-right",["literal",[-0.2,-0.05]],["literal",[0,-0.25]]]],8,["literal",[0,0]]],"text-anchor":["step",["zoom"],["get","text_anchor"],8,"center"],"text-field":["coalesce",["get","name_en"],["get","name"]],"text-max-width":7},"paint":{"text-color":"hsl(0, 0%, 95%)","text-halo-color":"hsl(0, 5%, 0%)","text-halo-width":1,"text-halo-blur":1}},{"id":"settlement-major-label","type":"symbol","metadata":{"mapbox:featureComponent":"place-labels","mapbox:group":"Place labels, place-labels"},"source":"composite","source-layer":"place_label","maxzoom":15,"filter":["all",["<=",["get","filterrank"],3],["match",["get","class"],"settlement",["match",["get","worldview"],["all","US"],true,false],"disputed_settlement",["all",["==",["get","disputed"],"true"],["match",["get","worldview"],["all","US"],true,false]],false],["step",["zoom"],false,8,["<",["get","symbolrank"],11],10,["<",["get","symbolrank"],12],11,["<",["get","symbolrank"],13],12,["<",["get","symbolrank"],15],13,[">=",["get","symbolrank"],11],14,[">=",["get","symbolrank"],13]]],"layout":{"text-line-height":1.1,"text-size":["interpolate",["cubic-bezier",0.2,0,0.9,1],["zoom"],8,["step",["get","symbolrank"],18,9,17,10,15],15,["step",["get","symbolrank"],23,9,22,10,20,11,18,12,16,13,15,15,13]],"icon-image":["step",["zoom"],["case",["==",["get","capital"],2],"border-dot-13",["step",["get","symbolrank"],"dot-11",9,"dot-10",11,"dot-9"]],8,""],"text-font":["DIN Pro Medium","Arial Unicode MS Regular"],"text-justify":["step",["zoom"],["match",["get","text_anchor"],["left","bottom-left","top-left"],"left",["right","bottom-right","top-right"],"right","center"],8,"center"],"text-offset":["step",["zoom"],["match",["get","capital"],2,["match",["get","text_anchor"],"bottom",["literal",[0,-0.3]],"bottom-left",["literal",[0.3,-0.1]],"left",["literal",[0.45,0.1]],"top-left",["literal",[0.3,0.1]],"top",["literal",[0,0.3]],"top-right",["literal",[-0.3,0.1]],"right",["literal",[-0.45,0]],"bottom-right",["literal",[-0.3,-0.1]],["literal",[0,-0.3]]],["match",["get","text_anchor"],"bottom",["literal",[0,-0.25]],"bottom-left",["literal",[0.2,-0.05]],"left",["literal",[0.4,0.05]],"top-left",["literal",[0.2,0.05]],"top",["literal",[0,0.25]],"top-right",["literal",[-0.2,0.05]],"right",["literal",[-0.4,0.05]],"bottom-right",["literal",[-0.2,-0.05]],["literal",[0,-0.25]]]],8,["literal",[0,0]]],"text-anchor":["step",["zoom"],["get","text_anchor"],8,"center"],"text-field":["coalesce",["get","name_en"],["get","name"]],"text-max-width":7},"paint":{"text-color":"hsl(0, 0%, 95%)","text-halo-color":"hsl(0, 5%, 0%)","text-halo-width":1,"text-halo-blur":1}},{"id":"state-label","type":"symbol","metadata":{"mapbox:featureComponent":"place-labels","mapbox:group":"Place labels, place-labels"},"source":"composite","source-layer":"place_label","minzoom":3,"maxzoom":9,"filter":["match",["get","class"],"state",["match",["get","worldview"],["all","US"],true,false],"disputed_state",["all",["==",["get","disputed"],"true"],["match",["get","worldview"],["all","US"],true,false]],false],"layout":{"text-size":["interpolate",["cubic-bezier",0.85,0.7,0.65,1],["zoom"],4,["step",["get","symbolrank"],10,6,9.5,7,9],9,["step",["get","symbolrank"],21,6,16,7,13]],"text-transform":"uppercase","text-font":["DIN Pro Bold","Arial Unicode MS Bold"],"text-field":["step",["zoom"],["step",["get","symbolrank"],["coalesce",["get","name_en"],["get","name"]],5,["coalesce",["get","abbr"],["get","name_en"],["get","name"]]],5,["coalesce",["get","name_en"],["get","name"]]],"text-letter-spacing":0.15,"text-max-width":6},"paint":{"text-color":"hsl(0, 0%, 95%)","text-halo-color":"hsl(0, 5%, 0%)","text-halo-width":1}},{"id":"country-label","type":"symbol","metadata":{"mapbox:featureComponent":"place-labels","mapbox:group":"Place labels, place-labels"},"source":"composite","source-layer":"place_label","minzoom":1,"maxzoom":10,"filter":["match",["get","class"],"country",["match",["get","worldview"],["all","US"],true,false],"disputed_country",["all",["==",["get","disputed"],"true"],["match",["get","worldview"],["all","US"],true,false]],false],"layout":{"text-line-height":1.1,"text-size":["interpolate",["cubic-bezier",0.2,0,0.7,1],["zoom"],1,["step",["get","symbolrank"],11,4,9,5,8],9,["step",["get","symbolrank"],22,4,19,5,17]],"icon-image":"","text-font":["DIN Pro Medium","Arial Unicode MS Regular"],"text-justify":["step",["zoom"],["match",["get","text_anchor"],["left","bottom-left","top-left"],"left",["right","bottom-right","top-right"],"right","center"],7,"center"],"text-offset":["literal",[0,0]],"text-field":["coalesce",["get","name_en"],["get","name"]],"text-max-width":6},"paint":{"icon-opacity":["step",["zoom"],["case",["has","text_anchor"],1,0],7,0],"text-color":"hsl(0, 0%, 95%)","text-halo-color":["interpolate",["linear"],["zoom"],2,"hsla(0, 5%, 0%, 0.75)",3,"hsl(0, 5%, 0%)"],"text-halo-width":1.25}}],"created":"2021-03-29T17:58:09.569Z","modified":"2021-03-29T17:58:21.965Z","id":"ckmuw9x2e5f0417pe3vy7y0cz","owner":"northarrowresearch","visibility":"private","draft":false}')},352:function(e){e.exports=JSON.parse('{"version":8,"name":"Basic","metadata":{"mapbox:type":"default","mapbox:origin":"basic-v1","mapbox:sdk-support":{"android":"9.3.0","ios":"5.10.0","js":"2.0.0"},"mapbox:autocomposite":true,"mapbox:groups":{"Land, water, & sky, land":{"name":"Land, water, & sky, land","collapsed":false},"Land, water, & sky, water":{"name":"Land, water, & sky, water","collapsed":false},"Land, water, & sky, built":{"name":"Land, water, & sky, built","collapsed":false},"Transit, built":{"name":"Transit, built","collapsed":false},"Buildings, built":{"name":"Buildings, built","collapsed":false},"Walking, cycling, etc., tunnels":{"name":"Walking, cycling, etc., tunnels","collapsed":false},"Road network, tunnels":{"name":"Road network, tunnels","collapsed":false},"Walking, cycling, etc., surface":{"name":"Walking, cycling, etc., surface","collapsed":false},"Road network, surface":{"name":"Road network, surface","collapsed":false},"Walking, cycling, etc., barriers-bridges":{"name":"Walking, cycling, etc., barriers-bridges","collapsed":false},"Road network, bridges":{"name":"Road network, bridges","collapsed":false},"Administrative boundaries, admin":{"name":"Administrative boundaries, admin","collapsed":false},"Road network, road-labels":{"name":"Road network, road-labels","collapsed":false},"Walking, cycling, etc., walking-cycling-labels":{"name":"Walking, cycling, etc., walking-cycling-labels","collapsed":false},"Natural features, natural-labels":{"name":"Natural features, natural-labels","collapsed":false},"Point of interest labels, poi-labels":{"name":"Point of interest labels, poi-labels","collapsed":false},"Transit, transit-labels":{"name":"Transit, transit-labels","collapsed":false},"Place labels, place-labels":{"name":"Place labels, place-labels","collapsed":false}},"mapbox:decompiler":{"id":"basic-v1","componentVersion":"9.0.0","strata":[{"id":"basic-v1","order":[["land-and-water","land"],["land-and-water","water"],["land-and-water","built"],["transit","built"],["buildings","built"],["road-network","tunnels-case"],["walking-cycling","tunnels"],["road-network","tunnels"],["transit","ferries"],["walking-cycling","surface"],["road-network","surface"],["transit","surface"],["road-network","surface-icons"],["walking-cycling","barriers-bridges"],["road-network","bridges"],["transit","bridges"],["road-network","traffic-and-closures"],["buildings","extruded"],["transit","elevated"],["admin-boundaries","admin"],["buildings","building-labels"],["road-network","road-labels"],["walking-cycling","walking-cycling-labels"],["transit","ferry-aerialway-labels"],["natural-features","natural-labels"],["point-of-interest-labels","poi-labels"],["transit","transit-labels"],["place-labels","place-labels"],["land-and-water","sky"]]}],"components":{"road-network":"9.0.0","natural-features":"9.0.0","place-labels":"9.0.0","admin-boundaries":"9.0.0","point-of-interest-labels":"9.0.0","walking-cycling":"9.0.0","transit":"9.0.0","land-and-water":"9.0.0","buildings":"9.0.0"},"propConfig":{"road-network":{"color-base":"hsl(40, 48%, 92%)","color-road":"hsl(38, 55%, 100%)","roadNetwork":"Simple"},"natural-features":{"color-base":"hsl(40, 48%, 92%)","color-water":"hsl(205, 76%, 70%)","color-poi":"hsl(26, 20%, 38%)"},"place-labels":{"color-base":"hsl(40, 48%, 92%)","color-place-label":"hsl(0, 0%, 15%)","settlementSubdivisionsDensity":3,"settlementLabelStyle":"Text only"},"admin-boundaries":{"color-base":"hsl(40, 48%, 92%)","color-place-label":"hsl(0, 0%, 15%)"},"point-of-interest-labels":{"color-base":"hsl(40, 48%, 92%)","color-greenspace":"hsl(78, 50%, 73%)","color-greenspace-label":"hsl(76, 50%, 16%)","color-hospital":"hsl(3, 45%, 55%)","color-school":"hsl(40, 45%, 45%)","color-poi":"hsl(26, 20%, 38%)","density":2},"walking-cycling":{"color-base":"hsl(40, 48%, 92%)","color-road":"hsl(38, 55%, 100%)","color-greenspace":"hsl(78, 50%, 73%)","color-greenspace-label":"hsl(76, 50%, 16%)","walkingCyclingPisteBackground":false,"golfHoleLabelLine":false,"pedestrianPolygonFeatures":false},"transit":{"color-airport":"hsl(225, 4%, 40%)","color-transit":"hsl(345, 6%, 40%)","aerialways":false,"color-road":"hsl(38, 55%, 100%)","color-water":"hsl(205, 76%, 70%)","transitLabels":false,"railways":false,"ferries":false,"color-base":"hsl(40, 48%, 92%)"},"land-and-water":{"color-airport":"hsl(225, 4%, 40%)","color-hospital":"hsl(3, 45%, 55%)","landType":"Landuse only","color-greenspace":"hsl(78, 50%, 73%)","color-water":"hsl(205, 76%, 70%)","transitionLandOnZoom":false,"waterStyle":"Simple","color-base":"hsl(40, 48%, 92%)","color-school":"hsl(40, 45%, 45%)"},"buildings":{"color-base":"hsl(40, 48%, 92%)","houseNumbers":false}}}},"center":[2.3176,48.8665],"zoom":12,"sources":{"mapbox://mapbox.mapbox-traffic-v1":{"url":"mapbox://mapbox.mapbox-traffic-v1","type":"vector"},"composite":{"url":"mapbox://mapbox.mapbox-streets-v8,mapbox.mapbox-terrain-v2","type":"vector"}},"sprite":"mapbox://sprites/northarrowresearch/ckmuv21s85dd317s3sii3rhg7/5aimie0s459ihq4jyhsfvi0wl","glyphs":"mapbox://fonts/northarrowresearch/{fontstack}/{range}.pbf","layers":[{"id":"land","type":"background","metadata":{"mapbox:featureComponent":"land-and-water","mapbox:group":"Land, water, & sky, land"},"layout":{},"paint":{"background-color":"hsl(40, 46%, 86%)"}},{"id":"national-park","type":"fill","metadata":{"mapbox:featureComponent":"land-and-water","mapbox:group":"Land, water, & sky, land"},"source":"composite","source-layer":"landuse_overlay","minzoom":5,"filter":["==",["get","class"],"national_park"],"layout":{},"paint":{"fill-color":"hsl(78, 50%, 73%)","fill-opacity":["interpolate",["linear"],["zoom"],5,0,6,0.5,10,0.5]}},{"id":"landuse","type":"fill","metadata":{"mapbox:featureComponent":"land-and-water","mapbox:group":"Land, water, & sky, land"},"source":"composite","source-layer":"landuse","minzoom":5,"filter":["match",["get","class"],["park","airport","glacier","pitch","sand","facility"],true,"cemetery",true,"school",true,"hospital",true,false],"layout":{},"paint":{"fill-color":["interpolate",["linear"],["zoom"],15,["match",["get","class"],"park","hsl(78, 50%, 73%)","airport","hsl(225, 49%, 88%)","cemetery","hsl(60, 49%, 79%)","glacier","hsl(205, 66%, 90%)","hospital","hsl(3, 47%, 84%)","pitch","hsl(78, 51%, 68%)","sand","hsl(43, 50%, 83%)","school","hsl(40, 47%, 78%)","hsl(40, 49%, 82%)"],16,["match",["get","class"],"park","hsl(78, 50%, 73%)","airport","hsl(225, 63%, 86%)","cemetery","hsl(60, 49%, 79%)","glacier","hsl(205, 66%, 90%)","hospital","hsl(3, 46%, 86%)","pitch","hsl(78, 51%, 68%)","sand","hsl(43, 50%, 83%)","school","hsl(40, 47%, 78%)","hsl(40, 49%, 82%)"]],"fill-opacity":["interpolate",["linear"],["zoom"],5,0,6,["match",["get","class"],"glacier",0.5,1]]}},{"id":"pitch-outline","type":"line","metadata":{"mapbox:featureComponent":"land-and-water","mapbox:group":"Land, water, & sky, land"},"source":"composite","source-layer":"landuse","minzoom":15,"filter":["==",["get","class"],"pitch"],"layout":{},"paint":{"line-color":"hsl(60, 29%, 81%)"}},{"id":"waterway","type":"line","metadata":{"mapbox:featureComponent":"land-and-water","mapbox:group":"Land, water, & sky, water"},"source":"composite","source-layer":"waterway","minzoom":8,"layout":{"line-cap":["step",["zoom"],"butt",11,"round"],"line-join":"round"},"paint":{"line-color":"hsl(205, 76%, 70%)","line-width":["interpolate",["exponential",1.3],["zoom"],9,["match",["get","class"],["canal","river"],0.1,0],20,["match",["get","class"],["canal","river"],8,3]],"line-opacity":["interpolate",["linear"],["zoom"],8,0,8.5,1]}},{"id":"water","type":"fill","metadata":{"mapbox:featureComponent":"land-and-water","mapbox:group":"Land, water, & sky, water"},"source":"composite","source-layer":"water","layout":{},"paint":{"fill-color":"hsl(205, 76%, 70%)"}},{"id":"land-structure-polygon","type":"fill","metadata":{"mapbox:featureComponent":"land-and-water","mapbox:group":"Land, water, & sky, built"},"source":"composite","source-layer":"structure","minzoom":13,"filter":["all",["==",["geometry-type"],"Polygon"],["==",["get","class"],"land"]],"layout":{},"paint":{"fill-color":"hsl(40, 46%, 86%)"}},{"id":"land-structure-line","type":"line","metadata":{"mapbox:featureComponent":"land-and-water","mapbox:group":"Land, water, & sky, built"},"source":"composite","source-layer":"structure","minzoom":13,"filter":["all",["==",["geometry-type"],"LineString"],["==",["get","class"],"land"]],"layout":{"line-cap":"round"},"paint":{"line-width":["interpolate",["exponential",1.99],["zoom"],14,0.75,20,40],"line-color":"hsl(40, 46%, 86%)"}},{"id":"aeroway-polygon","type":"fill","metadata":{"mapbox:featureComponent":"transit","mapbox:group":"Transit, built"},"source":"composite","source-layer":"aeroway","minzoom":11,"filter":["all",["==",["geometry-type"],"Polygon"],["match",["get","type"],["runway","taxiway","helipad"],true,false]],"layout":{},"paint":{"fill-color":["interpolate",["linear"],["zoom"],15,"hsl(225, 37%, 79%)",16,"hsl(225, 19%, 81%)"],"fill-opacity":["interpolate",["linear"],["zoom"],11,0,11.5,1]}},{"id":"aeroway-line","type":"line","metadata":{"mapbox:featureComponent":"transit","mapbox:group":"Transit, built"},"source":"composite","source-layer":"aeroway","minzoom":9,"filter":["==",["geometry-type"],"LineString"],"layout":{},"paint":{"line-color":["interpolate",["linear"],["zoom"],15,"hsl(225, 37%, 79%)",16,"hsl(225, 19%, 81%)"],"line-width":["interpolate",["exponential",1.5],["zoom"],9,["match",["get","type"],"runway",1,0.5],18,["match",["get","type"],"runway",80,20]]}},{"id":"building-outline","type":"line","metadata":{"mapbox:featureComponent":"buildings","mapbox:group":"Buildings, built"},"source":"composite","source-layer":"building","minzoom":15,"filter":["all",["!=",["get","type"],"building:part"],["==",["get","underground"],"false"]],"layout":{},"paint":{"line-color":"hsl(40, 42%, 77%)","line-width":["interpolate",["exponential",1.5],["zoom"],15,0.75,20,3],"line-opacity":["interpolate",["linear"],["zoom"],15,0,16,1]}},{"id":"building","type":"fill","metadata":{"mapbox:featureComponent":"buildings","mapbox:group":"Buildings, built"},"source":"composite","source-layer":"building","minzoom":15,"filter":["all",["!=",["get","type"],"building:part"],["==",["get","underground"],"false"]],"layout":{},"paint":{"fill-color":["interpolate",["linear"],["zoom"],15,"hsl(40, 45%, 83%)",16,"hsl(40, 41%, 82%)"],"fill-opacity":["interpolate",["linear"],["zoom"],15,0,16,1],"fill-outline-color":"hsl(40, 42%, 77%)"}},{"id":"tunnel-path","type":"line","metadata":{"mapbox:featureComponent":"walking-cycling","mapbox:group":"Walking, cycling, etc., tunnels"},"source":"composite","source-layer":"road","minzoom":14,"filter":["all",["==",["get","structure"],"tunnel"],["==",["get","class"],"path"],["!=",["get","type"],"steps"],["==",["geometry-type"],"LineString"]],"layout":{},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],15,1,18,4],"line-color":"hsl(40, 42%, 77%)","line-dasharray":["step",["zoom"],["literal",[1,0]],15,["literal",[1.75,1]],16,["literal",[1,0.75]],17,["literal",[1,0.5]]]}},{"id":"tunnel-steps","type":"line","metadata":{"mapbox:featureComponent":"walking-cycling","mapbox:group":"Walking, cycling, etc., tunnels"},"source":"composite","source-layer":"road","minzoom":14,"filter":["all",["==",["get","structure"],"tunnel"],["==",["get","type"],"steps"],["==",["geometry-type"],"LineString"]],"layout":{},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],15,1,16,1.6,18,6],"line-color":"hsl(40, 42%, 77%)","line-dasharray":["step",["zoom"],["literal",[1,0]],15,["literal",[1.75,1]],16,["literal",[1,0.75]],17,["literal",[0.3,0.3]]]}},{"id":"tunnel-pedestrian","type":"line","metadata":{"mapbox:featureComponent":"walking-cycling","mapbox:group":"Walking, cycling, etc., tunnels"},"source":"composite","source-layer":"road","minzoom":13,"filter":["all",["==",["get","structure"],"tunnel"],["==",["get","class"],"pedestrian"],["==",["geometry-type"],"LineString"]],"layout":{},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],14,0.5,18,12],"line-color":"hsl(40, 42%, 77%)","line-dasharray":["step",["zoom"],["literal",[1,0]],15,["literal",[1.5,0.4]],16,["literal",[1,0.2]]]}},{"id":"tunnel-simple","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, tunnels"},"source":"composite","source-layer":"road","minzoom":13,"filter":["all",["==",["get","structure"],"tunnel"],["step",["zoom"],["match",["get","class"],["motorway","motorway_link","trunk","trunk_link","primary","secondary","tertiary","street","street_limited","primary_link","track"],true,false],14,["match",["get","class"],["motorway","motorway_link","trunk","trunk_link","primary","primary_link","secondary","secondary_link","tertiary","tertiary_link","street","street_limited","service","track"],true,false]],["==",["geometry-type"],"LineString"]],"layout":{},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],13,["match",["get","class"],["motorway","trunk","primary"],4,["secondary","tertiary"],2.5,["motorway_link","trunk_link","street","street_limited","primary_link"],1,0.5],18,["match",["get","class"],["motorway","trunk","primary"],32,["secondary","tertiary"],26,["motorway_link","trunk_link","street","street_limited","primary_link"],18,12]],"line-color":"hsl(38, 55%, 93%)"}},{"id":"road-path","type":"line","metadata":{"mapbox:featureComponent":"walking-cycling","mapbox:group":"Walking, cycling, etc., surface"},"source":"composite","source-layer":"road","minzoom":12,"filter":["all",["==",["get","class"],"path"],["step",["zoom"],["!",["match",["get","type"],["steps","sidewalk","crossing"],true,false]],16,["!=",["get","type"],"steps"]],["match",["get","structure"],["none","ford"],true,false],["==",["geometry-type"],"LineString"]],"layout":{"line-join":["step",["zoom"],"miter",14,"round"]},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],13,0.5,14,1,15,1,18,4],"line-color":"hsl(40, 47%, 96%)","line-dasharray":["step",["zoom"],["literal",[4,0.3]],15,["literal",[1.75,0.3]],16,["literal",[1,0.3]],17,["literal",[1,0.25]]]}},{"id":"road-steps","type":"line","metadata":{"mapbox:featureComponent":"walking-cycling","mapbox:group":"Walking, cycling, etc., surface"},"source":"composite","source-layer":"road","minzoom":14,"filter":["all",["==",["get","type"],"steps"],["match",["get","structure"],["none","ford"],true,false],["==",["geometry-type"],"LineString"]],"layout":{"line-join":"round"},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],15,1,16,1.6,18,6],"line-color":"hsl(40, 47%, 96%)","line-dasharray":["step",["zoom"],["literal",[1,0]],15,["literal",[1.75,1]],16,["literal",[1,0.75]],17,["literal",[0.3,0.3]]]}},{"id":"road-pedestrian","type":"line","metadata":{"mapbox:featureComponent":"walking-cycling","mapbox:group":"Walking, cycling, etc., surface"},"source":"composite","source-layer":"road","minzoom":12,"filter":["all",["==",["get","class"],"pedestrian"],["match",["get","structure"],["none","ford"],true,false],["==",["geometry-type"],"LineString"]],"layout":{"line-join":["step",["zoom"],"miter",14,"round"]},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],14,0.5,18,12],"line-color":"hsl(40, 47%, 96%)","line-dasharray":["step",["zoom"],["literal",[1,0]],15,["literal",[1.5,0.4]],16,["literal",[1,0.2]]]}},{"id":"road-simple","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, surface"},"source":"composite","source-layer":"road","minzoom":5,"filter":["all",["step",["zoom"],["match",["get","class"],["motorway","trunk"],true,false],6,["match",["get","class"],["motorway","trunk","primary"],true,false],8,["match",["get","class"],["motorway","trunk","primary","secondary"],true,false],10,["match",["get","class"],["motorway","trunk","primary","secondary","tertiary","motorway_link","trunk_link"],true,false],11,["match",["get","class"],["motorway","motorway_link","trunk","trunk_link","primary","secondary","tertiary","street"],true,false],12,["match",["get","class"],["motorway","motorway_link","trunk","trunk_link","primary","secondary","tertiary","street","street_limited","primary_link"],true,false],13,["match",["get","class"],["motorway","motorway_link","trunk","trunk_link","primary","secondary","tertiary","street","street_limited","primary_link","track"],true,false],14,["match",["get","class"],["motorway","motorway_link","trunk","trunk_link","primary","primary_link","secondary","secondary_link","tertiary","tertiary_link","street","street_limited","service","track"],true,false]],["match",["get","structure"],["none","ford"],true,false],["==",["geometry-type"],"LineString"]],"layout":{"line-cap":["step",["zoom"],"butt",14,"round"],"line-join":["step",["zoom"],"miter",14,"round"]},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],5,["match",["get","class"],["motorway","trunk","primary"],0.75,["secondary","tertiary"],0.1,0],13,["match",["get","class"],["motorway","trunk","primary"],4,["secondary","tertiary"],2.5,["motorway_link","trunk_link","primary_link","street","street_limited"],1,0.5],18,["match",["get","class"],["motorway","trunk","primary"],32,["secondary","tertiary"],26,["motorway_link","trunk_link","primary_link","street","street_limited"],18,10]],"line-color":["match",["get","class"],["primary_link","secondary_link","tertiary_link","street","street_limited","service","track"],"hsl(38, 55%, 95%)","hsl(38, 55%, 100%)"]}},{"id":"bridge-path","type":"line","metadata":{"mapbox:featureComponent":"walking-cycling","mapbox:group":"Walking, cycling, etc., barriers-bridges"},"source":"composite","source-layer":"road","minzoom":14,"filter":["all",["==",["get","structure"],"bridge"],["==",["get","class"],"path"],["==",["geometry-type"],"LineString"],["!=",["get","type"],"steps"]],"layout":{"line-join":"round"},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],15,1,18,4],"line-color":"hsl(40, 47%, 96%)","line-dasharray":["step",["zoom"],["literal",[4,0.3]],15,["literal",[1.75,0.3]],16,["literal",[1,0.3]],17,["literal",[1,0.25]]]}},{"id":"bridge-steps","type":"line","metadata":{"mapbox:featureComponent":"walking-cycling","mapbox:group":"Walking, cycling, etc., barriers-bridges"},"source":"composite","source-layer":"road","minzoom":14,"filter":["all",["==",["get","type"],"steps"],["==",["get","structure"],"bridge"],["==",["geometry-type"],"LineString"]],"layout":{"line-join":"round"},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],15,1,16,1.6,18,6],"line-color":"hsl(40, 47%, 96%)","line-dasharray":["step",["zoom"],["literal",[1,0]],15,["literal",[1.75,1]],16,["literal",[1,0.75]],17,["literal",[0.3,0.3]]]}},{"id":"bridge-pedestrian","type":"line","metadata":{"mapbox:featureComponent":"walking-cycling","mapbox:group":"Walking, cycling, etc., barriers-bridges"},"source":"composite","source-layer":"road","minzoom":13,"filter":["all",["==",["get","structure"],"bridge"],["==",["get","class"],"pedestrian"],["==",["geometry-type"],"LineString"]],"layout":{"line-join":"round"},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],14,0.5,18,12],"line-color":"hsl(40, 47%, 96%)","line-dasharray":["step",["zoom"],["literal",[1,0]],15,["literal",[1.5,0.4]],16,["literal",[1,0.2]]]}},{"id":"bridge-case-simple","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, bridges"},"source":"composite","source-layer":"road","minzoom":13,"filter":["all",["==",["get","structure"],"bridge"],["step",["zoom"],["match",["get","class"],["motorway","motorway_link","trunk","trunk_link","primary","secondary","tertiary","street","street_limited","primary_link","track"],true,false],14,["match",["get","class"],["motorway","motorway_link","trunk","trunk_link","primary","primary_link","secondary","secondary_link","tertiary","tertiary_link","street","street_limited","service","track"],true,false]],["==",["geometry-type"],"LineString"]],"layout":{"line-join":["step",["zoom"],"miter",14,"round"]},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],13,["match",["get","class"],["motorway","trunk","primary"],6,["secondary","tertiary"],4,["motorway_link","trunk_link","street","street_limited","primary_link"],2.5,1.25],18,["match",["get","class"],["motorway","trunk","primary"],36,["secondary","tertiary"],30,["motorway_link","trunk_link","street","street_limited","primary_link"],22,16]],"line-color":"hsl(40, 46%, 86%)"}},{"id":"bridge-simple","type":"line","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, bridges"},"source":"composite","source-layer":"road","minzoom":13,"filter":["all",["==",["get","structure"],"bridge"],["step",["zoom"],["match",["get","class"],["motorway","trunk"],true,false],13,["match",["get","class"],["motorway","motorway_link","trunk","trunk_link","primary","secondary","tertiary","street","street_limited","primary_link","track"],true,false],14,["match",["get","class"],["motorway","motorway_link","trunk","trunk_link","primary","primary_link","secondary","secondary_link","tertiary","tertiary_link","street","street_limited","service","track"],true,false]],["==",["geometry-type"],"LineString"]],"layout":{"line-cap":["step",["zoom"],"butt",14,"round"],"line-join":["step",["zoom"],"miter",14,"round"]},"paint":{"line-width":["interpolate",["exponential",1.5],["zoom"],13,["match",["get","class"],["motorway","trunk","primary"],4,["secondary","tertiary"],2.5,["motorway_link","trunk_link","street","street_limited","primary_link"],1,0.5],18,["match",["get","class"],["motorway","trunk","primary"],32,["secondary","tertiary"],26,["motorway_link","trunk_link","street","street_limited","primary_link"],18,12]],"line-color":["match",["get","class"],["primary_link","secondary_link","tertiary_link","street","street_limited","service","track"],"hsl(38, 55%, 95%)","hsl(38, 55%, 100%)"]}},{"id":"admin-1-boundary-bg","type":"line","metadata":{"mapbox:featureComponent":"admin-boundaries","mapbox:group":"Administrative boundaries, admin"},"source":"composite","source-layer":"admin","minzoom":7,"filter":["all",["==",["get","admin_level"],1],["==",["get","maritime"],"false"],["match",["get","worldview"],["all","US"],true,false]],"layout":{"line-join":"bevel"},"paint":{"line-color":["interpolate",["linear"],["zoom"],8,"hsl(40, 46%, 86%)",16,"hsl(0, 0%, 87%)"],"line-width":["interpolate",["linear"],["zoom"],7,3.75,12,5.5],"line-opacity":["interpolate",["linear"],["zoom"],7,0,8,0.75],"line-dasharray":[1,0],"line-blur":["interpolate",["linear"],["zoom"],3,0,8,3]}},{"id":"admin-0-boundary-bg","type":"line","metadata":{"mapbox:featureComponent":"admin-boundaries","mapbox:group":"Administrative boundaries, admin"},"source":"composite","source-layer":"admin","minzoom":1,"filter":["all",["==",["get","admin_level"],0],["==",["get","maritime"],"false"],["match",["get","worldview"],["all","US"],true,false]],"layout":{},"paint":{"line-width":["interpolate",["linear"],["zoom"],3,3.5,10,8],"line-color":["interpolate",["linear"],["zoom"],6,"hsl(40, 46%, 86%)",8,"hsl(0, 0%, 87%)"],"line-opacity":["interpolate",["linear"],["zoom"],3,0,4,0.5],"line-blur":["interpolate",["linear"],["zoom"],3,0,10,2]}},{"id":"admin-1-boundary","type":"line","metadata":{"mapbox:featureComponent":"admin-boundaries","mapbox:group":"Administrative boundaries, admin"},"source":"composite","source-layer":"admin","minzoom":2,"filter":["all",["==",["get","admin_level"],1],["==",["get","maritime"],"false"],["match",["get","worldview"],["all","US"],true,false]],"layout":{"line-join":"round","line-cap":"round"},"paint":{"line-dasharray":["step",["zoom"],["literal",[2,0]],7,["literal",[2,2,6,2]]],"line-width":["interpolate",["linear"],["zoom"],7,0.75,12,1.5],"line-opacity":["interpolate",["linear"],["zoom"],2,0,3,1],"line-color":["interpolate",["linear"],["zoom"],3,"hsl(0, 0%, 77%)",7,"hsl(0, 0%, 62%)"]}},{"id":"admin-0-boundary","type":"line","metadata":{"mapbox:featureComponent":"admin-boundaries","mapbox:group":"Administrative boundaries, admin"},"source":"composite","source-layer":"admin","minzoom":1,"filter":["all",["==",["get","admin_level"],0],["==",["get","disputed"],"false"],["==",["get","maritime"],"false"],["match",["get","worldview"],["all","US"],true,false]],"layout":{"line-join":"round","line-cap":"round"},"paint":{"line-color":"hsl(0, 0%, 51%)","line-width":["interpolate",["linear"],["zoom"],3,0.5,10,2],"line-dasharray":[10,0]}},{"id":"admin-0-boundary-disputed","type":"line","metadata":{"mapbox:featureComponent":"admin-boundaries","mapbox:group":"Administrative boundaries, admin"},"source":"composite","source-layer":"admin","minzoom":1,"filter":["all",["==",["get","disputed"],"true"],["==",["get","admin_level"],0],["==",["get","maritime"],"false"],["match",["get","worldview"],["all","US"],true,false]],"layout":{"line-join":"round"},"paint":{"line-color":"hsl(0, 0%, 51%)","line-width":["interpolate",["linear"],["zoom"],3,0.5,10,2],"line-dasharray":["step",["zoom"],["literal",[3.25,3.25]],6,["literal",[2.5,2.5]],7,["literal",[2,2.25]],8,["literal",[1.75,2]]]}},{"id":"road-label-simple","type":"symbol","metadata":{"mapbox:featureComponent":"road-network","mapbox:group":"Road network, road-labels"},"source":"composite","source-layer":"road","minzoom":12,"filter":["match",["get","class"],["motorway","trunk","primary","secondary","tertiary","street","street_limited"],true,false],"layout":{"text-size":["interpolate",["linear"],["zoom"],10,["match",["get","class"],["motorway","trunk","primary","secondary","tertiary"],10,9],18,["match",["get","class"],["motorway","trunk","primary","secondary","tertiary"],16,14]],"text-max-angle":30,"text-font":["DIN Pro Regular","Arial Unicode MS Regular"],"symbol-placement":"line","text-padding":1,"text-rotation-alignment":"map","text-pitch-alignment":"viewport","text-field":["coalesce",["get","name_en"],["get","name"]],"text-letter-spacing":0.01},"paint":{"text-color":"hsl(40, 47%, 41%)","text-halo-color":"hsl(38, 55%, 100%)","text-halo-width":1}},{"id":"path-pedestrian-label","type":"symbol","metadata":{"mapbox:featureComponent":"walking-cycling","mapbox:group":"Walking, cycling, etc., walking-cycling-labels"},"source":"composite","source-layer":"road","minzoom":12,"filter":["step",["zoom"],["match",["get","class"],["pedestrian"],true,false],15,["match",["get","class"],["path","pedestrian"],true,false]],"layout":{"text-size":["interpolate",["linear"],["zoom"],10,["match",["get","class"],"pedestrian",9,6.5],18,["match",["get","class"],"pedestrian",14,13]],"text-max-angle":30,"text-font":["DIN Pro Regular","Arial Unicode MS Regular"],"symbol-placement":"line","text-padding":1,"text-rotation-alignment":"map","text-pitch-alignment":"viewport","text-field":["coalesce",["get","name_en"],["get","name"]],"text-letter-spacing":0.01},"paint":{"text-color":"hsl(40, 47%, 41%)","text-halo-color":"hsl(40, 46%, 95%)","text-halo-width":1,"text-halo-blur":1}},{"id":"waterway-label","type":"symbol","metadata":{"mapbox:featureComponent":"natural-features","mapbox:group":"Natural features, natural-labels"},"source":"composite","source-layer":"natural_label","minzoom":13,"filter":["all",["match",["get","class"],["canal","river","stream"],["match",["get","worldview"],["all","US"],true,false],["disputed_canal","disputed_river","disputed_stream"],["all",["==",["get","disputed"],"true"],["match",["get","worldview"],["all","US"],true,false]],false],["==",["geometry-type"],"LineString"]],"layout":{"text-font":["DIN Pro Italic","Arial Unicode MS Regular"],"text-max-angle":30,"symbol-spacing":["interpolate",["linear",1],["zoom"],15,250,17,400],"text-size":["interpolate",["linear"],["zoom"],13,12,18,16],"symbol-placement":"line","text-pitch-alignment":"viewport","text-field":["coalesce",["get","name_en"],["get","name"]]},"paint":{"text-color":"hsl(205, 44%, 90%)"}},{"id":"natural-line-label","type":"symbol","metadata":{"mapbox:featureComponent":"natural-features","mapbox:group":"Natural features, natural-labels"},"source":"composite","source-layer":"natural_label","minzoom":4,"filter":["all",["match",["get","class"],["glacier","landform"],["match",["get","worldview"],["all","US"],true,false],["disputed_glacier","disputed_landform"],["all",["==",["get","disputed"],"true"],["match",["get","worldview"],["all","US"],true,false]],false],["==",["geometry-type"],"LineString"],["<=",["get","filterrank"],2]],"layout":{"text-size":["step",["zoom"],["step",["get","sizerank"],18,5,12],17,["step",["get","sizerank"],18,13,12]],"text-max-angle":30,"text-field":["coalesce",["get","name_en"],["get","name"]],"text-font":["DIN Pro Medium","Arial Unicode MS Regular"],"symbol-placement":"line-center","text-pitch-alignment":"viewport"},"paint":{"text-halo-width":0.5,"text-halo-color":"hsl(40, 53%, 100%)","text-halo-blur":0.5,"text-color":["step",["zoom"],["step",["get","sizerank"],"hsl(26, 15%, 48%)",5,"hsl(26, 20%, 38%)"],17,["step",["get","sizerank"],"hsl(26, 15%, 48%)",13,"hsl(26, 20%, 38%)"]]}},{"id":"natural-point-label","type":"symbol","metadata":{"mapbox:featureComponent":"natural-features","mapbox:group":"Natural features, natural-labels"},"source":"composite","source-layer":"natural_label","minzoom":4,"filter":["all",["match",["get","class"],["dock","glacier","landform","water_feature","wetland"],["match",["get","worldview"],["all","US"],true,false],["disputed_dock","disputed_glacier","disputed_landform","disputed_water_feature","disputed_wetland"],["all",["==",["get","disputed"],"true"],["match",["get","worldview"],["all","US"],true,false]],false],["==",["geometry-type"],"Point"],["<=",["get","filterrank"],2]],"layout":{"text-size":["step",["zoom"],["step",["get","sizerank"],18,5,12],17,["step",["get","sizerank"],18,13,12]],"icon-image":["step",["zoom"],["concat",["get","maki"],"-11"],15,["concat",["get","maki"],"-15"]],"text-font":["DIN Pro Medium","Arial Unicode MS Regular"],"text-offset":["step",["zoom"],["step",["get","sizerank"],["literal",[0,0]],5,["literal",[0,0.75]]],17,["step",["get","sizerank"],["literal",[0,0]],13,["literal",[0,0.75]]]],"text-anchor":["step",["zoom"],["step",["get","sizerank"],"center",5,"top"],17,["step",["get","sizerank"],"center",13,"top"]],"text-field":["coalesce",["get","name_en"],["get","name"]]},"paint":{"icon-opacity":["step",["zoom"],["step",["get","sizerank"],0,5,1],17,["step",["get","sizerank"],0,13,1]],"text-halo-color":"hsl(40, 53%, 100%)","text-halo-width":0.5,"text-halo-blur":0.5,"text-color":["step",["zoom"],["step",["get","sizerank"],"hsl(26, 15%, 48%)",5,"hsl(26, 20%, 38%)"],17,["step",["get","sizerank"],"hsl(26, 15%, 48%)",13,"hsl(26, 20%, 38%)"]]}},{"id":"water-line-label","type":"symbol","metadata":{"mapbox:featureComponent":"natural-features","mapbox:group":"Natural features, natural-labels"},"source":"composite","source-layer":"natural_label","filter":["all",["match",["get","class"],["bay","ocean","reservoir","sea","water"],["match",["get","worldview"],["all","US"],true,false],["disputed_bay","disputed_ocean","disputed_reservoir","disputed_sea","disputed_water"],["all",["==",["get","disputed"],"true"],["match",["get","worldview"],["all","US"],true,false]],false],["==",["geometry-type"],"LineString"]],"layout":{"text-size":["interpolate",["linear"],["zoom"],7,["step",["get","sizerank"],20,6,18,12,12],10,["step",["get","sizerank"],15,9,12],18,["step",["get","sizerank"],15,9,14]],"text-max-angle":30,"text-letter-spacing":["match",["get","class"],"ocean",0.25,["sea","bay"],0.15,0],"text-font":["DIN Pro Italic","Arial Unicode MS Regular"],"symbol-placement":"line-center","text-pitch-alignment":"viewport","text-field":["coalesce",["get","name_en"],["get","name"]]},"paint":{"text-color":["match",["get","class"],["bay","ocean","sea"],"hsl(205, 72%, 90%)","hsl(205, 44%, 90%)"]}},{"id":"water-point-label","type":"symbol","metadata":{"mapbox:featureComponent":"natural-features","mapbox:group":"Natural features, natural-labels"},"source":"composite","source-layer":"natural_label","filter":["all",["match",["get","class"],["bay","ocean","reservoir","sea","water"],["match",["get","worldview"],["all","US"],true,false],["disputed_bay","disputed_ocean","disputed_reservoir","disputed_sea","disputed_water"],["all",["==",["get","disputed"],"true"],["match",["get","worldview"],["all","US"],true,false]],false],["==",["geometry-type"],"Point"]],"layout":{"text-line-height":1.3,"text-size":["interpolate",["linear"],["zoom"],7,["step",["get","sizerank"],20,6,15,12,12],10,["step",["get","sizerank"],15,9,12]],"text-font":["DIN Pro Italic","Arial Unicode MS Regular"],"text-field":["coalesce",["get","name_en"],["get","name"]],"text-letter-spacing":["match",["get","class"],"ocean",0.25,["bay","sea"],0.15,0.01],"text-max-width":["match",["get","class"],"ocean",4,"sea",5,["bay","water"],7,10]},"paint":{"text-color":["match",["get","class"],["bay","ocean","sea"],"hsl(205, 72%, 90%)","hsl(205, 44%, 90%)"]}},{"id":"poi-label","type":"symbol","metadata":{"mapbox:featureComponent":"point-of-interest-labels","mapbox:group":"Point of interest labels, poi-labels"},"source":"composite","source-layer":"poi_label","minzoom":6,"filter":["<=",["get","filterrank"],["+",["step",["zoom"],0,16,1,17,2],2]],"layout":{"text-size":["step",["zoom"],["step",["get","sizerank"],18,5,12],17,["step",["get","sizerank"],18,13,12]],"icon-image":["step",["zoom"],["case",["has","maki_beta"],["image",["concat",["get","maki_beta"],"-11"]],["image",["concat",["get","maki"],"-11"]]],15,["case",["has","maki_beta"],["image",["concat",["get","maki_beta"],"-15"]],["image",["concat",["get","maki"],"-15"]]]],"text-font":["DIN Pro Medium","Arial Unicode MS Regular"],"text-offset":["step",["zoom"],["step",["get","sizerank"],["literal",[0,0]],5,["literal",[0,0.75]]],17,["step",["get","sizerank"],["literal",[0,0]],13,["literal",[0,0.75]]]],"text-anchor":["step",["zoom"],["step",["get","sizerank"],"center",5,"top"],17,["step",["get","sizerank"],"center",13,"top"]],"text-field":["coalesce",["get","name_en"],["get","name"]]},"paint":{"icon-opacity":["step",["zoom"],["step",["get","sizerank"],0,5,1],17,["step",["get","sizerank"],0,13,1]],"text-halo-color":["match",["get","class"],"park_like","hsl(78, 55%, 100%)","education","hsl(40, 52%, 100%)","medical","hsl(3, 51%, 100%)","hsl(40, 53%, 100%)"],"text-halo-width":0.5,"text-halo-blur":0.5,"text-color":["step",["zoom"],["step",["get","sizerank"],["match",["get","class"],"food_and_drink","hsl(22, 44%, 61%)","park_like","hsl(76, 51%, 26%)","education","hsl(40, 18%, 45%)","medical","hsl(3, 18%, 55%)","hsl(26, 15%, 48%)"],5,["match",["get","class"],"food_and_drink","hsl(22, 68%, 44%)","park_like","hsl(76, 50%, 15%)","education","hsl(40, 45%, 25%)","medical","hsl(3, 24%, 45%)","hsl(26, 20%, 38%)"]],17,["step",["get","sizerank"],["match",["get","class"],"food_and_drink","hsl(22, 44%, 61%)","park_like","hsl(76, 51%, 26%)","education","hsl(40, 18%, 45%)","medical","hsl(3, 18%, 55%)","hsl(26, 15%, 48%)"],13,["match",["get","class"],"food_and_drink","hsl(22, 68%, 44%)","park_like","hsl(76, 50%, 15%)","education","hsl(40, 45%, 25%)","medical","hsl(3, 24%, 45%)","hsl(26, 20%, 38%)"]]]}},{"id":"airport-label","type":"symbol","metadata":{"mapbox:featureComponent":"transit","mapbox:group":"Transit, transit-labels"},"source":"composite","source-layer":"airport_label","minzoom":8,"filter":["match",["get","class"],["military","civil"],["match",["get","worldview"],["all","US"],true,false],["disputed_military","disputed_civil"],["all",["==",["get","disputed"],"true"],["match",["get","worldview"],["all","US"],true,false]],false],"layout":{"text-line-height":1.1,"text-size":["step",["get","sizerank"],18,9,12],"icon-image":["step",["get","sizerank"],["concat",["get","maki"],"-15"],9,["concat",["get","maki"],"-11"]],"text-font":["DIN Pro Medium","Arial Unicode MS Regular"],"text-offset":[0,0.75],"text-rotation-alignment":"viewport","text-anchor":"top","text-field":["step",["get","sizerank"],["coalesce",["get","name_en"],["get","name"]],15,["get","ref"]],"text-letter-spacing":0.01,"text-max-width":9},"paint":{"text-color":"hsl(225, 4%, 40%)","text-halo-color":"hsl(225, 68%, 100%)","text-halo-width":1}},{"id":"settlement-subdivision-label","type":"symbol","metadata":{"mapbox:featureComponent":"place-labels","mapbox:group":"Place labels, place-labels"},"source":"composite","source-layer":"place_label","minzoom":10,"maxzoom":15,"filter":["all",["match",["get","class"],"settlement_subdivision",["match",["get","worldview"],["all","US"],true,false],"disputed_settlement_subdivision",["all",["==",["get","disputed"],"true"],["match",["get","worldview"],["all","US"],true,false]],false],["<=",["get","filterrank"],3]],"layout":{"text-field":["coalesce",["get","name_en"],["get","name"]],"text-transform":"uppercase","text-font":["DIN Pro Regular","Arial Unicode MS Regular"],"text-letter-spacing":["match",["get","type"],"suburb",0.15,0.1],"text-max-width":7,"text-padding":3,"text-size":["interpolate",["cubic-bezier",0.5,0,1,1],["zoom"],11,["match",["get","type"],"suburb",11,10.5],15,["match",["get","type"],"suburb",15,14]]},"paint":{"text-halo-color":"hsla(40, 53%, 100%, 0.75)","text-halo-width":1,"text-color":"hsl(0, 0%, 27%)","text-halo-blur":0.5}},{"id":"settlement-minor-label","type":"symbol","metadata":{"mapbox:featureComponent":"place-labels","mapbox:group":"Place labels, place-labels"},"source":"composite","source-layer":"place_label","maxzoom":15,"filter":["all",["<=",["get","filterrank"],3],["match",["get","class"],"settlement",["match",["get","worldview"],["all","US"],true,false],"disputed_settlement",["all",["==",["get","disputed"],"true"],["match",["get","worldview"],["all","US"],true,false]],false],["step",["zoom"],true,8,[">=",["get","symbolrank"],11],10,[">=",["get","symbolrank"],12],11,[">=",["get","symbolrank"],13],12,[">=",["get","symbolrank"],15],13,[">=",["get","symbolrank"],11],14,[">=",["get","symbolrank"],13]]],"layout":{"text-line-height":1.1,"text-size":["interpolate",["cubic-bezier",0.2,0,0.9,1],["zoom"],3,["step",["get","symbolrank"],12,9,11,10,10.5,12,9.5,14,8.5,16,6.5,17,4],13,["step",["get","symbolrank"],23,9,21,10,19,11,17,12,16,13,15,15,13]],"icon-image":"","text-font":["DIN Pro Regular","Arial Unicode MS Regular"],"text-offset":["step",["zoom"],["literal",[0,0]],8,["literal",[0,0]]],"text-anchor":["step",["zoom"],"center",8,"center"],"text-field":["coalesce",["get","name_en"],["get","name"]],"text-max-width":7},"paint":{"text-color":"hsl(0, 0%, 0%)","text-halo-color":"hsl(40, 53%, 100%)","text-halo-width":1,"icon-opacity":["step",["zoom"],1,8,0],"text-halo-blur":1}},{"id":"settlement-major-label","type":"symbol","metadata":{"mapbox:featureComponent":"place-labels","mapbox:group":"Place labels, place-labels"},"source":"composite","source-layer":"place_label","maxzoom":15,"filter":["all",["<=",["get","filterrank"],3],["match",["get","class"],"settlement",["match",["get","worldview"],["all","US"],true,false],"disputed_settlement",["all",["==",["get","disputed"],"true"],["match",["get","worldview"],["all","US"],true,false]],false],["step",["zoom"],false,8,["<",["get","symbolrank"],11],10,["<",["get","symbolrank"],12],11,["<",["get","symbolrank"],13],12,["<",["get","symbolrank"],15],13,[">=",["get","symbolrank"],11],14,[">=",["get","symbolrank"],13]]],"layout":{"text-line-height":1.1,"text-size":["interpolate",["cubic-bezier",0.2,0,0.9,1],["zoom"],8,["step",["get","symbolrank"],18,9,17,10,15],15,["step",["get","symbolrank"],23,9,22,10,20,11,18,12,16,13,15,15,13]],"icon-image":"","text-font":["DIN Pro Medium","Arial Unicode MS Regular"],"text-offset":["step",["zoom"],["literal",[0,0]],8,["literal",[0,0]]],"text-anchor":["step",["zoom"],"center",8,"center"],"text-field":["coalesce",["get","name_en"],["get","name"]],"text-max-width":7},"paint":{"text-color":"hsl(0, 0%, 0%)","text-halo-color":"hsl(40, 53%, 100%)","text-halo-width":1,"icon-opacity":["step",["zoom"],1,8,0],"text-halo-blur":1}},{"id":"state-label","type":"symbol","metadata":{"mapbox:featureComponent":"place-labels","mapbox:group":"Place labels, place-labels"},"source":"composite","source-layer":"place_label","minzoom":3,"maxzoom":9,"filter":["match",["get","class"],"state",["match",["get","worldview"],["all","US"],true,false],"disputed_state",["all",["==",["get","disputed"],"true"],["match",["get","worldview"],["all","US"],true,false]],false],"layout":{"text-size":["interpolate",["cubic-bezier",0.85,0.7,0.65,1],["zoom"],4,["step",["get","symbolrank"],10,6,9.5,7,9],9,["step",["get","symbolrank"],21,6,16,7,13]],"text-transform":"uppercase","text-font":["DIN Pro Bold","Arial Unicode MS Bold"],"text-field":["step",["zoom"],["step",["get","symbolrank"],["coalesce",["get","name_en"],["get","name"]],5,["coalesce",["get","abbr"],["get","name_en"],["get","name"]]],5,["coalesce",["get","name_en"],["get","name"]]],"text-letter-spacing":0.15,"text-max-width":6},"paint":{"text-color":"hsl(0, 0%, 0%)","text-halo-color":"hsl(40, 53%, 100%)","text-halo-width":1}},{"id":"country-label","type":"symbol","metadata":{"mapbox:featureComponent":"place-labels","mapbox:group":"Place labels, place-labels"},"source":"composite","source-layer":"place_label","minzoom":1,"maxzoom":10,"filter":["match",["get","class"],"country",["match",["get","worldview"],["all","US"],true,false],"disputed_country",["all",["==",["get","disputed"],"true"],["match",["get","worldview"],["all","US"],true,false]],false],"layout":{"text-line-height":1.1,"text-size":["interpolate",["cubic-bezier",0.2,0,0.7,1],["zoom"],1,["step",["get","symbolrank"],11,4,9,5,8],9,["step",["get","symbolrank"],22,4,19,5,17]],"icon-image":"","text-font":["DIN Pro Medium","Arial Unicode MS Regular"],"text-offset":["literal",[0,0]],"text-field":["coalesce",["get","name_en"],["get","name"]],"text-max-width":6},"paint":{"icon-opacity":["step",["zoom"],["case",["has","text_anchor"],1,0],7,0],"text-color":"hsl(0, 0%, 0%)","text-halo-color":["interpolate",["linear"],["zoom"],2,"hsla(40, 53%, 100%, 0.75)",3,"hsl(40, 53%, 100%)"],"text-halo-width":1.25}}],"created":"2021-03-29T17:24:02.794Z","modified":"2021-03-29T17:24:12.872Z","id":"ckmuv21s85dd317s3sii3rhg7","owner":"northarrowresearch","visibility":"private","draft":false}')},353:function(e){e.exports=JSON.parse('{"version":8,"name":"Grayscale Hillshade","metadata":{"mapbox:type":"default","mapbox:origin":"outdoors-v11","mapbox:autocomposite":true,"mapbox:groups":{"1444855786460.0557":{"name":"Roads","collapsed":true},"1444934295202.7542":{"name":"Admin boundaries","collapsed":false},"1444855799204.86":{"name":"Bridges","collapsed":true},"1444855769305.6016":{"name":"Tunnels","collapsed":true}},"mapbox:sdk-support":{"js":"0.54.0","android":"6.7.0","ios":"4.7.0"},"mapbox:uiParadigm":"layers"},"center":[-112.12098454772115,36.094321418957094],"zoom":11.946429691380777,"bearing":0,"pitch":0,"sources":{"composite":{"url":"mapbox://mapbox.mapbox-streets-v8,mapbox.mapbox-terrain-v2","type":"vector"}},"sprite":"mapbox://sprites/northarrowresearch/ckmuw9x2e5f0417pe3vy7y0cz/55jsegcrpjhdm8ibxtin56tly","glyphs":"mapbox://fonts/northarrowresearch/{fontstack}/{range}.pbf","layers":[{"id":"land","type":"background","layout":{},"paint":{"background-color":["interpolate",["linear"],["zoom"],11,"hsl(35, 0%, 91%)",13,"hsl(35, 0%, 89%)"]}},{"id":"landcover","type":"fill","source":"composite","source-layer":"landcover","maxzoom":12,"layout":{},"paint":{"fill-color":["match",["get","class"],"snow","hsl(0, 0%, 100%)","hsl(75, 0%, 55%)"],"fill-opacity":["interpolate",["exponential",1.5],["zoom"],2,0.3,12,0],"fill-antialias":false}},{"id":"pitch-outline","type":"line","source":"composite","source-layer":"landuse","minzoom":15,"filter":["==",["get","class"],"pitch"],"layout":{},"paint":{"line-color":"hsl(75, 0%, 84%)"}},{"id":"waterway-shadow","type":"line","source":"composite","source-layer":"waterway","minzoom":8,"layout":{"line-cap":["step",["zoom"],"butt",11,"round"],"line-join":"round"},"paint":{"line-color":"hsl(215, 0%, 69%)","line-width":["interpolate",["exponential",1.3],["zoom"],9,["match",["get","class"],["canal","river"],0.1,0],20,["match",["get","class"],["canal","river"],8,3]],"line-translate":["interpolate",["exponential",1.2],["zoom"],7,["literal",[0,0]],16,["literal",[-1,-1]]],"line-translate-anchor":"viewport","line-opacity":["interpolate",["linear"],["zoom"],8,0,8.5,1]}},{"id":"water-shadow","type":"fill","source":"composite","source-layer":"water","layout":{},"paint":{"fill-color":"hsl(215, 0%, 69%)","fill-translate":["interpolate",["exponential",1.2],["zoom"],7,["literal",[0,0]],16,["literal",[-1,-1]]],"fill-translate-anchor":"viewport"}},{"id":"waterway","type":"line","source":"composite","source-layer":"waterway","minzoom":8,"layout":{"line-cap":["step",["zoom"],"butt",11,"round"],"line-join":"round"},"paint":{"line-color":"hsl(205, 0%, 76%)","line-width":["interpolate",["exponential",1.3],["zoom"],9,["match",["get","class"],["canal","river"],0.1,0],20,["match",["get","class"],["canal","river"],8,3]],"line-opacity":["interpolate",["linear"],["zoom"],8,0,8.5,1]}},{"id":"water","type":"fill","source":"composite","source-layer":"water","layout":{},"paint":{"fill-color":"hsl(196, 0%, 58%)"}},{"id":"wetland","type":"fill","source":"composite","source-layer":"landuse_overlay","minzoom":5,"filter":["match",["get","class"],["wetland","wetland_noveg"],true,false],"paint":{"fill-color":"hsl(185, 0%, 74%)","fill-opacity":["interpolate",["linear"],["zoom"],10,0.25,10.5,0.15]}},{"id":"hillshade","type":"fill","source":"composite","source-layer":"hillshade","maxzoom":16,"layout":{},"paint":{"fill-color":["match",["get","class"],"shadow","hsl(0, 0%, 0%)","hsl(0, 0%, 100%)"],"fill-opacity":["interpolate",["linear"],["zoom"],14,["interpolate",["linear"],["get","level"],56,0.27,94,0.1],16,0],"fill-antialias":false}},{"id":"contour-line","type":"line","source":"composite","source-layer":"contour","minzoom":11,"filter":["!=",["get","index"],-1],"layout":{},"paint":{"line-opacity":["interpolate",["linear"],["zoom"],11,["match",["get","index"],[1,2],0.15,0.25],12,["match",["get","index"],[1,2],0.3,0.5]],"line-color":["case",["==",["get","ele"],0],"hsl(100, 0%, 20%)","hsl(100, 0%, 70%)"],"line-width":["interpolate",["linear"],["zoom"],13,["match",["get","index"],[1,2],0.5,0.6],16,["match",["get","index"],[1,2],0.8,1.2]],"line-offset":["interpolate",["linear"],["zoom"],13,["match",["get","index"],[1,2],1,0.6],16,["match",["get","index"],[1,2],1.6,1.2]]}}],"created":"2021-03-29T17:58:09.569Z","modified":"2021-03-29T17:58:21.965Z","id":"ckmuw9x2e5f0417pe3vy7y0cz","owner":"northarrowresearch","visibility":"private","draft":false}')},412:function(e,t,a){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,a=1,r=arguments.length;a<r;a++)for(var n in t=arguments[a])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},r.apply(this,arguments)},n=this&&this.__awaiter||function(e,t,a,r){return new(a||(a=Promise))((function(n,o){function i(e){try{s(r.next(e))}catch(t){o(t)}}function l(e){try{s(r.throw(e))}catch(t){o(t)}}function s(e){var t;e.done?n(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(i,l)}s((r=r.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var a,r,n,o,i={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},"function"===typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(a)throw new TypeError("Generator is already executing.");for(;i;)try{if(a=1,r&&(n=2&o[0]?r.return:o[0]?r.throw||((n=r.return)&&n.call(r),0):r.next)&&!(n=n.call(r,o[1])).done)return n;switch(r=0,n&&(o=[2&o[0],n.value]),o[0]){case 0:case 1:n=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(n=(n=i.trys).length>0&&n[n.length-1])&&(6===o[0]||2===o[0])){i=0;continue}if(3===o[0]&&(!n||o[1]>n[0]&&o[1]<n[3])){i.label=o[1];break}if(6===o[0]&&i.label<n[1]){i.label=n[1],n=o;break}if(n&&i.label<n[2]){i.label=n[2],i.ops.push(o);break}n[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(l){o=[6,l],r=0}finally{a=n=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}},i=this&&this.__rest||function(e,t){var a={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(a[r]=e[r]);if(null!=e&&"function"===typeof Object.getOwnPropertySymbols){var n=0;for(r=Object.getOwnPropertySymbols(e);n<r.length;n++)t.indexOf(r[n])<0&&Object.prototype.propertyIsEnumerable.call(e,r[n])&&(a[r[n]]=e[r[n]])}return a},l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.verifyMeta=t.augmentXML=t.parseProjectXML=t.parseProgramXML=t.parseXMLMeta=t.getXML=void 0;var s=a(413),c=l(a(286)),d=a(11),p=l(a(459)),u=l(a(18));function m(e){try{return e.reduce((function(e,t){var a,n=t.$,o=t._;return r(r({},e),((a={})[n.name]=o&&o.trim(),a))}),{})}catch(t){return{}}}t.getXML=function(e){return n(this,void 0,void 0,(function(){var t,a,r;return o(this,(function(n){switch(n.label){case 0:return t=Date.now(),[4,(0,c.default)({url:e,method:"get"})];case 1:if(a=n.sent(),(r=(Date.now()-t)/1e3)>10&&u.default.warn("getXML took "+r.toFixed(1)+" seconds"),!a.data)throw new Error("Error retrieving XML file");return[2,a.data]}}))}))},t.parseXMLMeta=m,t.parseProgramXML=function(e){return n(this,void 0,void 0,(function(){var t,a,n,l,c,u,g,y,h,b;return o(this,(function(o){switch(o.label){case 0:return[4,(0,s.parseStringPromise)(e).catch((function(e){throw new d.ValidationError("Error parsing XML file. This likely means a broken or unclosed tag.",[e.message])}))];case 1:return t=o.sent(),a=m(t.Program.MetaData[0].Meta),n=a.projectFile,l=a.projectXSDs,c=i(a,["projectFile","projectXSDs"]),u=t.Program.Definitions[0].Collections[0].Collection.map((function(e){var t=e.$,a=e.Allow,n=e.AllowRegex;return r(r({},t),{Allow:a?Array.isArray(a)?a.map((function(e){return e.$})):[a]:void 0,AllowRegex:n?Array.isArray(n)?n.map((function(e){return e.$.pattern})):[n.pattern]:void 0})})),g=[],t.Program.Definitions[0].Groups[0].Group&&(g=Array.isArray(t.Program.Definitions[0].Groups[0].Group)?t.Program.Definitions[0].Groups[0].Group.map((function(e){return e.$})):[t.Program.Definitions[0].Groups[0].Group]),y=[],t.Program.Definitions[0].Products[0].Product&&(y=Array.isArray(t.Program.Definitions[0].Products[0].Product)?t.Program.Definitions[0].Products[0].Product.map((function(e){return e.$})):[t.Program.Definitions[0].Products[0].Product]),h=(new p.default.DOMParser).parseFromString(e),b=function(e,t,a,n){var o=e.getElementsByTagName("Hierarchy")[0],i=Array.from(o.getElementsByTagName("Product")),l=[];return i.forEach((function(e){var o=[],i=e.getAttribute("ref"),s=t.find((function(e){return e.id===i}));if(!s)throw new Error("Product not found for ref='"+i+"'");for(var c=e.parentNode,d=function(){var e=c.getAttribute("ref"),t=c.tagName,r="Group"===t?a.find((function(t){return t.id===e})):n.find((function(t){return t.id===e})),i=r.folder,l=r.name;o.push({type:t,id:e,folder:i,name:l}),c=c.parentNode};c&&c.parentNode&&"Hierarchy"!==c.tagName;)d();l.push(r(r({},s),{pathArr:o.reverse()}))})),l}(h,y,g,u),[2,Promise.resolve(new d.Program({name:t.Program.Name[0],machineName:t.Program.MachineName[0],projectXSDs:l,projectFile:n,meta:c,products:b,collections:u,groups:g}))]}}))}))},t.parseProjectXML=function(e){return n(this,void 0,void 0,(function(){var t,a,r,n;return o(this,(function(o){switch(o.label){case 0:return[4,(0,s.parseStringPromise)(e).catch((function(e){throw new d.ValidationError("Error parsing XML file. This likely means a broken or unclosed tag.",[e.message])}))];case 1:return t=o.sent(),a=t.Project,r={},a.Warehouse&&(r=m(a.Warehouse[0].Meta)),n={},a.MetaData&&(n=m(a.MetaData[0].Meta)),[2,Promise.resolve({id:r.id,name:a.Name[0],projType:a.ProjectType[0],Warehouse:r,program:r.program,meta:n,tags:d.Project.parseTagString(r.tags),xml:e,parsedProjectJSON:t,rawXML:e})]}}))}))},t.augmentXML=function(e,t){var a=(new p.default.DOMParser).parseFromString(t),r=a.getElementsByTagName("MetaData")[0];a.getElementsByTagName("Warehouse").length>0&&a.removeChild(a.getElementsByTagName("Warehouse")[0]);var n=a.createElement("Warehouse");return Object.keys(e).forEach((function(t){var r=a.createElement("Meta");r.setAttribute("name",t),r.appendChild(a.createTextNode(e[t])),n.appendChild(r)})),a.insertBefore(n,r),(new p.default.XMLSerializer).serializeToString(a)},t.verifyMeta=function(e,t,a){var r=a.products.find((function(t){return t.id===e}));if(!r)throw new Error("No project type '"+e+"' found in program '"+a.name+"'");return r.pathArr.filter((function(e){return"Collection"===e.type})).map((function(e){return{name:e.name,value:t[e.name]}}))}},429:function(e,t){},431:function(e,t){},461:function(e,t,a){"use strict";var r=this&&this.__makeTemplateObject||function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},n=this&&this.__assign||function(){return n=Object.assign||function(e){for(var t,a=1,r=arguments.length;a<r;a++)for(var n in t=arguments[a])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},n.apply(this,arguments)},o=this&&this.__awaiter||function(e,t,a,r){return new(a||(a=Promise))((function(n,o){function i(e){try{s(r.next(e))}catch(t){o(t)}}function l(e){try{s(r.throw(e))}catch(t){o(t)}}function s(e){var t;e.done?n(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(i,l)}s((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var a,r,n,o,i={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},"function"===typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(a)throw new TypeError("Generator is already executing.");for(;i;)try{if(a=1,r&&(n=2&o[0]?r.return:o[0]?r.throw||((n=r.return)&&n.call(r),0):r.next)&&!(n=n.call(r,o[1])).done)return n;switch(r=0,n&&(o=[2&o[0],n.value]),o[0]){case 0:case 1:n=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(n=(n=i.trys).length>0&&n[n.length-1])&&(6===o[0]||2===o[0])){i=0;continue}if(3===o[0]&&(!n||o[1]>n[0]&&o[1]<n[3])){i.label=o[1];break}if(6===o[0]&&i.label<n[1]){i.label=n[1],n=o;break}if(n&&i.label<n[2]){i.label=n[2],i.ops.push(o);break}n[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(l){o=[6,l],r=0}finally{a=n=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}},l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.adminGetUsers=t.adminUpdateUserPermissions=t.search=t.deleteProject=t.downloadZipFile=t.getWebSymbology=t.getLayerTiles=t.downloadFile=t.getUploadUrls=t.getProject=t.getProgram=t.getProgramAuth=t.getPrograms=t.validateProjectXML=t.authCheck=t.apiCall=void 0;var s,c,d,p,u,m,g,y,h,b,f,x,j,w,v,O=l(a(286)),S=a(334),k=l(a(335)),_=l(a(18)),T=a(11);t.apiCall=function(e,t,a,r,n){var o=Date.now();return(0,O.default)({url:e,method:"post",timeout:n,headers:{Authorization:t?"Bearer "+t:"Bearer NONE"},data:{query:(0,S.print)(a),variables:r}}).then((function(e){var t=e.data,n=(Date.now()-o)/1e3;return n>10&&_.default.warn("Query took "+n.toFixed(1)+" seconds. "+(0,S.print)(a).replace(/\n/g,"").slice(0,50)+" "+JSON.stringify(r)),t})).catch((function(n){throw n.response&&404===n.response.status?new Error("API Url not found: "+e):n.code&&"ECONNREFUSED"===n.code?new Error("Connection refused. Could not contact: '"+e+"'"):(_.default.error("apiCall Error",{url:e,jwt:t,query:(0,S.print)(a),variables:r,err:n}),n)}))},t.authCheck=function(e,a,n){return(0,t.apiCall)(e,a,(0,k.default)(s||(s=r(["\n            query AuthCall {\n                auth {\n                    loggedIn\n                    userPool\n                    clientId\n                    region\n                    domain\n                }\n            }\n        "],["\n            query AuthCall {\n                auth {\n                    loggedIn\n                    userPool\n                    clientId\n                    region\n                    domain\n                }\n            }\n        "]))),{},n)},t.validateProjectXML=function(e,a,n,o,i,l){return(0,t.apiCall)(e,a,(0,k.default)(c||(c=r(["\n            query validateProject($xml: String!, $projType: String!, $program: String!) {\n                validate(xml: $xml, projType: $projType, program: $program) {\n                    result\n                    xmlErrors\n                }\n            }\n        "],["\n            query validateProject($xml: String!, $projType: String!, $program: String!) {\n                validate(xml: $xml, projType: $projType, program: $program) {\n                    result\n                    xmlErrors\n                }\n            }\n        "]))),{xml:n,program:i,projType:o},l)},t.getPrograms=function(e,a,l){return o(this,void 0,void 0,(function(){return i(this,(function(o){return[2,(0,t.apiCall)(e,a,(0,k.default)(d||(d=r(["\n            query programs {\n                auth {\n                    loggedIn\n                    userPool\n                    clientId\n                    region\n                    domain\n                }\n                programs {\n                    name\n                    machineName\n                    projectXSDs\n                    projectFile\n                    role\n                    groups {\n                        id\n                        name\n                        folder\n                    }\n                    collections {\n                        id\n                        name\n                        AllowRegex\n                        Allow {\n                            id\n                            name\n                            aliases\n                            folder\n                        }\n                    }\n                    products {\n                        id\n                        name\n                        folder\n                        pathArr\n                    }\n                    hierarchy\n                    meta\n                }\n            }\n        "],["\n            query programs {\n                auth {\n                    loggedIn\n                    userPool\n                    clientId\n                    region\n                    domain\n                }\n                programs {\n                    name\n                    machineName\n                    projectXSDs\n                    projectFile\n                    role\n                    groups {\n                        id\n                        name\n                        folder\n                    }\n                    collections {\n                        id\n                        name\n                        AllowRegex\n                        Allow {\n                            id\n                            name\n                            aliases\n                            folder\n                        }\n                    }\n                    products {\n                        id\n                        name\n                        folder\n                        pathArr\n                    }\n                    hierarchy\n                    meta\n                }\n            }\n        "]))),{},l).then((function(e){return n(n({},e),{data:{programs:e.data.programs.map(T.Program.fromGraphQL)}})}))]}))}))},t.getProgramAuth=function(e,a,n,l){return o(this,void 0,void 0,(function(){var o,s,c;return i(this,(function(i){switch(i.label){case 0:return[4,(0,t.apiCall)(e,a,(0,k.default)(p||(p=r(["\n            query program($program: String!) {\n                program(program: $program) {\n                    name\n                    machineName\n                    projectXSDs\n                    projectFile\n                    role\n                    groups {\n                        id\n                        name\n                        folder\n                    }\n                    collections {\n                        id\n                        name\n                        AllowRegex\n                        Allow {\n                            id\n                            name\n                            aliases\n                            folder\n                        }\n                    }\n                    products {\n                        id\n                        name\n                        folder\n                        pathArr\n                    }\n                    hierarchy\n                    meta\n                }\n            }\n        "],["\n            query program($program: String!) {\n                program(program: $program) {\n                    name\n                    machineName\n                    projectXSDs\n                    projectFile\n                    role\n                    groups {\n                        id\n                        name\n                        folder\n                    }\n                    collections {\n                        id\n                        name\n                        AllowRegex\n                        Allow {\n                            id\n                            name\n                            aliases\n                            folder\n                        }\n                    }\n                    products {\n                        id\n                        name\n                        folder\n                        pathArr\n                    }\n                    hierarchy\n                    meta\n                }\n            }\n        "]))),{program:n},l)];case 1:return o=i.sent(),s=o.data.program,c=o.errors,[2,{data:{program:T.Program.fromGraphQL(s)},errors:c}]}}))}))},t.getProgram=function(e,a,n,l){return o(this,void 0,void 0,(function(){var o,s,c;return i(this,(function(i){switch(i.label){case 0:return[4,(0,t.apiCall)(e,a,(0,k.default)(u||(u=r(["\n            query program($program: String!) {\n                program(program: $program) {\n                    name\n                    machineName\n                    projectXSDs\n                    projectFile\n                    role\n                    groups {\n                        id\n                        name\n                        folder\n                    }\n                    collections {\n                        id\n                        name\n                        AllowRegex\n                        Allow {\n                            id\n                            name\n                            aliases\n                            folder\n                        }\n                    }\n                    products {\n                        id\n                        name\n                        folder\n                        pathArr\n                    }\n                    hierarchy\n                    meta\n                }\n            }\n        "],["\n            query program($program: String!) {\n                program(program: $program) {\n                    name\n                    machineName\n                    projectXSDs\n                    projectFile\n                    role\n                    groups {\n                        id\n                        name\n                        folder\n                    }\n                    collections {\n                        id\n                        name\n                        AllowRegex\n                        Allow {\n                            id\n                            name\n                            aliases\n                            folder\n                        }\n                    }\n                    products {\n                        id\n                        name\n                        folder\n                        pathArr\n                    }\n                    hierarchy\n                    meta\n                }\n            }\n        "]))),{program:n},l)];case 1:return o=i.sent(),s=o.data.program,c=o.errors,[2,{data:{program:T.Program.fromGraphQL(s)},errors:c}]}}))}))},t.getProject=function(e,a,l,s,c,d,p){return void 0===c&&(c=!1),void 0===d&&(d=!1),o(this,void 0,void 0,(function(){return i(this,(function(o){return[2,(0,t.apiCall)(e,a,(0,k.default)(m||(m=r(["\n            query getProject($id: ID!, $program: String!) {\n                project(id: $id, program: $program) {\n                    id\n                    name\n                    projType\n                    totalSize\n                    program\n                    tags\n                    createdBy\n                    updatedBy\n                    createdOn\n                    updatedOn\n                    meta\n                    ","\n                    ","\n                }\n            }\n        "],["\n            query getProject($id: ID!, $program: String!) {\n                project(id: $id, program: $program) {\n                    id\n                    name\n                    projType\n                    totalSize\n                    program\n                    tags\n                    createdBy\n                    updatedBy\n                    createdOn\n                    updatedOn\n                    meta\n                    ","\n                    ","\n                }\n            }\n        "])),c?"\n                    files {\n                        key\n                        md5\n                        size\n                        downloadUrl\n                    }":"",d?"\n                        tree {\n                            name\n                            description\n                            projectType\n                            metaStr\n                            leaves {\n                                id\n                                pid\n                                label\n                                layerId\n                                blLayerId\n                                layerType\n                                layerPath\n                                layerName\n                                nodeExists\n                                metaStr\n                                symbology\n                                transparency\n                            }\n                            branches {\n                                label\n                                collapsed\n                                bid\n                                pid\n                            }\n                            defaultView\n                            views  {\n                                id\n                                name\n                                description\n                                layers{\n                                id\n                                visible\n                                }\n                            }\n                        }\n                    ":""),{id:l,program:s},p).then((function(e){return n(n({},e),{data:{project:T.Project.fromGraphQL(e.data.project)}})}))]}))}))},t.getUploadUrls=function(e,a,n,l,s,c,d){return o(this,void 0,void 0,(function(){return i(this,(function(o){switch(o.label){case 0:return[4,(0,t.apiCall)(e,a,(0,k.default)(g||(g=r(["\n            query requestUploadProject($id: ID, $files: [String!], $program: String!, $projectType: String!) {\n                requestUpload(id: $id, files: $files, program: $program, projectType: $projectType) {\n                    id\n                    uploadUrls {\n                        url\n                        fields\n                        origPath\n                    }\n                }\n            }\n        "],["\n            query requestUploadProject($id: ID, $files: [String!], $program: String!, $projectType: String!) {\n                requestUpload(id: $id, files: $files, program: $program, projectType: $projectType) {\n                    id\n                    uploadUrls {\n                        url\n                        fields\n                        origPath\n                    }\n                }\n            }\n        "]))),{id:n,files:l,projectType:s,program:c},d)];case 1:return[2,o.sent()]}}))}))},t.downloadFile=function(e,a,n,l,s,c,d){return o(this,void 0,void 0,(function(){return i(this,(function(o){switch(o.label){case 0:return[4,(0,t.apiCall)(e,a,(0,k.default)(y||(y=r(["\n            query downloadFileQuery($program: String!, $id: ID!, $projType: String!, $filePath: String!) {\n                downloadFile(program: $program, id: $id, projType: $projType, filePath: $filePath) {\n                    key\n                    md5\n                    contentType\n                    size\n                    downloadUrl\n                }\n            }\n        "],["\n            query downloadFileQuery($program: String!, $id: ID!, $projType: String!, $filePath: String!) {\n                downloadFile(program: $program, id: $id, projType: $projType, filePath: $filePath) {\n                    key\n                    md5\n                    contentType\n                    size\n                    downloadUrl\n                }\n            }\n        "]))),{projType:n,program:l,id:s,filePath:c},d)];case 1:return[2,o.sent()]}}))}))},t.getLayerTiles=function(e,a,l,s,c,d,p){return o(this,void 0,void 0,(function(){var o,u;return i(this,(function(i){switch(i.label){case 0:return[4,(0,t.apiCall)(e,a,(0,k.default)(h||(h=r(["\n            query getLayerTilesQuery($program: String!, $id: ID!, $projType: String!, $layerPath: String!) {\n                getLayerTiles(program: $program, id: $id, projType: $projType, layerPath: $layerPath) {\n                    url\n                    indexUrl\n                    status\n                    lastStatus\n                    error\n                    rsLayer\n                    rasterStats\n                    started\n                    duration\n                    format\n                    bounds\n                    maxZoom\n                    minZoom\n                    originFile {\n                        lastModified\n                        etag\n                        size\n                        key\n                    }\n                }\n            }\n        "],["\n            query getLayerTilesQuery($program: String!, $id: ID!, $projType: String!, $layerPath: String!) {\n                getLayerTiles(program: $program, id: $id, projType: $projType, layerPath: $layerPath) {\n                    url\n                    indexUrl\n                    status\n                    lastStatus\n                    error\n                    rsLayer\n                    rasterStats\n                    started\n                    duration\n                    format\n                    bounds\n                    maxZoom\n                    minZoom\n                    originFile {\n                        lastModified\n                        etag\n                        size\n                        key\n                    }\n                }\n            }\n        "]))),{projType:l,program:s,id:c,layerPath:d},p)];case 1:return(o=i.sent()).data?(u=o.data.getLayerTiles,[2,{errors:o.errors,data:{getLayerTiles:n(n({},u),{started:u&&u.started&&parseInt(u.started,10),lastStatus:u&&u.lastStatus&&parseInt(u.lastStatus,10),rasterStats:u&&u.rasterStats&&JSON.parse(u.rasterStats),rsLayer:u&&u.rsLayer&&JSON.parse(u.rsLayer),originFile:u&&u.originFile&&n(n({},u.originFile),{lastModified:parseInt(u.originFile.lastModified,10)})})}}]):[2,{errors:o.errors}]}}))}))},t.getWebSymbology=function(e,a,l,s,c,d){return o(this,void 0,void 0,(function(){var o;return i(this,(function(i){switch(i.label){case 0:return[4,(0,t.apiCall)(e,a,(0,k.default)(b||(b=r(["\n            query getWebSymbology($projType: String!, $name: String!, $isRaster: Boolean) {\n                getWebSymbology(projType: $projType, name: $name, isRaster: $isRaster) {\n                    name\n                    status\n                    legend\n                    rampType\n                    mapboxJson\n                    url\n                    error\n                }\n            }\n        "],["\n            query getWebSymbology($projType: String!, $name: String!, $isRaster: Boolean) {\n                getWebSymbology(projType: $projType, name: $name, isRaster: $isRaster) {\n                    name\n                    status\n                    legend\n                    rampType\n                    mapboxJson\n                    url\n                    error\n                }\n            }\n        "]))),{projType:l,name:s,isRaster:c},d)];case 1:return(o=i.sent()).data?[2,{errors:o.errors,data:{getWebSymbology:o.data.getWebSymbology&&n(n({},o.data.getWebSymbology),{mapboxJson:o.data.getWebSymbology.mapboxJson&&JSON.parse(o.data.getWebSymbology.mapboxJson)})}}]:[2,{errors:o.errors}]}}))}))},t.downloadZipFile=function(e,a,n,l,s,c){return o(this,void 0,void 0,(function(){return i(this,(function(o){switch(o.label){case 0:return[4,(0,t.apiCall)(e,a,(0,k.default)(f||(f=r(["\n            query downloadZipFileQuery($program: String!, $id: ID!, $projType: String!) {\n                downloadZip(program: $program, id: $id, projType: $projType) {\n                    key\n                    md5\n                    contentType\n                    size\n                    downloadUrl\n                    pendingSince\n                }\n            }\n        "],["\n            query downloadZipFileQuery($program: String!, $id: ID!, $projType: String!) {\n                downloadZip(program: $program, id: $id, projType: $projType) {\n                    key\n                    md5\n                    contentType\n                    size\n                    downloadUrl\n                    pendingSince\n                }\n            }\n        "]))),{projType:n,program:l,id:s},c)];case 1:return[2,o.sent()]}}))}))},t.deleteProject=function(e,a,n,l,s){return o(this,void 0,void 0,(function(){return i(this,(function(o){switch(o.label){case 0:return[4,(0,t.apiCall)(e,a,(0,k.default)(x||(x=r(["\n            mutation deleteProject($id: ID!, $program: String!) {\n                deleteProject(id: $id, program: $program)\n            }\n        "],["\n            mutation deleteProject($id: ID!, $program: String!) {\n                deleteProject(id: $id, program: $program)\n            }\n        "]))),{program:l,id:n},s)];case 1:return[2,o.sent()]}}))}))},t.search=function(e,a,l,s,c){return o(this,void 0,void 0,(function(){var o,d,p,u,m;return i(this,(function(i){switch(i.label){case 0:return[4,(0,t.apiCall)(e,a,(0,k.default)(j||(j=r(["\n            query searchQuery(\n                $program: String!\n                $projType: String\n                $nameStr: String\n                $metaStr: String\n                $metaArr: String\n                $tags: String\n                $noTags: Boolean\n                $limit: Int\n                $nextToken: Int\n            ) {\n                search(\n                    program: $program\n                    projType: $projType\n                    nameStr: $nameStr\n                    metaStr: $metaStr\n                    metaArr: $metaArr\n                    tags: $tags\n                    noTags: $noTags\n                    limit: $limit\n                    nextToken: $nextToken\n                ) {\n                    projects {\n                        id\n                        name\n                        projType\n                        program\n                        tags\n                        totalSize\n                        createdBy\n                        updatedBy\n                        createdOn\n                        updatedOn\n                        meta\n                        score\n                    }\n                    nextToken\n                    total\n                }\n            }\n        "],["\n            query searchQuery(\n                $program: String!\n                $projType: String\n                $nameStr: String\n                $metaStr: String\n                $metaArr: String\n                $tags: String\n                $noTags: Boolean\n                $limit: Int\n                $nextToken: Int\n            ) {\n                search(\n                    program: $program\n                    projType: $projType\n                    nameStr: $nameStr\n                    metaStr: $metaStr\n                    metaArr: $metaArr\n                    tags: $tags\n                    noTags: $noTags\n                    limit: $limit\n                    nextToken: $nextToken\n                ) {\n                    projects {\n                        id\n                        name\n                        projType\n                        program\n                        tags\n                        totalSize\n                        createdBy\n                        updatedBy\n                        createdOn\n                        updatedOn\n                        meta\n                        score\n                    }\n                    nextToken\n                    total\n                }\n            }\n        "]))),n(n({},s),{program:l}),c)];case 1:return(o=i.sent()).data?(d=o.data.search||{},p=d.nextToken,u=d.projects,m=d.total,[2,{errors:o.errors,data:{search:{projects:Array.isArray(u)?u.map(T.Project.fromGraphQL):u,nextToken:p,total:m}}}]):[2,{errors:o.errors}]}}))}))},t.adminUpdateUserPermissions=function(e,a,l,s,c,d){return o(this,void 0,void 0,(function(){var o;return i(this,(function(i){switch(i.label){case 0:return[4,(0,t.apiCall)(e,a,(0,k.default)(w||(w=r(["\n            mutation project($id: ID!, $program: String!, $permission: String) {\n                updateUser(id: $id, program: $program, permission: $permission) {\n                    email\n                    name\n                    picture\n                    username\n                    createdOn\n                    updatedOn\n                    role\n                }\n            }\n        "],["\n            mutation project($id: ID!, $program: String!, $permission: String) {\n                updateUser(id: $id, program: $program, permission: $permission) {\n                    email\n                    name\n                    picture\n                    username\n                    createdOn\n                    updatedOn\n                    role\n                }\n            }\n        "]))),{program:s,id:l,permission:c},d)];case 1:return(o=i.sent()).data?[2,{errors:o.errors,data:{updateUser:o.data.updateUser?n(n({},o.data.updateUser),{createdOn:parseInt(o.data.updateUser.createdOn,10),updatedOn:parseInt(o.data.updateUser.updatedOn,10)}):null}}]:[2,{errors:o.errors}]}}))}))},t.adminGetUsers=function(e,a,l,s,c,d){return o(this,void 0,void 0,(function(){var o,p,u,m;return i(this,(function(i){switch(i.label){case 0:return[4,(0,t.apiCall)(e,a,(0,k.default)(v||(v=r(["\n            query getUsers($program: String!, $limit: Int, $nextToken: String) {\n                getUsers(program: $program, limit: $limit, nextToken: $nextToken) {\n                    users {\n                        email\n                        name\n                        picture\n                        username\n                        createdOn\n                        updatedOn\n                        role\n                    }\n                    nextToken\n                }\n            }\n        "],["\n            query getUsers($program: String!, $limit: Int, $nextToken: String) {\n                getUsers(program: $program, limit: $limit, nextToken: $nextToken) {\n                    users {\n                        email\n                        name\n                        picture\n                        username\n                        createdOn\n                        updatedOn\n                        role\n                    }\n                    nextToken\n                }\n            }\n        "]))),{program:l,limit:s,nextToken:c},d)];case 1:return(o=i.sent()).data?(p=o.data.getUsers||{},u=p.nextToken,m=p.users,[2,{errors:o.errors,data:{getUsers:{users:Array.isArray(m)?m.map((function(e){return n(n({},e),{createdOn:parseInt(e.createdOn,10),updatedOn:parseInt(e.updatedOn,10)})})):m,nextToken:u}}}]):[2,{errors:o.errors}]}}))}))}},462:function(e,t,a){"use strict";var r=this&&this.__makeTemplateObject||function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o,i=n(a(335)),l=a(296),s=(0,i.default)(o||(o=r(['\n    # Check out the cheat sheet:\n    # https://raw.githubusercontent.com/sogko/graphql-shorthand-notation-cheat-sheet/master/graphql-shorthand-notation-cheat-sheet.png\n\n    schema {\n        query: Query\n        mutation: Mutation\n    }\n\n    type Query {\n        # Get a project and associated metadata\n        auth: AuthParams\n\n        project(id: ID!, program: String!): Project\n        projects(program: String!, projType: String, limit: Int, nextToken: String): PaginatedProjects\n\n        program(program: String!): Program\n        programs: [Program]\n\n        downloadFile(program: String!, id: ID!, projType: String!, filePath: String!): FileDownloadMeta\n\n        downloadZip(program: String!, id: ID!, projType: String!): FileDownloadMeta\n\n        getWebSymbology(projType: String, name: String!, isRaster: Boolean): Symbology\n        getLayerTiles(program: String!, id: ID!, projType: String!, layerPath: String!): TileService\n\n\n        # Request an upload start. Writes a manifest file on the upload bucket\n        # and creates upload urls for everything\n        requestUpload(id: ID, files: [String!], program: String!, projectType: String!): FileUpload\n\n        search(\n            program: String!\n            projType: String\n            nameStr: String\n            metaStr: String\n            metaArr: String\n            tags: String\n            noTags: Boolean\n            limit: Int\n            nextToken: Int\n        ): PaginatedSearchResults\n\n        validate(xml: String!, projType: String!, program: String!): Validation\n\n        getUsers(program: String!, limit: Int, nextToken: String): PaginatedUsers\n\n        projectTree(id: ID!, program: String!, projType: String!): ProjectTree\n    }\n\n    # this schema allows the following mutation:\n    type Mutation {\n        # signal a deletion of a project\n        deleteProject(id: ID!, program: String!): ID!\n        updateUser(id: ID!, program: String!, permission: String): User\n        reIndexProject(id: ID!, program: String!, projType: String!): WatcherOutput\n        queueTileRebuild(id: ID!, program: String!, projType: String!, filePath: String, symbologies: [String]): String\n    }\n\n    type User {\n        email: String\n        name: String\n        picture: String\n        username: String!\n        createdOn: String\n        updatedOn: String\n        role: String\n    }\n\n    type PaginatedUsers {\n        users: [User]\n        nextToken: String\n    }\n\n    type Validation {\n        result: Boolean\n        xmlErrors: [String]\n    }\n\n    type AuthParams {\n        loggedIn: Boolean\n        userPool: String\n        clientId: String\n        region: String\n        domain: String\n    }\n\n    interface ProjectBase {\n        id: ID!\n        name: String\n        meta: String\n        tags: String\n        projType: String\n        program: String\n        createdBy: ID!\n        updatedBy: ID!\n        createdOn: String!\n        updatedOn: String!\n    }\n\n    type Project implements ProjectBase {\n        id: ID!\n        name: String\n        meta: String\n        tags: String\n        projType: String\n        totalSize: String\n        program: String\n        createdBy: ID!\n        updatedBy: ID!\n        createdOn: String!\n        updatedOn: String!\n        files: [FileDownloadMeta]\n        tree: ProjectTree\n    }\n\n    type ProjectSearchResult implements ProjectBase {\n        id: ID!\n        name: String\n        meta: String\n        tags: String\n        projType: String\n        totalSize: String\n        program: String\n        createdBy: ID!\n        updatedBy: ID!\n        createdOn: String!\n        updatedOn: String!\n        score: Float\n        files: [FileDownloadMeta]\n    }\n\n    # This is mostly just JSON that\'s stringified\n    type Product {\n        id: ID!\n        name: String!\n        folder: String\n        # Stringified JSON Array:\n        pathArr: String\n    }\n    type Group {\n        id: ID!\n        name: String!\n        folder: String\n    }\n    type NamedAllow {\n        id: ID!\n        name: String!\n        aliases: String\n        folder: String\n    }\n    type Collection {\n        id: ID!\n        name: String!\n        AllowRegex: [String]\n        Allow: [NamedAllow]\n    }\n    type Program {\n        name: String\n        machineName: String\n        projectXSDs: String\n        projectFile: String\n        meta: String\n        groups: [Group]\n        collections: [Collection]\n        products: [Product]\n        hierarchy: String\n        role: String\n    }\n\n    type FileDownloadMeta {\n        key: String!\n        md5: String!\n        size: String\n        contentType: String\n        downloadUrl: String!\n        pendingSince: String\n    }\n\n    type FileUpload {\n        id: ID!\n        uploadUrls: [UploadUrl]\n    }\n\n    type UploadUrl {\n        url: String\n        fields: String\n        origPath: String\n    }\n\n    type FileUploadMeta {\n        key: String!\n        downloadUrl: String!\n    }\n\n    # Series Connection allows us to implement pagination easily\n    type PaginatedProjects {\n        projects: [Project]\n        nextToken: String\n    }\n\n    type PaginatedSearchResults {\n        projects: [ProjectSearchResult]\n        nextToken: Int\n        total: Int\n    }\n\n    type NewProject {\n        id: ID!\n    }\n\n    """\n    ProjectTreeLayerTypes is an enumeration to help us display layers with the\n    correct icon and assign them to the right slot\n    """\n    enum ProjectTreeLayerTypes {\n        ',"\n    }\n    enum SymbologyStatus {\n        ","\n    }\n    enum TilingStatus {\n        ","\n    }\n    enum RampType {\n        ","\n    }\n\n    type ProjectTreeBranch {\n        label: String!\n        collapsed: Boolean\n        # Branch ID and parent ID\n        bid: Int\n        pid: Int\n    }\n    type ProjectTreeLeaf {\n        id: Int # This is a global ID not an id within a branch\n        pid: Int\n        label: String!\n        layerId: ID\n        blLayerId: ID\n        layerType: ProjectTreeLayerTypes!\n        layerPath: String\n        layerName: String\n        nodeExists: Boolean\n        # This is the path that helps u\n        metaStr: String\n        symbology: String\n        transparency: Int\n    }\n\n    # The project tree comes back as non-recursive list of layers.\n    # The ProjectTree class will need to parse this into a typescript \n    # Recursive type\n    type ProjectTreeViewLayer {\n        id: ID!\n        visible: Boolean\n    }\n\n    type ProjectTreeViews {\n        id: ID!\n        name: String!\n        description: String\n        layers: [ProjectTreeViewLayer]\n    }\n\n    type ProjectTree {\n        name: String\n        description: String\n        projectType: String\n        metaStr: String\n        leaves: [ProjectTreeLeaf]\n        branches: [ProjectTreeBranch]\n        defaultView: ID\n        views: [ProjectTreeViews]\n    }\n\n    type TileServiceOriginFile {\n        lastModified: String\n        etag: String\n        size: Int\n        key: String\n    }\n\n    type TileService {\n        url: String\n        indexUrl: String\n        status: TilingStatus!\n        lastStatus: String\n        error: String\n        rasterStats: String\n        numFiles: Int\n        rsLayer: String        # Arbitrary depth so stringify rsLayer\n        started: String\n        duration: Float\n        format: String\n        bounds: [Float]\n        maxZoom: Int\n        minZoom: Int\n        originFile: TileServiceOriginFile\n    }\n    type Symbology {\n        name: String!\n        status: SymbologyStatus\n        legend: [[String]]\n        rampType: RampType\n        mapboxJson: String\n        url: String\n        error: String\n    }\n\n    # Just a nice convenience type for our lambda invoke methods\n    type WatcherOutput {\n        message: String\n        results: [String]\n        errors: [String]\n    }\n"],['\n    # Check out the cheat sheet:\n    # https://raw.githubusercontent.com/sogko/graphql-shorthand-notation-cheat-sheet/master/graphql-shorthand-notation-cheat-sheet.png\n\n    schema {\n        query: Query\n        mutation: Mutation\n    }\n\n    type Query {\n        # Get a project and associated metadata\n        auth: AuthParams\n\n        project(id: ID!, program: String!): Project\n        projects(program: String!, projType: String, limit: Int, nextToken: String): PaginatedProjects\n\n        program(program: String!): Program\n        programs: [Program]\n\n        downloadFile(program: String!, id: ID!, projType: String!, filePath: String!): FileDownloadMeta\n\n        downloadZip(program: String!, id: ID!, projType: String!): FileDownloadMeta\n\n        getWebSymbology(projType: String, name: String!, isRaster: Boolean): Symbology\n        getLayerTiles(program: String!, id: ID!, projType: String!, layerPath: String!): TileService\n\n\n        # Request an upload start. Writes a manifest file on the upload bucket\n        # and creates upload urls for everything\n        requestUpload(id: ID, files: [String!], program: String!, projectType: String!): FileUpload\n\n        search(\n            program: String!\n            projType: String\n            nameStr: String\n            metaStr: String\n            metaArr: String\n            tags: String\n            noTags: Boolean\n            limit: Int\n            nextToken: Int\n        ): PaginatedSearchResults\n\n        validate(xml: String!, projType: String!, program: String!): Validation\n\n        getUsers(program: String!, limit: Int, nextToken: String): PaginatedUsers\n\n        projectTree(id: ID!, program: String!, projType: String!): ProjectTree\n    }\n\n    # this schema allows the following mutation:\n    type Mutation {\n        # signal a deletion of a project\n        deleteProject(id: ID!, program: String!): ID!\n        updateUser(id: ID!, program: String!, permission: String): User\n        reIndexProject(id: ID!, program: String!, projType: String!): WatcherOutput\n        queueTileRebuild(id: ID!, program: String!, projType: String!, filePath: String, symbologies: [String]): String\n    }\n\n    type User {\n        email: String\n        name: String\n        picture: String\n        username: String!\n        createdOn: String\n        updatedOn: String\n        role: String\n    }\n\n    type PaginatedUsers {\n        users: [User]\n        nextToken: String\n    }\n\n    type Validation {\n        result: Boolean\n        xmlErrors: [String]\n    }\n\n    type AuthParams {\n        loggedIn: Boolean\n        userPool: String\n        clientId: String\n        region: String\n        domain: String\n    }\n\n    interface ProjectBase {\n        id: ID!\n        name: String\n        meta: String\n        tags: String\n        projType: String\n        program: String\n        createdBy: ID!\n        updatedBy: ID!\n        createdOn: String!\n        updatedOn: String!\n    }\n\n    type Project implements ProjectBase {\n        id: ID!\n        name: String\n        meta: String\n        tags: String\n        projType: String\n        totalSize: String\n        program: String\n        createdBy: ID!\n        updatedBy: ID!\n        createdOn: String!\n        updatedOn: String!\n        files: [FileDownloadMeta]\n        tree: ProjectTree\n    }\n\n    type ProjectSearchResult implements ProjectBase {\n        id: ID!\n        name: String\n        meta: String\n        tags: String\n        projType: String\n        totalSize: String\n        program: String\n        createdBy: ID!\n        updatedBy: ID!\n        createdOn: String!\n        updatedOn: String!\n        score: Float\n        files: [FileDownloadMeta]\n    }\n\n    # This is mostly just JSON that\'s stringified\n    type Product {\n        id: ID!\n        name: String!\n        folder: String\n        # Stringified JSON Array:\n        pathArr: String\n    }\n    type Group {\n        id: ID!\n        name: String!\n        folder: String\n    }\n    type NamedAllow {\n        id: ID!\n        name: String!\n        aliases: String\n        folder: String\n    }\n    type Collection {\n        id: ID!\n        name: String!\n        AllowRegex: [String]\n        Allow: [NamedAllow]\n    }\n    type Program {\n        name: String\n        machineName: String\n        projectXSDs: String\n        projectFile: String\n        meta: String\n        groups: [Group]\n        collections: [Collection]\n        products: [Product]\n        hierarchy: String\n        role: String\n    }\n\n    type FileDownloadMeta {\n        key: String!\n        md5: String!\n        size: String\n        contentType: String\n        downloadUrl: String!\n        pendingSince: String\n    }\n\n    type FileUpload {\n        id: ID!\n        uploadUrls: [UploadUrl]\n    }\n\n    type UploadUrl {\n        url: String\n        fields: String\n        origPath: String\n    }\n\n    type FileUploadMeta {\n        key: String!\n        downloadUrl: String!\n    }\n\n    # Series Connection allows us to implement pagination easily\n    type PaginatedProjects {\n        projects: [Project]\n        nextToken: String\n    }\n\n    type PaginatedSearchResults {\n        projects: [ProjectSearchResult]\n        nextToken: Int\n        total: Int\n    }\n\n    type NewProject {\n        id: ID!\n    }\n\n    """\n    ProjectTreeLayerTypes is an enumeration to help us display layers with the\n    correct icon and assign them to the right slot\n    """\n    enum ProjectTreeLayerTypes {\n        ',"\n    }\n    enum SymbologyStatus {\n        ","\n    }\n    enum TilingStatus {\n        ","\n    }\n    enum RampType {\n        ","\n    }\n\n    type ProjectTreeBranch {\n        label: String!\n        collapsed: Boolean\n        # Branch ID and parent ID\n        bid: Int\n        pid: Int\n    }\n    type ProjectTreeLeaf {\n        id: Int # This is a global ID not an id within a branch\n        pid: Int\n        label: String!\n        layerId: ID\n        blLayerId: ID\n        layerType: ProjectTreeLayerTypes!\n        layerPath: String\n        layerName: String\n        nodeExists: Boolean\n        # This is the path that helps u\n        metaStr: String\n        symbology: String\n        transparency: Int\n    }\n\n    # The project tree comes back as non-recursive list of layers.\n    # The ProjectTree class will need to parse this into a typescript \n    # Recursive type\n    type ProjectTreeViewLayer {\n        id: ID!\n        visible: Boolean\n    }\n\n    type ProjectTreeViews {\n        id: ID!\n        name: String!\n        description: String\n        layers: [ProjectTreeViewLayer]\n    }\n\n    type ProjectTree {\n        name: String\n        description: String\n        projectType: String\n        metaStr: String\n        leaves: [ProjectTreeLeaf]\n        branches: [ProjectTreeBranch]\n        defaultView: ID\n        views: [ProjectTreeViews]\n    }\n\n    type TileServiceOriginFile {\n        lastModified: String\n        etag: String\n        size: Int\n        key: String\n    }\n\n    type TileService {\n        url: String\n        indexUrl: String\n        status: TilingStatus!\n        lastStatus: String\n        error: String\n        rasterStats: String\n        numFiles: Int\n        rsLayer: String        # Arbitrary depth so stringify rsLayer\n        started: String\n        duration: Float\n        format: String\n        bounds: [Float]\n        maxZoom: Int\n        minZoom: Int\n        originFile: TileServiceOriginFile\n    }\n    type Symbology {\n        name: String!\n        status: SymbologyStatus\n        legend: [[String]]\n        rampType: RampType\n        mapboxJson: String\n        url: String\n        error: String\n    }\n\n    # Just a nice convenience type for our lambda invoke methods\n    type WatcherOutput {\n        message: String\n        results: [String]\n        errors: [String]\n    }\n"])),Object.values(l.ProjectTreeLayerTypes).join("\n      "),Object.values(l.SymbologyStatus).join("\n      "),Object.values(l.TilingStatus).join("\n      "),Object.values(l.RampType).join("\n      "));t.default=s},463:function(e,t,a){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,a=1,r=arguments.length;a<r;a++)for(var n in t=arguments[a])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},r.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.Program=void 0;var n=function(){function e(e){Object.assign(this,e)}return e.fromGraphQL=function(t){if(!t)return null;var a=t.meta?JSON.parse(t.meta):{};return new e(r(r({},t),{meta:a,role:t.role,products:t.products?t.products.map((function(e){return r(r({},e),{pathArr:JSON.parse(e.pathArr)})})):[]}))},e}();t.Program=n},464:function(e,t,a){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,a=1,r=arguments.length;a<r;a++)for(var n in t=arguments[a])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},r.apply(this,arguments)},n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Project=void 0;var o=n(a(465));function i(e){e.sort((function(e,t){return e.children&&!t.children?-1:!e.children&&t.children?1:e.name.toLowerCase()<t.name.toLowerCase()?-1:e.name.toLowerCase()>t.name.toLowerCase()?1:0}))}var l=function(){function e(e){var t=this;this.treeIzeFilePaths=function(){var e=[];return t.files.forEach((function(t){var a=t.key,r=a.split("/");1===r.length&&a.indexOf("\\")>-1&&(r=a.split("\\"));for(var n=e,o=function(){var e={name:r.shift(),children:[]},t=n.find((function(t){return t.name===e.name}));t&&t.children?n=t.children:(n.push(e),n=e.children),i(n)};r.length>1;)o();n.push({name:r[0],path:a})})),i(e),e},Object.assign(this,e),this.files||(this.files=[]),this.tree&&this.tree.leaves&&(this.tree.leaves=this.tree.leaves.map((function(e){return r(r({},e),{meta:e&&e.metaStr?JSON.parse(e.metaStr):{}})})))}return e.fromGraphQL=function(t){return t?new e(r(r({},t),{createdOn:parseInt(t.createdOn,10),updatedOn:parseInt(t.updatedOn,10),meta:t.meta?JSON.parse(t.meta):{},tags:t.tags?t.tags.split(","):[]})):null},e.fromDynamoDB=function(t){return new e(r(r({},t),{name:t.Name||t.name,meta:t.meta?e.parseDynamoMeta(t.meta):void 0}))},e.diff=function(e,t){var a=[],r=[];return t&&0!==t.length?e&&0!==e.length?{leftOnly:e.filter((function(e){var n=t.find((function(t){return e.key===t.key}));return n&&(n.md5===e.md5?r.push(e.key):a.push(e.key)),!n})).map((function(e){return e.key})),rightOnly:t.filter((function(t){return!e.find((function(e){return t.key===e.key}))})).map((function(e){return e.key})),different:a,same:r}:{leftOnly:[],rightOnly:t.map((function(e){return e.key})),different:[],same:[]}:{leftOnly:e.map((function(e){return e.key})),rightOnly:[],different:[],same:[]}},e.getProjectS3Keys=function(e,t,a){var r=o.default.join(e.machineName,a,t),n=r+".zip",i=o.default.join(r,e.projectFile),l=o.default.join(e.machineName,a,t+".zip.pending"),s=""+[e.machineName,a,t].join("-");return{prefix:r,zipKey:n,projFileKey:i,zipKeyPending:l,downloadFolderName:s,downloadZipFilename:s+".zip"}},e.parseDynamoMeta=function(e){var t=Object.keys(e).filter((function(e){return 0===e.indexOf("META_")})).reduce((function(t,a){var n,o=a.split("META_")[1];return r(r({},t),((n={})[o]=e[a],n))}),{});return JSON.stringify(t)},e.parseTagString=function(e){return e&&0!==e.trim().length?e.split(",").map((function(e){return e.trim()})).filter((function(e){return e.length>0&&"null"!==e&&"undefined"!==e})):[]},e.parseS3Key=function(t,a){if(a.split("/").length<3)throw new Error("Not a valid project key");var r=a.split("/"),n=r[0],o=r[1],i=r[2];if(t.machineName!==n)throw new Error("Program passed to parseS3 key "+t.machineName+" does not correspond to program in key: "+n);return e.getProjectS3Keys(t,i,o)},e.parseS3KeyDUMB=function(e){var t=e.split("/");if(t.length<3)throw new Error("Not a valid project key");var a=t[0],r=t[1],n=t[2],i=o.default.join(a,r,n);return{programMachineName:a,projType:r,id:n,zipKey:i+".zip",prefix:i}},e}();t.Project=l},466:function(e,t,a){"use strict";var r=this&&this.__extends||function(){var e=function(t,a){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])},e(t,a)};return function(t,a){if("function"!==typeof a&&null!==a)throw new TypeError("Class extends value "+String(a)+" is not a constructor or null");function r(){this.constructor=t}e(t,a),t.prototype=null===a?Object.create(a):(r.prototype=a.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0}),t.ValidationError=void 0;var n=function(e){function t(t,a){var r=e.call(this,t)||this;return r.name=r.constructor.name,r.reasons=a,Error.captureStackTrace(r,r.constructor),r}return r(t,e),t}(Error);t.ValidationError=n},467:function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TileServiceJSONClass=void 0;var r=function(e){Object.assign(this,e)};t.TileServiceJSONClass=r},532:function(e,t){},584:function(e,t,a){},587:function(e,t,a){"use strict";a.r(t);var r={};a.r(r),a.d(r,"tagColors",(function(){return pe})),a.d(r,"isDev",(function(){return me})),a.d(r,"mapConfig",(function(){return ge})),a.d(r,"version",(function(){return ye})),a.d(r,"endpoints",(function(){return he})),a.d(r,"mandatoryMetaColors",(function(){return be})),a.d(r,"redirectUrl",(function(){return fe})),a.d(r,"googleAnalytics",(function(){return xe})),a.d(r,"awsAuth",(function(){return je}));var n={};a.r(n),a.d(n,"init",(function(){return $t})),a.d(n,"currentPageView",(function(){return Gt})),a.d(n,"event",(function(){return Wt}));var o=a(0),i=a.n(o),l=a(35),s=a.n(l),c=a(32),d=a.n(c),p=a(17),u=a(68),m=a(19),g=a(698),y=a(18),h=a.n(y),b=a(699),f=a(81),x=a(1),j=a(663),w=a(118),v=a(661),O=(Object(v.a)((function(e){return{root:{display:"flex",zIndex:e.zIndex.drawer+1},text:{flexGrow:1},logo:{}}})),a(666)),S=a(665),k=a(690),_=a(689),T=a(375),z=a(132),P=a.n(z),C=a(341),L=a.n(C),I=a(340),R=a.n(I),E=a(669),N=a(342),A=a.n(N),D=a(11),U=a(25),M=a(718),F=a(717),B=a(133),$=a.n(B),G=a(670),W=a(671),V=a(668),H=a(677),Z=a(678),q=a(679),J=a(680),X=a(681),K=a(682),Q=a(683),Y=a(684),ee=function(){return ee=Object.assign||function(e){for(var t,a=1,r=arguments.length;a<r;a++)for(var n in t=arguments[a])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},ee.apply(this,arguments)},te=Object(v.a)((function(e){return{root:{},shareIconTitle:{},shareButtons:{margin:e.spacing(1,0),"&>*":{marginRight:e.spacing(1)}},flexGrow:{flexGrow:1},dlgTitle:{color:e.palette.primary.contrastText,backgroundColor:e.palette.primary.main,display:"flex"},closeButton:{flex:"0 0"}}})),ae=function(e){var t=e.open,a=e.shareUrl,r=e.handleClose,n=te();return Object(x.jsxs)(F.a,ee({open:t,onClose:r,"aria-labelledby":"form-dialog-title"},{children:[Object(x.jsxs)(V.a,ee({className:n.dlgTitle,disableTypography:!0},{children:[Object(x.jsx)(E.a,ee({color:"inherit"},{children:Object(x.jsx)(P.a,{className:n.shareIconTitle},void 0)}),void 0),Object(x.jsx)(w.a,ee({variant:"h4",className:n.flexGrow},{children:"Share"}),void 0),Object(x.jsx)("div",ee({className:n.closeButton},{children:Object(x.jsx)(E.a,ee({onClick:r,color:"inherit"},{children:Object(x.jsx)($.a,{},void 0)}),void 0)}),void 0)]}),void 0),Object(x.jsxs)(G.a,{children:[Object(x.jsx)(W.a,{children:"Copy this link and share it using your preferred method."},void 0),Object(x.jsx)(M.a,{value:a,margin:"dense",id:"name",variant:"outlined",fullWidth:!0,inputProps:{onClick:function(e){e.preventDefault(),e.target.select()}}},void 0),Object(x.jsxs)("div",ee({className:n.shareButtons},{children:[Object(x.jsx)(H.a,ee({url:a},{children:Object(x.jsx)(Z.a,{size:32,round:!0},void 0)}),void 0),Object(x.jsx)(q.a,ee({url:a},{children:Object(x.jsx)(J.a,{size:32,round:!0},void 0)}),void 0),Object(x.jsx)(X.a,ee({url:a},{children:Object(x.jsx)(K.a,{size:32,round:!0},void 0)}),void 0),Object(x.jsx)(Q.a,ee({url:a,quote:"title"},{children:Object(x.jsx)(Y.a,{size:32,round:!0},void 0)}),void 0)]}),void 0)]},void 0)]}),void 0)},re=a(206),ne=a(209),oe=a(208),ie=a(207),le=a(685),se=a(686),ce=a(687),de=a(688),pe={tagColors:["#418CF0","#FCB441","#E0400A","#056492","#BFBFBF","#1A3B69","#FFE382","#129CDD","#CA6B4B","#005CDB","#F3D288","#506381","#F1B9A8","#E0830A","#7893BE"]},ue=Object({NODE_ENV:"production",PUBLIC_URL:"/webrave-staging",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0,REACT_APP_VERSION:"0.1.31",REACT_APP_MAPBOX_TOKEN:"pk.eyJ1Ijoibm9ydGhhcnJvd3Jlc2VhcmNoIiwiYSI6ImNrbDhjN25hcTIxZnYyb2xjOXZzaGxoMDcifQ.JlXGE_yO53x3iVlUb4MCLg",REACT_APP_GRAPHQL:"https://w3sczcn3l5.execute-api.us-west-2.amazonaws.com/staging/api",REACT_APP_GOOGLE_ANALYTICS:"UA-60121403-11",REACT_APP_WAREHOUSE_URL:"https://northarrowresearchlabs.github.io/riverscapes-staging/"}).REACT_APP_DOMAIN;h.a.debug("config: ",{domain:ue});var me=!1,ge={mapBoxToken:"pk.eyJ1Ijoibm9ydGhhcnJvd3Jlc2VhcmNoIiwiYSI6ImNrbDhjN25hcTIxZnYyb2xjOXZzaGxoMDcifQ.JlXGE_yO53x3iVlUb4MCLg"},ye="0.1.31",he={graphql:"https://w3sczcn3l5.execute-api.us-west-2.amazonaws.com/staging/api",cdn:Object({NODE_ENV:"production",PUBLIC_URL:"/webrave-staging",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0,REACT_APP_VERSION:"0.1.31",REACT_APP_MAPBOX_TOKEN:"pk.eyJ1Ijoibm9ydGhhcnJvd3Jlc2VhcmNoIiwiYSI6ImNrbDhjN25hcTIxZnYyb2xjOXZzaGxoMDcifQ.JlXGE_yO53x3iVlUb4MCLg",REACT_APP_GRAPHQL:"https://w3sczcn3l5.execute-api.us-west-2.amazonaws.com/staging/api",REACT_APP_GOOGLE_ANALYTICS:"UA-60121403-11",REACT_APP_WAREHOUSE_URL:"https://northarrowresearchlabs.github.io/riverscapes-staging/"}).REACT_APP_CDN},be=[re.a,ne.a,oe.a,ie.a,le.a,se.a,ce.a,de.a],fe=new URL("/webrave-staging".endsWith("/")?"/webrave-staging":"/webrave-staging/",window.location.origin);console.log("RedirectUrl",{redirectUrl:fe,publicUrl:"/webrave-staging"});var xe="UA-60121403-11",je={Auth:{region:Object({NODE_ENV:"production",PUBLIC_URL:"/webrave-staging",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0,REACT_APP_VERSION:"0.1.31",REACT_APP_MAPBOX_TOKEN:"pk.eyJ1Ijoibm9ydGhhcnJvd3Jlc2VhcmNoIiwiYSI6ImNrbDhjN25hcTIxZnYyb2xjOXZzaGxoMDcifQ.JlXGE_yO53x3iVlUb4MCLg",REACT_APP_GRAPHQL:"https://w3sczcn3l5.execute-api.us-west-2.amazonaws.com/staging/api",REACT_APP_GOOGLE_ANALYTICS:"UA-60121403-11",REACT_APP_WAREHOUSE_URL:"https://northarrowresearchlabs.github.io/riverscapes-staging/"}).REACT_APP_AWS_REGION_DEPLOY,userPoolId:Object({NODE_ENV:"production",PUBLIC_URL:"/webrave-staging",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0,REACT_APP_VERSION:"0.1.31",REACT_APP_MAPBOX_TOKEN:"pk.eyJ1Ijoibm9ydGhhcnJvd3Jlc2VhcmNoIiwiYSI6ImNrbDhjN25hcTIxZnYyb2xjOXZzaGxoMDcifQ.JlXGE_yO53x3iVlUb4MCLg",REACT_APP_GRAPHQL:"https://w3sczcn3l5.execute-api.us-west-2.amazonaws.com/staging/api",REACT_APP_GOOGLE_ANALYTICS:"UA-60121403-11",REACT_APP_WAREHOUSE_URL:"https://northarrowresearchlabs.github.io/riverscapes-staging/"}).REACT_APP_AWS_USERPOOLID,userPoolWebClientId:Object({NODE_ENV:"production",PUBLIC_URL:"/webrave-staging",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0,REACT_APP_VERSION:"0.1.31",REACT_APP_MAPBOX_TOKEN:"pk.eyJ1Ijoibm9ydGhhcnJvd3Jlc2VhcmNoIiwiYSI6ImNrbDhjN25hcTIxZnYyb2xjOXZzaGxoMDcifQ.JlXGE_yO53x3iVlUb4MCLg",REACT_APP_GRAPHQL:"https://w3sczcn3l5.execute-api.us-west-2.amazonaws.com/staging/api",REACT_APP_GOOGLE_ANALYTICS:"UA-60121403-11",REACT_APP_WAREHOUSE_URL:"https://northarrowresearchlabs.github.io/riverscapes-staging/"}).REACT_APP_AWS_USERPOOLWEBCLIENTID,mandatorySignIn:!0,oauth:{domain:Object({NODE_ENV:"production",PUBLIC_URL:"/webrave-staging",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0,REACT_APP_VERSION:"0.1.31",REACT_APP_MAPBOX_TOKEN:"pk.eyJ1Ijoibm9ydGhhcnJvd3Jlc2VhcmNoIiwiYSI6ImNrbDhjN25hcTIxZnYyb2xjOXZzaGxoMDcifQ.JlXGE_yO53x3iVlUb4MCLg",REACT_APP_GRAPHQL:"https://w3sczcn3l5.execute-api.us-west-2.amazonaws.com/staging/api",REACT_APP_GOOGLE_ANALYTICS:"UA-60121403-11",REACT_APP_WAREHOUSE_URL:"https://northarrowresearchlabs.github.io/riverscapes-staging/"}).REACT_APP_HOSTED_DOMAIN,scope:["email","profile","openid"],redirectSignIn:fe,redirectSignOut:fe,responseType:"code"}}},we=function(){return we=Object.assign||function(e){for(var t,a=1,r=arguments.length;a<r;a++)for(var n in t=arguments[a])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},we.apply(this,arguments)},ve=Object(v.a)((function(e){var t,a,r,n;return{appBar:{zIndex:e.zIndex.drawer+1},root:{display:"flex",alignItems:"center",width:"100%",padding:e.spacing(0,1),textShadow:"3px 3px 3px rgba(0,0,0,0.7)",backgroundImage:"url(/webrave-staging/HeaderBackground.png)",backgroundRepeat:"no-repeat",backgroundPosition:"0% 50%",backgroundSize:"cover",backgroundColor:"#444444"},logo:{height:40,width:40,marginRight:e.spacing(2)},programChooser:{margin:e.spacing(0,1),color:e.palette.primary.contrastText,"& svg":{color:e.palette.primary.contrastText},"&:before":{borderColor:e.palette.primary.contrastText},"&:after":{borderColor:e.palette.primary.contrastText}},transparent:{backgroundColor:"transparent",background:"none",color:e.palette.text.primary},search:(t={position:"relative",borderRadius:e.shape.borderRadius,backgroundColor:Object(U.a)(e.palette.common.white,.15),"&:hover":{backgroundColor:Object(U.a)(e.palette.common.white,.25)},marginRight:e.spacing(2),marginLeft:0,width:"100%",flexGrow:1},t[e.breakpoints.up("sm")]={marginLeft:e.spacing(3),width:"auto"},t),searchIcon:{width:e.spacing(7),height:"100%",position:"absolute",pointerEvents:"none",display:"flex",alignItems:"center",justifyContent:"center"},inputRoot:{color:"inherit"},spacer:{flexGrow:1},inputInput:(a={padding:e.spacing(1,1,1,7),transition:e.transitions.create("width"),width:"100%"},a[e.breakpoints.up("sm")]={width:200},a),sectionDesktop:(r={display:"none"},r[e.breakpoints.up("sm")]={display:"flex",flexGrow:1},r),sectionMobile:(n={display:"flex",flexGrow:1},n[e.breakpoints.up("sm")]={display:"none"},n)}}));function Oe(e){return(!e.meta||!e.meta.access||"PUBLIC"!==e.meta.access)&&null===e.role}var Se,ke=function(e){var t=e.title,a=e.program,r=e.programs,n=e.signOutHandler,l=e.toolbarItems,s=e.shareUrl,c=e.history,d=ve(),p=Object(o.useState)(!1),u=p[0],m=p[1],g=Object(o.useState)(null),y=g[0],h=g[1],b=function(){return h(null)},f=c&&c.location.pathname.indexOf("/admin")>-1,j=(n||r)&&Object(x.jsxs)(T.a,we({anchorEl:y,anchorOrigin:{vertical:"top",horizontal:"right"},keepMounted:!0,transformOrigin:{vertical:"top",horizontal:"right"},open:!!y,onClose:b},{children:[r&&Object(x.jsx)(_.a,{children:Object(x.jsx)(w.a,we({variant:"overline",onClick:function(){return c.push("/")}},{children:"Programs"}),void 0)},void 0),r&&Object(x.jsx)(k.a,{},void 0),r&&r.length>0&&r.map((function(e,t){return Object(x.jsx)(_.a,we({disabled:a&&a.machineName===e.machineName||Oe(e),onClick:function(){return t=e,b(),void(c&&c.push("/"+t.machineName));var t},value:e.machineName},{children:e.name}),"prog-"+t)})),n&&Object(x.jsx)(k.a,{},void 0),n&&Object(x.jsx)(_.a,we({onClick:n},{children:"Log Out"}),void 0)]}),void 0),v=a&&(a.role===D.WarehouseRoleEnum.Admin||a.role===D.WarehouseRoleEnum.SuperUser);return Object(x.jsxs)(i.a.Fragment,{children:[Object(x.jsx)(S.a,we({position:"static",className:d.appBar},{children:Object(x.jsxs)(O.a,we({className:d.root,disableGutters:!0},{children:[Object(x.jsx)("a",we({href:"http://riverscapes.xyz/"},{children:Object(x.jsx)("img",{className:d.logo,src:"https://riverscapes.xyz/assets/images/RiverscapesLogo.png",alt:"logo"},void 0)}),void 0),a?Object(x.jsxs)("div",{children:[Object(x.jsx)(w.a,we({variant:"subtitle1"},{children:a.name}),void 0),Object(x.jsx)(w.a,we({variant:"caption"},{children:t}),void 0)]},void 0):Object(x.jsx)(w.a,we({variant:"subtitle1"},{children:t}),void 0),Object(x.jsx)("div",{className:d.spacer},void 0),ye&&Object(x.jsxs)(w.a,we({component:"div",className:d.text,color:"inherit",variant:"overline"},{children:["v.",ye]}),void 0),v&&Object(x.jsx)(E.a,we({"aria-haspopup":"true",onClick:function(){c&&a&&(f?c.push("/"+a.machineName):c.push("/"+a.machineName+"/admin"))},color:"inherit"},{children:f?Object(x.jsx)(R.a,{},void 0):Object(x.jsx)(L.a,{},void 0)}),void 0),l,s&&Object(x.jsx)(E.a,we({"aria-haspopup":"true",onClick:function(){return m(!0)},color:"inherit"},{children:Object(x.jsx)(P.a,{},void 0)}),void 0),(n||r)&&Object(x.jsx)(E.a,we({"aria-haspopup":"true",onClick:function(e){return h(e.currentTarget)},color:"inherit"},{children:Object(x.jsx)(A.a,{},void 0)}),void 0)]}),void 0)}),void 0),j,s&&Object(x.jsx)(ae,{open:u,shareUrl:s,handleClose:function(){return m(!1)}},void 0)]},void 0)},_e=a(719),Te=(Object(v.a)((function(e){return{root:{marginLeft:e.spacing(1)/2},tooltip:{maxWidth:220}}})),a(589)),ze=a(691),Pe=a(157),Ce=a.n(Pe),Le=a(113),Ie=a.n(Le),Re=function(){return Re=Object.assign||function(e){for(var t,a=1,r=arguments.length;a<r;a++)for(var n in t=arguments[a])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},Re.apply(this,arguments)},Ee=Object(v.a)((function(){return{root:{"& *":{cursor:"pointer"}},disabledButton:{opacity:.5}}})),Ne=function(e){var t=e.title,a=e.project,r=e.pendingSince,n=e.btnProps,o=e.downloadZipFile,l=Ee(),s=Object(x.jsx)(_e.a,Re({title:Object(x.jsxs)(i.a.Fragment,{children:[Object(x.jsx)(w.a,Re({variant:"body1"},{children:"Download Project Zip"}),void 0),Object(x.jsx)(w.a,Re({variant:"caption",paragraph:!0},{children:"Click to download this project as a single zip file"}),void 0),Object(x.jsx)(w.a,Re({variant:"caption",paragraph:!0},{children:"There may be a delay if the zip file needs to be built."}),void 0)]},void 0)},{children:t?Object(x.jsx)(Te.a,Re({variant:"contained",color:"primary",onClick:function(e){e.preventDefault(),e.stopPropagation(),o(a)},startIcon:Object(x.jsx)(Ce.a,{},void 0)},n,{children:t||"ZIP"}),void 0):Object(x.jsx)(E.a,Re({color:"primary",onClick:function(e){e.preventDefault(),e.stopPropagation(),o(a)}},n,{children:Object(x.jsx)(Ce.a,{},void 0)}),void 0)}),void 0);return r&&(s=Object(x.jsx)(_e.a,Re({title:Object(x.jsxs)(i.a.Fragment,{children:[Object(x.jsx)(w.a,Re({variant:"body1"},{children:"Preparing Zip"}),void 0),Object(x.jsx)(w.a,Re({variant:"caption",paragraph:!0},{children:"The warehouse is building your zip file for you."}),void 0),Object(x.jsxs)(w.a,Re({variant:"caption",paragraph:!0},{children:["started ",Ie()(r,"x").fromNow()]}),void 0)]},void 0)},{children:Object(x.jsx)(Te.a,Re({variant:"outlined",disableFocusRipple:!0,disableRipple:!0,disableTouchRipple:!0,color:"primary",onClick:function(e){e.preventDefault(),e.stopPropagation()},className:l.disabledButton,startIcon:Object(x.jsx)(ze.a,{color:n&&n.color&&"secondary"===n.color?"primary":"secondary",size:24,thickness:6},void 0)},n,{children:t||"ZIP"}),void 0)}),void 0)),Object(x.jsx)("div",Re({className:l.root},{children:s}),void 0)},Ae=function(){return Ae=Object.assign||function(e){for(var t,a=1,r=arguments.length;a<r;a++)for(var n in t=arguments[a])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},Ae.apply(this,arguments)},De=Object(v.a)((function(e){return{root:{},whBtnLogo:{height:20,width:20,marginRight:e.spacing(1)},whButton:{maxWidth:300}}})),Ue=function(e){var t=e.title,a=e.href,r=e.stay,o=De();return Object(x.jsxs)(Te.a,Ae({className:o.whButton,target:r?void 0:"_blank",variant:"contained",href:a,onClick:function(){n.event("webrave","open_warehouse","open_warehouse")},color:"secondary",fullWidth:!0},{children:[Object(x.jsx)("img",{className:o.whBtnLogo,src:"https://riverscapes.xyz/assets/images/RiverscapesLogo.png",alt:"logo"},void 0),t]}),void 0)},Me=(a(249),Object(v.a)((function(){return{root:{"& *":{cursor:"pointer"}},disabledButton:{opacity:.5}}})),a(378)),Fe=a(721),Be=a(676),$e=(a(720),a(591)),Ge=a(693),We=a(692),Ve=(a(344),a(7)),He=a(205),Ze=((Se={})[D.WarehouseRoleEnum.SuperUser]=He.a,Se[D.WarehouseRoleEnum.Admin]=re.a,Se[D.WarehouseRoleEnum.Participant]=ce.a,Se[D.WarehouseRoleEnum.Observer]=oe.a,Se),qe=function(){return qe=Object.assign||function(e){for(var t,a=1,r=arguments.length;a<r;a++)for(var n in t=arguments[a])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},qe.apply(this,arguments)};Object(v.a)((function(e){return{rootContainer:{height:"100%",display:"flex",flexDirection:"column"},spacer:{flexGrow:1},root:{padding:e.spacing(2,4,4,4)},logoContainer:{padding:e.spacing(2),textAlign:"center"},logo:{},accessChip:qe({},Object.keys(Ze).reduce((function(t,a){var r;return qe(qe({},t),((r={})["&.access_"+a]={color:e.palette.getContrastText(Ze[a][500]),background:Ze[a][500]},r))}),{}))}}));var Je=a(695),Xe=(a(694),a(675),a(191)),Ke=a.n(Xe),Qe=(a(345),a(346),a(347),a(696)),Ye=a(134),et=a.n(Ye),tt=a(135),at=a.n(tt),rt=(a(189),a(724)),nt=(Object(v.a)((function(e){return{treeItemRoot:{backgroundColor:e.palette.background.paper,"&:nth-child(odd)":{backgroundColor:e.palette.background.default}},treeItemContainer:{display:"flex"},treeItemText:{marginLeft:e.spacing(1),padding:e.spacing(1),flexGrow:1},treeItemIcon:{},treeFile:{},treeFileContent:{borderBottom:"1px solid "+e.palette.grey[100]},treeFolder:{},treeFolderContent:{},treeFolderText:{padding:e.spacing(1)},allowSelect:{"&,& *":{userSelect:"text",cursor:"auto"}}}})),Object(v.a)((function(e){return{root:{margin:0,padding:e.spacing(2)},allowSelect:{"&,& *":{userSelect:"text",cursor:"auto"}},scrollPaper:{alignItems:"baseline"},name:{maxWidth:"95%",whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis",marginBottom:e.spacing(1)},titlebar:{backgroundColor:"#444444",color:e.palette.primary.contrastText,display:"flex"},titlebarLeft:{flexGrow:1},header:{display:"flex"},headerLeft:{flex:"1 1 80%"},headerRight:{textAlign:"right",flex:"1 0"},flexGrow:{flexGrow:1},closeButton:{flex:"0 0",color:e.palette.grey[500]},normalIcon:{},documentIcon:{color:re.a[500]},photoIcon:{color:le.a[500]},TerrainIcon:{color:ne.a[500]},metaDisplay:{display:"flex",flexFlow:"wrap"},title:{marginTop:e.spacing(2)},treeItemContainer:{display:"flex"},treeItemText:{marginLeft:e.spacing(1),flexGrow:1},treeItemIcon:{},treeFileContent:{borderBottom:"1px solid "+e.palette.grey[100],padding:e.spacing(1)},treeFolder:{},treeFolderContent:{padding:e.spacing(1)},metaDisplayItem:{flex:"1 1",borderRadius:e.spacing(1),backgroundColor:"#fafafa",margin:e.spacing(1,.5),border:"#1px solid #e7e7e7",padding:e.spacing(1),maxWidth:"25%",minWidth:150,"&>*":{whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis"}},prodChip:{marginLeft:e.spacing(1),backgroundColor:e.palette.primary.light,color:"white"},popOver:{padding:e.spacing(2)},subHeader:{width:"100%",display:"flex"}}})),a(348)),ot=a.n(nt),it=function(){return it=Object.assign||function(e){for(var t,a=1,r=arguments.length;a<r;a++)for(var n in t=arguments[a])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},it.apply(this,arguments)},lt=Object(v.a)((function(e){return{rootContainer:{height:"100%",display:"flex",flexDirection:"column"},spacer:{flexGrow:1},root:{padding:e.spacing(2,4,4,4)},logoContainer:{padding:e.spacing(2),textAlign:"center"},logo:{}}})),st=function(e){var t=e.title,a=e.signIn,r=lt();return Object(x.jsxs)(j.a,it({className:r.rootContainer,maxWidth:"md"},{children:[Object(x.jsx)("div",{className:r.spacer},void 0),Object(x.jsxs)(Me.a,it({className:r.root},{children:[Object(x.jsx)("div",it({className:r.logoContainer},{children:Object(x.jsx)("img",{className:r.logo,src:"/webrave-staging/RiverscapesLogo.png",alt:"logo"},void 0)}),void 0),Object(x.jsxs)(w.a,it({paragraph:!0,variant:"body1"},{children:["Welcome to ",Object(x.jsx)("strong",{children:t},void 0),". Please click the button below to log in."]}),void 0),Object(x.jsx)(w.a,it({paragraph:!0,variant:"body1"},{children:"If you don't have an account you will be prompted to use your Google account or create a new account using another email address."}),void 0),Object(x.jsx)(Te.a,it({variant:"contained",onClick:a,color:"primary",fullWidth:!0,size:"large",startIcon:Object(x.jsx)(ot.a,{},void 0)},{children:"Sign In"}),void 0)]}),void 0),Object(x.jsx)("div",{className:r.spacer},void 0)]}),void 0)},ct=a(697),dt=a(349),pt=a.n(dt),ut=function(){return ut=Object.assign||function(e){for(var t,a=1,r=arguments.length;a<r;a++)for(var n in t=arguments[a])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},ut.apply(this,arguments)},mt=Object(v.a)((function(e){return{root:{marginLeft:e.spacing(1)},titlebar:{display:"flex",background:e.palette.error.main,color:e.palette.error.contrastText},closeButton:{},name:{paddingLeft:e.spacing(1),flexGrow:1}}})),gt=function(e){var t=e.onClose,a=e.program,r=mt();return Object(x.jsxs)(F.a,ut({onClose:t,open:!0,maxWidth:"xs",fullWidth:!0,className:r.root,classes:{}},{children:[Object(x.jsxs)(V.a,ut({disableTypography:!0,className:r.titlebar},{children:[Object(x.jsx)(pt.a,{color:"inherit"},void 0),Object(x.jsx)(w.a,ut({className:r.name},{children:"Access Denied"}),void 0)]}),void 0),Object(x.jsx)(G.a,ut({dividers:!0},{children:a?Object(x.jsxs)(w.a,ut({variant:"body1",component:"div",color:"inherit"},{children:["You don't have access to the program ",Object(x.jsx)("strong",{children:a.name},void 0),".","If you arrived here via URL you will be able to use the URL ","again once you have access."]}),void 0):Object(x.jsx)(w.a,ut({variant:"body1",component:"div",color:"inherit"},{children:"This URL is not valid. If you arrived here via URL you will be able to use the URL again once you have access."}),void 0)}),void 0),Object(x.jsx)(ct.a,{children:Object(x.jsx)(Te.a,ut({onClick:t,color:"primary"},{children:"Back"}),void 0)},void 0)]}),void 0)},yt=a(93),ht=a.n(yt),bt=function(){return bt=Object.assign||function(e){for(var t,a=1,r=arguments.length;a<r;a++)for(var n in t=arguments[a])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},bt.apply(this,arguments)},ft=function(e,t,a,r){return new(a||(a=Promise))((function(n,o){function i(e){try{s(r.next(e))}catch(t){o(t)}}function l(e){try{s(r.throw(e))}catch(t){o(t)}}function s(e){var t;e.done?n(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(i,l)}s((r=r.apply(e,t||[])).next())}))},xt=function(e,t){var a,r,n,o,i={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},"function"===typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(a)throw new TypeError("Generator is already executing.");for(;i;)try{if(a=1,r&&(n=2&o[0]?r.return:o[0]?r.throw||((n=r.return)&&n.call(r),0):r.next)&&!(n=n.call(r,o[1])).done)return n;switch(r=0,n&&(o=[2&o[0],n.value]),o[0]){case 0:case 1:n=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(n=(n=i.trys).length>0&&n[n.length-1])&&(6===o[0]||2===o[0])){i=0;continue}if(3===o[0]&&(!n||o[1]>n[0]&&o[1]<n[3])){i.label=o[1];break}if(6===o[0]&&i.label<n[1]){i.label=n[1],n=o;break}if(n&&i.label<n[2]){i.label=n[2],i.ops.push(o);break}n[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(l){o=[6,l],r=0}finally{a=n=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}},jt=function(e,t){return"_"+e+"_"+t},wt=function(e,t){return!e||e<Date.now()-1e3*t},vt=function(e){return ft(void 0,void 0,void 0,(function(){return xt(this,(function(t){switch(t.label){case 0:return[4,ht.a.keys()];case 1:return[2,t.sent().filter((function(t){return 0===t.indexOf("_"+e+"_")}))]}}))}))},Ot=function(e,t){var a=this;this.prune=function(){return ft(a,void 0,void 0,(function(){var e,t,a,r;return xt(this,(function(n){switch(n.label){case 0:return h.a.debug("["+this.ns+"]LocalForageClass PRUNE"),[4,vt(this.ns)];case 1:e=n.sent(),t=0,n.label=2;case 2:return t<e.length?(a=e[t],[4,ht.a.getItem(a)]):[3,6];case 3:return r=n.sent(),wt(null===r||void 0===r?void 0:r.ts,this.ttl)?(h.a.debug("["+this.ns+"]LocalForageClass Prune Expired. Deleting: "+a),[4,ht.a.removeItem(a)]):[3,5];case 4:n.sent(),n.label=5;case 5:return t++,[3,2];case 6:return[2]}}))}))},this.get=function(e,t){return void 0===t&&(t=!1),ft(a,void 0,void 0,(function(){var a,r;return xt(this,(function(n){switch(n.label){case 0:return a=jt(this.ns,e),[4,ht.a.getItem(a).catch((function(e){h.a.error("LocalForageClass ERROR",e)}))];case 1:return(r=n.sent())&&r.v&&r.ts?wt(r.ts,this.ttl)?(h.a.debug("["+this.ns+"]LocalForageClass Get Expired. Deleting: "+e),[4,ht.a.removeItem(a)]):[3,3]:[3,7];case 2:return n.sent(),[2,null];case 3:return h.a.debug("["+this.ns+"]LocalForageClass HIT: "+e),!0!==t?[3,5]:[4,ht.a.setItem(a,bt(bt({},r),{ts:Date.now()}))];case 4:n.sent(),n.label=5;case 5:return[2,r.v];case 6:return[3,8];case 7:return[2,null];case 8:return[2]}}))}))},this.set=function(e,t){var r=jt(a.ns,e),n={ts:Date.now(),v:t};return ht.a.setItem(r,n).then((function(){h.a.debug("["+a.ns+"]LocalForageClass Set: "+e)}))},this.del=function(e){return h.a.debug("["+a.ns+"]LocalForageClass Deleting: "+e),ht.a.removeItem(jt(a.ns,e)).catch((function(e){})).then()},this.clear=function(){return ft(a,void 0,void 0,(function(){var e,t;return xt(this,(function(a){switch(a.label){case 0:return h.a.debug("["+this.ns+"]LocalForageClass clear"),[4,vt(this.ns)];case 1:for(e=a.sent(),t=0;t<e.length;t++)ht.a.removeItem(e[t]);return[2]}}))}))},this.ns=e,this.ttl=t},St=a(39),kt=a.n(St),_t=function(){return _t=Object.assign||function(e){for(var t,a=1,r=arguments.length;a<r;a++)for(var n in t=arguments[a])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},_t.apply(this,arguments)},Tt=function(e,t,a,r){return new(a||(a=Promise))((function(n,o){function i(e){try{s(r.next(e))}catch(t){o(t)}}function l(e){try{s(r.throw(e))}catch(t){o(t)}}function s(e){var t;e.done?n(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(i,l)}s((r=r.apply(e,t||[])).next())}))},zt=function(e,t){var a,r,n,o,i={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},"function"===typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(a)throw new TypeError("Generator is already executing.");for(;i;)try{if(a=1,r&&(n=2&o[0]?r.return:o[0]?r.throw||((n=r.return)&&n.call(r),0):r.next)&&!(n=n.call(r,o[1])).done)return n;switch(r=0,n&&(o=[2&o[0],n.value]),o[0]){case 0:case 1:n=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(n=(n=i.trys).length>0&&n[n.length-1])&&(6===o[0]||2===o[0])){i=0;continue}if(3===o[0]&&(!n||o[1]>n[0]&&o[1]<n[3])){i.label=o[1];break}if(6===o[0]&&i.label<n[1]){i.label=n[1],n=o;break}if(n&&i.label<n[2]){i.label=n[2],i.ops.push(o);break}n[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(l){o=[6,l],r=0}finally{a=n=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}},Pt=function(e,t){var a=Object(o.useState)({}),r=a[0],n=a[1],i=Object(o.useRef)();i.current=r;var l=Object(o.useCallback)((function(a,r){return Tt(void 0,void 0,void 0,(function(){var n,o,i;return zt(this,(function(l){switch(l.label){case 0:if(!t)return[2,Promise.resolve()];l.label=1;case 1:return l.trys.push([1,4,,5]),[4,e.getCurrentToken()];case 2:return n=l.sent(),[4,Object(D.downloadFile)(he.graphql,n,a.projType,t.machineName,a.id,r)];case 3:o=l.sent();try{o.data&&window.open(o.data.downloadFile.downloadUrl,"_self")}catch(s){h.a.error("DOWNLOAD err",s)}return[3,5];case 4:return i=l.sent(),h.a.error("DOWNLOAD err",i),[3,5];case 5:return[2]}}))}))}),[t,e]),s=Object(o.useCallback)((function(a){if(!t)return Promise.resolve();return function r(){return e.getCurrentToken().then((function(e){return Object(D.downloadZipFile)(he.graphql,e,a.projType,t.machineName,a.id)})).then((function(e){var t;try{e.data&&!e.data.downloadZip.pendingSince?(n(kt.a.pickBy(i.current,(function(e,t){return t!==a.id}))),window.open(e.data.downloadZip.downloadUrl,"_self")):(n(_t(_t({},i.current),((t={})[a.id]=e.data?e.data.downloadZip.pendingSince:Date.now(),t))),setTimeout(r,5e3))}catch(o){h.a.error("DOWNLOAD err",o)}})).catch((function(e){h.a.error("DOWNLOAD err",e)}))}()}),[t,e]);return{pendingZips:i.current,downloadFileFn:l,downloadZipFile:s}},Ct=function(){return Ct=Object.assign||function(e){for(var t,a=1,r=arguments.length;a<r;a++)for(var n in t=arguments[a])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},Ct.apply(this,arguments)},Lt={loading:!1,initialized:!1},It=function(e,t,a,r){void 0===a&&(a=!1),void 0===r&&(r=!1);var n=Object(g.f)().projectId,i=Object(o.useState)(Lt),l=i[0],s=i[1],c=Object(o.useRef)(Lt);c.current=l;var d=Object(o.useRef)(!1);return Object(o.useEffect)((function(){if(!n||n.length<2)s(Lt);else try{if(!t||!n)return;if(n&&l.project&&n===l.project.id)return;var o=t.machineName;setTimeout((function(){d.current||l.project||s(Ct(Ct({},c.current),{loading:!0}))}),500),e.getCurrentToken().then((function(e){return Object(D.getProject)(he.graphql,e,n,o,a,r)})).then((function(e){var t;d.current=!0,h.a.debug("getProjectById::Response",e),e.data&&e.data.project&&c.current&&c.current.project&&(null===(t=c.current)||void 0===t?void 0:t.project.id)===e.data.project.id||(e.data?s({project:e.data.project,loading:!1,initialized:!0}):s({project:void 0,loading:!1,initialized:!0}))})).catch((function(e){d.current=!0,s({project:void 0,loading:!1,initialized:!0}),h.a.error("api.getProjectById error",e)}))}catch(i){return}}),[n,t,e]),l},Rt=(a(251),a(92)),Et=Object(Rt.a)();var Nt=a(373),At=a(204),Dt=function(){return Dt=Object.assign||function(e){for(var t,a=1,r=arguments.length;a<r;a++)for(var n in t=arguments[a])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},Dt.apply(this,arguments)},Ut={palette:{primary:{main:At.a[500]},secondary:{main:ie.a[600],contrastText:"#FFFFFF"},text:{}}},Mt=Dt(Dt({},Ut),{palette:Dt(Dt({},Ut.palette),{type:"dark"})}),Ft={home:Object(Nt.a)(Ut),homeDark:Object(Nt.a)(Mt)},Bt=a(212),$t=function(){xe?Bt.a.initialize(xe,{titleCase:!1}):h.a.error("Google Analytics: no UA- code found")},Gt=function(){Bt.a.pageview(window.location.pathname+window.location.hash)},Wt=function(e,t,a){Bt.a.event({category:e,action:t,label:a})},Vt=function(e){var t=e.title,a=e.children,r=e.history,n=e.signOut,o=e.containerProps;return Object(x.jsx)(b.a,{theme:Ft.home,children:Object(x.jsx)(f.a,{containerProps:Object(p.a)({maxWidth:"md"},o),noScroll:!0,fullWidth:!0,topbar:Object(x.jsx)(ke,{history:r,title:t,signOutHandler:n,shareUrl:window.location.href}),children:Object(x.jsx)(x.Fragment,{children:a})})})},Ht=function(e){var t=e.title;return Object(x.jsx)(f.b,{logoSVG:Object(x.jsx)(ze.a,{size:"7rem",thickness:7}),status:Object(x.jsx)(w.a,{variant:"h5",component:"div",children:t||"Loading..."}),containerProps:{maxWidth:"xl",style:{position:"absolute",zIndex:1e3,top:0,left:0,width:"100%",height:"100%",background:"#FFFFFF77"}}})},Zt=a(13),qt=a(26),Jt=a(351),Xt=a(352),Kt=a(353),Qt=a(53);a(252);function Yt(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=Math.max(0,Math.min(100,e));return 1-t/100}function ea(e,t){var a=xa.zoomRange;return e||t?t?[e?e[0]:xa.zoomRange[0],Math.min(xa.zoomRange[1],Math.max(e[1],t[1]||e[1]))]:e:a}var ta=[D.ProjectTreeLayerTypes.POINT,D.ProjectTreeLayerTypes.LINE,D.ProjectTreeLayerTypes.POLYGON,D.ProjectTreeLayerTypes.TIN,D.ProjectTreeLayerTypes.RASTER];function aa(e,t){var a,r={minzoom:(null===t||void 0===t?void 0:t.minZoom)||0,maxzoom:24,layout:{}};if(null===t||void 0===t||null===(a=t.rsLayer)||void 0===a?void 0:a.subLayers){var n=t.rsLayer.subLayers.find((function(t){return t.id===e}));r["source-layer"]=n.path}else{var o;r["source-layer"]=null===t||void 0===t||null===(o=t.rsLayer)||void 0===o?void 0:o.id}return r}var ra,na={line:function(e,t,a){return Object(p.a)(Object(p.a)({},aa(e.layerId,a)),{},{type:"line",paint:{"line-color":t[500],"line-opacity":Yt(e.transparency)}})},point:function(e,t,a){return Object(p.a)(Object(p.a)({},aa(e.layerId,a)),{},{type:"circle",paint:{"circle-stroke-opacity":1,"circle-stroke-width":2,"circle-stroke-color":t[500],"circle-opacity":Yt(e.transparency),"circle-radius":4,"circle-color":t[700]}})},polygon:function(e,t,a){return Object(p.a)(Object(p.a)({},aa(e.layerId,a)),{},{type:"fill",paint:{"fill-opacity":Yt(e.transparency),"fill-color":t[700]}})},outline:function(e,t,a){return Object(p.a)(Object(p.a)({},aa(e.layerId,a)),{},{type:"line",paint:{"line-color":t[500],"line-opacity":Yt(e.transparency)}})}};!function(e){e.bgLayer="BGL",e.userContent="USRLYR",e.bgSource="BGSRC",e.layerSource="SRC"}(ra||(ra={}));var oa=function(e,t){return"".concat(ra.layerSource,"_").concat(e||"NOPATH","_").concat(t||"SRC")},ia=function(e,t){var a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return"".concat(ra.userContent,"_").concat(e||"UNKNOWN","_").concat(t||"NOSYMB","_").concat(a)},la=function(e){return Boolean(e&&e.isStyleLoaded())},sa=function(e,t){return e.getStyle().layers.filter((function(e){var a=e.metadata;return Object(St.isUndefined)(t)||a.mType===t})).map((function(e){return e.id}))},ca=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return{mType:e,mIdx:t,mRef:a}};function da(e,t){if(!la(e))return!1;var a=e,r=Date.now(),n=[],o=null;return t.slice().reverse().forEach((function(e){var t,r,i=e.leaf.layerType===D.ProjectTreeLayerTypes.RASTER?oa(e.leaf.layerPath,e.leaf.symbology):oa(e.leaf.layerPath);if(a.getSource(i)||(a=e.leaf.layerType===D.ProjectTreeLayerTypes.RASTER?a.addSource(i,(t=e.tiles,r=e.leaf.symbology,{type:"raster",scheme:"tms",maxzoom:t.maxZoom||20,minzoom:t.minZoom||4,tiles:["".concat(t.url).concat(r||"raster","/{z}/{x}/{y}.").concat(t.format||"png")]})):a.addSource(i,function(e){return{type:"vector",maxzoom:e.maxZoom||20,minzoom:e.minZoom||4,tiles:["".concat(e.url,"{z}/{x}/{y}.").concat(e.format||"pbf")]}}(e.tiles))),e.leaf.layerType===D.ProjectTreeLayerTypes.RASTER){var l=ia(e.leaf.layerPath,e.leaf.symbology);n.push(l),a.getLayer(l)||(h.a.debug('MM: Adding raster layer "'.concat(l,'" before "').concat(o,'"')),a=a.addLayer(Object(p.a)(Object(p.a)({},function(e,t,a){var r,n={type:"raster",id:t,source:a,minzoom:(null===(r=e.tiles)||void 0===r?void 0:r.minZoom)||0,maxzoom:24,layout:{},paint:{}};e.leaf.transparency&&e.leaf.transparency>0&&(n.paint["raster-opacity"]=Yt(e.leaf.transparency));return n}(e,l,i)),{},{metadata:ca(ra.userContent,void 0,"".concat(e.leaf.layerPath,"/").concat(e.leaf.symbology))}),o),o=l)}else{var s,c=(null===(s=e.symbology)||void 0===s?void 0:s.mapboxJson)||[];if((!c||0===c.length)&&null!==e.randomColor){var d=wa[e.randomColor];switch(e.leaf.layerType){case D.ProjectTreeLayerTypes.LINE:c=[na.line(e.leaf,d,e.tiles)];break;case D.ProjectTreeLayerTypes.POLYGON:c=[na.polygon(e.leaf,d,null===e||void 0===e?void 0:e.tiles),na.outline(e.leaf,d,null===e||void 0===e?void 0:e.tiles)];break;case D.ProjectTreeLayerTypes.POINT:c=[na.line(e.leaf,d,e.tiles)]}}c.forEach((function(t,r){var l=ia(e.leaf.layerPath,e.leaf.symbology,r);n.push(l),a.getLayer(l)?h.a.debug('MM: Already found "'.concat(l,'" in the map')):(h.a.debug('MM: Adding vector sublayer "'.concat(l,'" before "').concat(o,'"')),a=a.addLayer(Object(p.a)(Object(p.a)({},function(e,t,a,r){var n;return Object(p.a)(Object(p.a)({type:"fill",minzoom:(null===(n=e.tiles)||void 0===n?void 0:n.minZoom)||0,maxzoom:24,layout:{},paint:{}},t),{},{id:a,source:r,"source-layer":e.leaf.layerName||e.leaf.layerId})}(e,t,l,i)),{},{metadata:ca(ra.userContent,r,"".concat(e.leaf.layerPath,"/").concat(e.leaf.symbology))}),o),o=l)}))}})),sa(a,ra.userContent).forEach((function(e){n.indexOf(e)<0&&(h.a.debug("MM: Removing unused layer: ".concat(e),{validLayerIds:n}),a=a.removeLayer(e))})),h.a.debug("userLayerRecalc took ".concat(Date.now()-r," ms")),!0}function pa(e,t){if(!t.sources)return{sources:{},layers:[]};var a=t.sources||{},r=t.layers||[],n=t.glyphs,o=t.sprite,i={};return{sources:Object.keys(t.sources).reduce((function(t,r){var n="".concat(ra.bgSource,"_").concat(e,"_").concat(r),o=a[r];return i[r]=n,Object(p.a)(Object(p.a)({},t),{},Object(Qt.a)({},n,o))}),{}),layers:r.map((function(e,t){var a="custom"!==e.type&&e.metadata||{},r=Object(p.a)(Object(p.a)({},e),{},{metadata:Object(p.a)(Object(p.a)({},a),ca(ra.bgLayer,t)),id:"".concat(ra.bgLayer,"_").concat(t,"_").concat(e.id)});return"background"!==r.type&&"circle"!==r.type&&"custom"!==r.type&&r.source&&"string"===typeof r.type&&(r.source=i[r.source.toString()]),r})),glyphs:n,sprite:o}}var ua=a(700),ma=a(701),ga=a(702),ya=[Object(p.a)({id:"SATELLITE",title:"Satellite Imagery",toolTip:"Satellite Imagery",Icon:ua.a,color:"green"},pa("SAT",Jt)),Object(p.a)({id:"STREET",title:"Street Map",toolTip:"Street Map",Icon:ma.a,color:"blue"},pa("ST",Xt)),Object(p.a)({id:"HILLSHADE",title:"Hillshade",toolTip:"Hillshade",Icon:ga.a,color:"blue"},pa("HS",Kt))],ha=Object({NODE_ENV:"production",PUBLIC_URL:"/webrave-staging",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0,REACT_APP_VERSION:"0.1.31",REACT_APP_MAPBOX_TOKEN:"pk.eyJ1Ijoibm9ydGhhcnJvd3Jlc2VhcmNoIiwiYSI6ImNrbDhjN25hcTIxZnYyb2xjOXZzaGxoMDcifQ.JlXGE_yO53x3iVlUb4MCLg",REACT_APP_GRAPHQL:"https://w3sczcn3l5.execute-api.us-west-2.amazonaws.com/staging/api",REACT_APP_GOOGLE_ANALYTICS:"UA-60121403-11",REACT_APP_WAREHOUSE_URL:"https://northarrowresearchlabs.github.io/riverscapes-staging/"}).REACT_APP_DOMAIN;h.a.debug("config: ",{domain:ha});var ba={graphql:"".concat("https://w3sczcn3l5.execute-api.us-west-2.amazonaws.com/staging/api")},fa="https://northarrowresearchlabs.github.io/riverscapes-staging/",xa={appName:"Riverscapes Project Viewer (webRAVE)",zoomRange:[4,18],apiTimeout:2e4,defaultViewport:{zoom:8},worldBounds:[-131.044921875,22.998851594142913,-58.095703125,51.28940590271679],baseLayer:ya[0],drawerOpen:!0,init:!1,minFilterTextLength:3,maxMapLayers:5,retryDelayS:2,refreshDelayS:20},ja={version:8,name:"WebRaveStyle",sprite:"mapbox://sprites/northarrowresearch/ckmuw9x2e5f0417pe3vy7y0cz/55jsegcrpjhdm8ibxtin56tly",glyphs:"mapbox://fonts/northarrowresearch/{fontstack}/{range}.pbf"},wa=(re.a,ne.a,oe.a,ie.a,le.a,se.a,ce.a,de.a,[re.a,ne.a,oe.a,ie.a,le.a,se.a,ce.a,de.a]),va=new URL("/webrave-staging".endsWith("/")?"/webrave-staging":"/webrave-staging/",window.location.origin);console.log("RedirectUrl",{redirectUrl:va,publicUrl:"/webrave-staging"});var Oa=Object(Zt.b)({key:"project",default:null}),Sa=Object(Zt.b)({key:"auth",default:null}),ka=Object(Zt.b)({key:"drawerOpen",default:xa.drawerOpen}),_a=Object(Zt.b)({key:"map/activeLayerIds",default:[]}),Ta=Object(Zt.e)({key:"activeTreeLeaves",get:function(e){var t=e.get,a=t(Oa),r=t(_a);return(null===a||void 0===a?void 0:a.tree.leaves.filter((function(e){return r.indexOf(e.id)>-1})))||[]}}),za=Object(Zt.e)({key:"map/activeLeavesSorted",get:function(e){return function(e){var t=Object(qt.a)(e);return t.sort((function(e,t){return e.layerType!==t.layerType?ta.indexOf(e.layerType)-ta.indexOf(t.layerType):e.id-t.id})),t}((0,e.get)(Ta))}}),Pa=Object(Zt.e)({key:"project/mapLayerLeaves",get:function(e){var t=(0,e.get)(Oa);return t?t.tree.leaves.filter((function(e){var t=e.layerType,a=e.layerPath,r=e.nodeExists;return D.ProjectTreeLayerTileTypes.indexOf(t)>-1&&r&&a&&a.length>0})):[]}}),Ca=Object(Zt.e)({key:"project/layerPaths",get:function(e){return(0,e.get)(Pa).reduce((function(e,t){return!t.layerPath||e.indexOf(t.layerPath)>-1?e:[].concat(Object(qt.a)(e),[t.layerPath])}),[])}}),La=Object(Zt.b)({key:"treeFilterText",default:""}),Ia=Object(Zt.e)({key:"projectLeafHierarchy",get:function(e){var t=(0,e.get)(Oa);return t?t.tree.leaves.reduce((function(e,a){return Object(p.a)(Object(p.a)({},e),{},Object(Qt.a)({},a.id,function(e,t){for(var a=t.pid,r=[],n=[];a>-1&&r.length<e.tree.branches.length;){var o=e.tree.branches.find((function(e){return e.bid===a}));o&&r.indexOf(o.bid)<0?(r.push(o.bid),n.push(o.label.toLowerCase().trim()),a=o.pid):a=-1}return r.map((function(e,t){return[e,n[t]]}))}(t,a)))}),{}):{}}}),Ra=Object(Zt.b)({key:"tree/treeInfoPaneId",default:null}),Ea=Object(Zt.b)({key:"tree/treeInfoPaneOpen",default:!1}),Na=Object(Zt.f)({key:"treeLeafSelectorFamily",get:function(e){return function(t){var a=(0,t.get)(Oa);if(!a)throw new Error("treeLeafSelectorFamily: No project found");var r=a.tree.leaves.find((function(t){return t.id===e}));if(!r)throw new Error("treeLeafSelectorFamily: No leaf found");return r}}}),Aa=Object(Zt.b)({key:"tree/selectedIds",default:[]}),Da=Object(Zt.e)({key:"tree/selectedIdsSelect",get:function(e){var t,a=(0,e.get)(Aa);return{branches:(t=a).filter((function(e){return e.indexOf("b-")>-1})).map((function(e){return parseInt(e.replace("b-",""),10)})),leaves:t.filter((function(e){return e.indexOf("l-")>-1})).map((function(e){return parseInt(e.replace("l-",""),10)}))}}}),Ua=Object(Zt.e)({key:"projectHiddenNodes",get:function(e){var t=e.get,a=t(Oa),r={branches:[],leaves:[]};if(!a)return r;var n=t(Ia),o=t(La).toLowerCase().trim();if(o.length<xa.minFilterTextLength)return r;var i=o.split(" ").filter((function(e){return e.length>0}));if(i.length<1)return r;var l=a.tree.leaves.filter((function(e){var t=n[e.id];return i.every((function(a){return e.label.toLowerCase().indexOf(a)>-1||t.find((function(e){return Object(m.a)(e,2)[1].indexOf(a)>-1}))}))})).map((function(e){return e.id})),s=Array.from(new Set(l.reduce((function(e,t){return[].concat(Object(qt.a)(e),Object(qt.a)(n[t].map((function(e){return Object(m.a)(e,1)[0]}))))}),[])));return r.leaves=a.tree.leaves.map((function(e){return e.id})).filter((function(e){return l.indexOf(e)<0})),r.branches=a.tree.branches.map((function(e){return e.bid})).filter((function(e){return s.indexOf(e)<0})),r}}),Ma=Object(Zt.f)({key:"treeLeafStateFamily",get:function(e){return function(t){var a,r=t.get,n=r(ir(e)),o=r(Ua).leaves.indexOf(e)>-1,i=r(_a).indexOf(e)>-1,l=n.leaf.layerType===D.ProjectTreeLayerTypes.REPORT&&n.tileStatus===D.TilingStatus.SUCCESS&&(null===(a=n.tiles)||void 0===a?void 0:a.url)+"index.html";return{leaf:n.leaf,tilesState:n.tileStatus,treeAllowed:!0,reportUrl:l||void 0,renderable:n.renderable,hidden:o,active:i}}}}),Fa=Object(Zt.e)({key:"tree/rootBranchId",get:function(e){var t=(0,e.get)(Oa),a=null===t||void 0===t?void 0:t.tree.branches.find((function(e){return-1===e.pid}));return a?a.bid:null}}),Ba=Object(Zt.f)({key:"tree/branches",get:function(e){return function(t){var a=(0,t.get)(Oa),r=null===a||void 0===a?void 0:a.tree.branches.find((function(t){return t.bid===e}));if(!a)throw new Error("treeBranchSelectorFamily: No project found");if(!r)throw new Error("treeBranchSelectorFamily: No branch found");return{branch:r,children:{branches:a.tree.branches.filter((function(t){return t.pid===e})).map((function(e){return e.bid})),leaves:a.tree.leaves.filter((function(t){return t.pid===e})).map((function(e){return e.id}))}}}}}),$a=Object(Zt.f)({key:"tree/branchState",get:function(e){return function(t){var a=t.get,r=a(Da),n=a(Ba(e)),o=a(Ua),i=Boolean(a(Va).indexOf(e)>-1),l=Boolean(r.branches.indexOf(e)>-1);return{branch:n,hidden:o.branches.indexOf(e)>-1,selected:l,collapsed:i}}}}),Ga=Object(Zt.b)({key:"tree/contextMenu",default:null}),Wa=Object(Zt.b)({key:"tree/expandedIds",default:[]}),Va=Object(Zt.e)({key:"tree/expandedIdsSelect",get:function(e){return(0,e.get)(Wa).filter((function(e){return e.indexOf("b-")>-1})).map((function(e){return parseInt(e.replace("b-",""),10)}))}}),Ha=Object(Zt.e)({key:"tree/treeAllIds",get:function(e){var t=(0,e.get)(Oa);return t?[].concat(Object(qt.a)(t.tree.branches.map((function(e){var t=e.bid;return"b-".concat(t)}))),Object(qt.a)(t.tree.leaves.map((function(e){var t=e.id;return"l-".concat(t)})))):[]}}),Za=a(354),qa=new(a.n(Za).a)({maxConcurrent:5}),Ja=new Ot("TILES",3600);Ja.prune();var Xa=Object(Zt.c)({key:"tiles/tileReq",default:0}),Ka=Object(Zt.c)({key:"tiles/tileRetries",default:0}),Qa=(Object(Zt.b)({key:"tiles/usableIds",default:[]}),Object(Zt.f)({key:"tiles/tiles",get:function(e){return function(){var t=Object(u.a)(d.a.mark((function t(a){var r,n,o,i,l,s,c,u;return d.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if((r=a.get)(Xa(e)),r(Ka(e)),n=r(Sa),o=r(Oa),i={status:D.TilingStatus.UNKNOWN},o&&n&&e){t.next=8;break}return t.abrupt("return",i);case 8:return l="".concat(o.projType,"/").concat(null===o||void 0===o?void 0:o.program,"/").concat(null===o||void 0===o?void 0:o.id,"/").concat(e),t.next=11,Ja.get(l);case 11:if(!(s=t.sent)){t.next=14;break}return t.abrupt("return",s);case 14:return t.prev=14,t.next=17,qa.schedule({priority:5},(function(){return n.getCurrentToken().then((function(t){return Object(D.getLayerTiles)(ba.graphql,t,o.projType,null===o||void 0===o?void 0:o.program,null===o||void 0===o?void 0:o.id,e,xa.apiTimeout)}))}));case 17:(u=t.sent)&&!u.errors&&u.data||(i.status=D.TilingStatus.FETCH_ERROR,u.errors&&u.errors.length>0&&(i.error=u.errors.map((function(e){return JSON.stringify(e)})).join(", \n"))),i=Object(p.a)(Object(p.a)({},i),null===(c=u.data)||void 0===c?void 0:c.getLayerTiles),t.next=27;break;case 22:t.prev=22,t.t0=t.catch(14),h.a.error("Tile fetch error",t.t0),i.status=D.TilingStatus.FETCH_ERROR,i.error=String(t.t0);case 27:return D.TilingStatusFinished.indexOf(i.status)>-1&&Ja.set(l,i),t.abrupt("return",i);case 29:case"end":return t.stop()}}),t,null,[[14,22]])})));return function(e){return t.apply(this,arguments)}}()}})),Ya=new Ot("SYMB",21600);Ya.prune();var er=function(e){return e.reduce((function(e,t){if(!t.symbology)return e;var a=[t.symbology,t.layerType===D.ProjectTreeLayerTypes.RASTER];return e.find((function(e){return Object(St.isEqual)(e,a)}))?e:[].concat(Object(qt.a)(e),[a])}),[])},tr=Object(Zt.e)({key:"symbology/uniqueSymb",get:function(e){var t=(0,e.get)(Pa);return er(t)}}),ar=(Object(Zt.e)({key:"symbology/activeSymbologies",get:function(e){var t=(0,e.get)(Ta);return er(t)}}),Object(Zt.f)({key:"symbology/symbology",get:function(e){var t=Object(m.a)(e,2),a=t[0],r=t[1];return function(){var e=Object(u.a)(d.a.mark((function e(t){var n,o,i,l,s,c,u,m,g,y;return d.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(i=t.get,l=i(Oa),s=i(Sa),l&&s&&a){e.next=5;break}return e.abrupt("return",null);case 5:return c={name:a,status:D.SymbologyStatus.UNKNOWN},u="".concat(l.projType,"/").concat(a),e.next=9,Ya.get(u);case 9:if(!(m=e.sent)){e.next=12;break}return e.abrupt("return",m);case 12:return e.next=14,qa.schedule({priority:5},(function(){return s.getCurrentToken().then((function(e){return Object(D.getWebSymbology)(ba.graphql,e,l.projType,a,r,xa.apiTimeout)})).catch((function(e){h.a.debug("symbologySelectorFamily",e)}))}));case 14:if((g=e.sent)&&!g.errors){e.next=19;break}return c.status=D.SymbologyStatus.ERROR,c.error="Error downloading symbology",e.abrupt("return",c);case 19:if((y=(null===(n=g.data)||void 0===n?void 0:n.getWebSymbology)?Object(p.a)(Object(p.a)({},null===(o=g.data)||void 0===o?void 0:o.getWebSymbology),{},{status:D.SymbologyStatus.FOUND}):c).status!==D.SymbologyStatus.FOUND){e.next=23;break}return e.next=23,Ya.set(u,y);case 23:return e.abrupt("return",y);case 24:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()}})),rr=Object(Zt.b)({key:"map/assignedColors",default:[]}),nr=Object(Zt.c)({key:"map/leafRandomCol",default:null}),or=Object(Zt.e)({key:"map/selectNextColor",get:function(e){for(var t=(0,e.get)(rr),a=0;a<wa.length;a++)if(t.indexOf(a)<0)return a;return 0}}),ir=Object(Zt.f)({key:"map/layers",get:function(e){return function(t){var a=t.get,r=a(Na(e)),n=a(Da),o=D.ProjectTreeLayerTileTypes.indexOf(r.layerType)>-1,i=o||r.layerType===D.ProjectTreeLayerTypes.REPORT,l=a(_a).indexOf(e)>-1,s={leaf:r,treeSelected:Boolean(n.leaves&&n.leaves.indexOf(e)>-1),legendActive:l,renderable:!1,tileStatus:D.TilingStatus.NOT_APPLICABLE,symbologyStatus:D.SymbologyStatus.NOT_APPLICABLE};if(i){var c=a(Object(Zt.d)(Qa(r.layerPath)));if(o){var d,p=a(Object(Zt.d)(ar([r.symbology,r.layerType===D.ProjectTreeLayerTypes.RASTER])));s.symbologyStatus="hasValue"!==p.state?D.SymbologyStatus.FETCHING:(null===(d=p.contents)||void 0===d?void 0:d.status)||D.SymbologyStatus.NOT_APPLICABLE,"hasValue"===p.state&&(s.symbology=p.contents)}s.tileStatus="hasValue"!==c.state?D.TilingStatus.FETCHING:c.contents.status,r.layerType===D.ProjectTreeLayerTypes.FILE&&(s.tileStatus,D.TilingStatus.SUCCESS),s.renderable=s.tileStatus===D.TilingStatus.SUCCESS&&s.symbologyStatus!==D.SymbologyStatus.FETCHING,"hasValue"===c.state&&(s.tiles=c.contents)}return s}}}),lr=Object(Zt.e)({key:"map/viewProjLeafIds",get:function(e){var t=(0,e.get)(Oa);return t&&t.tree.views?t.tree.views.reduce((function(e,a){var r=a.layers.reduce((function(e,a){var r=t.tree.leaves.find((function(e){var t=e.blLayerId;return t&&t===a.id}));return r?[].concat(Object(qt.a)(e),[r.id]):e}),[]);return Object(p.a)(Object(p.a)({},e),{},Object(Qt.a)({},a.id,r))}),{}):{}}}),sr=Object(Zt.b)({key:"map/baseLayer",default:xa.baseLayer}),cr=Object(Zt.b)({key:"map/viewport",default:xa.defaultViewport}),dr=Object(Zt.b)({key:"map/mapError",default:""}),pr=Object(Zt.b)({key:"map/mapLoaded",default:!1}),ur=Object(Zt.e)({key:"map/renderableMapLayers",get:function(e){var t=e.get,a=t(za).map((function(e){var a=e.id;return t(ir(a))})).filter((function(e){return e.tileStatus===D.TilingStatus.SUCCESS})),r=a.map((function(e){var a=e.leaf.id;return t(nr(a))}));return a.reduce((function(e,t,a){var n=t.leaf.id,o=Object(p.a)(Object(p.a)({},t),{},{randomColor:r[a],lid:n});return[].concat(Object(qt.a)(e),[o])}),[])}}),mr=Object(Zt.b)({key:"map/view",default:null}),gr=Object(Zt.b)({key:"map/bounds",default:null}),yr=Object(Zt.b)({key:"map/zoomBounds",default:[xa.zoomRange[0],xa.zoomRange[1]]}),hr=Object(Zt.e)({key:"bounds",get:function(e){var t=e.get;return{zoom:t(yr),bounds:t(gr)||xa.worldBounds}}}),br=function(){var e=Object(Zt.h)(mr),t=Object(m.a)(e,2),a=t[0],r=t[1],o=Object(Zt.i)(lr),i=Object(Zt.i)(Oa),l=Object(Zt.k)(_a),s=function(e){null!==e&&a!==e&&o[e]&&(n.event("webrave","set_view"),r(e),l(o[e]))};return{setView:s,resetView:function(){n.event("webrave","set_default_view"),i&&i.tree.defaultView&&s(i.tree.defaultView)}}},fr=function(e,t){var a=Object(Zt.h)(Oa),r=Object(m.a)(a,2),n=r[0],i=r[1],l=Object(Zt.k)(_a),s=Object(Zt.k)(Sa),c=Object(Zt.i)(tr),d=Object(Zt.i)(Ca),p=Object(Zt.k)(Wa),u=br().resetView;Object(o.useEffect)((function(){return i(t||null)}),[t]),Object(o.useEffect)((function(){return s(e||null)}),[e]);var g=Object(Zt.g)((function(e){var t=e.snapshot;return function(e){t.getLoadable(Qa(e))}})),y=Object(Zt.g)((function(e){var t=e.snapshot;return function(e){t.getLoadable(ar(e))}}));Object(o.useEffect)((function(){n?(l([]),u(),p(n.tree.branches.filter((function(e){return!e.collapsed})).map((function(e){return"b-".concat(e.bid)})))):p([])}),[n]),Object(o.useEffect)((function(){c.map(y)}),[c]),Object(o.useEffect)((function(){d.map(g)}),[d])},xr=Object(v.a)((function(e){return{rootContainer:{height:"100%",display:"flex",flexDirection:"column"},spacer:{flexGrow:1},root:{padding:e.spacing(2,4,4,4)},buttonContainer:{textAlign:"center"},logoContainer:{padding:e.spacing(2),textAlign:"center"},logo:{}}})),jr=function(){var e=xr();return Object(x.jsxs)(j.a,{className:e.rootContainer,maxWidth:"sm",children:[Object(x.jsx)("div",{className:e.spacer}),Object(x.jsxs)(Me.a,{className:e.root,children:[Object(x.jsx)("div",{className:e.logoContainer,children:Object(x.jsx)("img",{className:e.logo,src:"/webrave-staging/RiverscapesLogo.png",alt:"logo"})}),Object(x.jsx)(w.a,{paragraph:!0,variant:"body1",children:"The project you are looking for could not be found."}),Object(x.jsxs)(w.a,{paragraph:!0,variant:"body1",children:["Please go back to the ",Object(x.jsx)(Je.a,{href:"".concat(fa,"/#/"),children:"Riverscapes Data Warehouse"})," and choose a new project"]}),Object(x.jsx)("div",{className:e.buttonContainer,children:Object(x.jsx)(Ue,{title:"Warehouse",href:"".concat(fa,"/#/"),stay:!0})})]}),Object(x.jsx)("div",{className:e.spacer})]})},wr=a(376),vr=Object(v.a)((function(){return{root:{height:"100%",position:"relative"},splitPane:{},resizer:{background:"#000",opacity:.2,zIndex:1,boxSizing:"border-box",backgroundClip:"padding-box","&:hover":{transition:"all 2s ease"},"&.horizontal":{height:11,margin:"-5px 0",borderTop:"5px solid rgba(255, 255, 255, 0)",borderBottom:"5px solid rgba(255, 255, 255, 0)",cursor:"row-resize",width:"100%","&:hover":{borderTop:"5px solid rgba(0, 0, 0, 0.5)",borderBottom:"5px solid rgba(0, 0, 0, 0.5)"}},"&.vertical":{width:11,margin:"0 -5px",borderLeft:"5px solid rgba(255, 255, 255, 0)",borderRight:"5px solid rgba(255, 255, 255, 0)",cursor:"col-resize",height:"100%","&:hover":{borderLeft:"5px solid rgba(0, 0, 0, 0.5)",borderRight:"5px solid rgba(0, 0, 0, 0.5)"}},"&.disabled":{cursor:"not-allowed","&:hover":{borderColor:"transparent"}}}}})),Or=function(e){var t=e.open,a=e.child1,r=e.child2,n=e.split,i=e.primary,l=e.defaultSize,s=e.minSize,c=e.maxSize,d=vr(),p=Object(o.useMemo)((function(){return a}),[a]),u=Object(o.useMemo)((function(){return r}),[r]);return t?Object(x.jsx)("div",{className:d.root,children:Object(x.jsxs)(wr.a,{className:d.splitPane,resizerClassName:d.resizer,split:n,primary:i,defaultSize:l,minSize:s,maxSize:c,pane1Style:{overflow:"hidden"},pane2Style:{overflow:"hidden"},children:[p,u]})}):Object(x.jsx)("div",{className:d.root,children:i&&"first"!==i?u:p})},Sr=a(715),kr=a(703),_r=Object(v.a)((function(e){return{root:{height:"100%",display:"flex",flexDirection:"column",overflow:"hidden"},appBar:{flex:"0 0"},tabs:{},tabContents:{position:"relative",overflow:"hidden",flexGrow:1},closeButton:{zIndex:1e3,background:e.palette.secondary.main,color:e.palette.secondary.contrastText,position:"absolute",top:0,right:0}}})),Tr=function(e){var t=e.tabs,a=_r(),r=Object(o.useState)(0),n=Object(m.a)(r,2),i=n[0],l=n[1];return Object(x.jsxs)("div",{className:a.root,children:[Object(x.jsx)(Sr.a,{value:i,className:a.tabs,onChange:function(e,t){l(t)},indicatorColor:"primary",textColor:"primary",variant:"fullWidth","aria-label":"full width tabs example",children:t.map((function(e,t){return Object(x.jsx)(kr.a,{label:e.label,value:t},"tab-".concat(t))}))}),t.map((function(e,t){var r=e.value;return Object(x.jsx)("div",{className:a.tabContents,style:{display:t===i?"block":"none"},children:r},"tab-".concat(t))}))]})},zr=function(){var e=Object(Zt.h)(mr),t=Object(m.a)(e,2),a=t[0],r=t[1],o=Object(Zt.h)(_a),i=Object(m.a)(o,2),l=i[0],s=i[1],c=Object(Zt.h)(dr),d=Object(m.a)(c,2),p=d[0],u=d[1],g=function(e){n.event("webrave","remove_layer"),p&&u(""),null!==a&&r(null),s(l.filter((function(t){return t!==e})))},y=function(e){if(n.event("webrave","add_layer"),l.length===xa.maxMapLayers)return n.event("error","too_many_layers"),void u("Only ".concat(xa.maxMapLayers," layers are allowed at a time."));p&&u(""),null!==a&&r(null),s(Array.from(new Set([].concat(Object(qt.a)(l),[e]))))};return{removeLayer:g,addLayer:y,toggleLayer:function(e){l.indexOf(e)>-1?g(e):y(e)}}},Pr=a(355),Cr=Object(v.a)((function(){return{normal:{fontStyle:"italic",opacity:.8},highlighted:{fontWeight:"bold"}}})),Lr=function(e){var t=e.text,a=e.query,r=Cr();if(!a||0===a.length)return Object(x.jsx)("span",{children:t});var n=a.split(" ").map((function(e){return e.trim()})).filter((function(e){return e&&e.length>0})).join(" "),o=Object(Pr.a)({text:t,query:n});return Object(x.jsx)("span",{children:o.map((function(e,t){return Object(x.jsx)("span",{className:e.match?r.highlighted:r.normal,children:e.text},"textMatch-".concat(t))}))})},Ir=a(33),Rr=a.n(Ir),Er=Rr()(Object(x.jsxs)(i.a.Fragment,{children:[Object(x.jsx)("circle",{vectorEffect:"non-scaling-stroke",cx:"5.5",cy:"5.5",r:"2.5"},void 0),Object(x.jsx)("circle",{vectorEffect:"non-scaling-stroke",cx:"5.5",cy:"18.5",r:"2.5"},void 0),Object(x.jsx)("circle",{vectorEffect:"non-scaling-stroke",cx:"12",cy:"12",r:"2.5"},void 0),Object(x.jsx)("circle",{vectorEffect:"non-scaling-stroke",cx:"18.5",cy:"10",r:"2.5"},void 0),Object(x.jsx)("circle",{vectorEffect:"non-scaling-stroke",cx:"17.5",cy:"16.5",r:"2.5"},void 0)]},void 0),"Multidot"),Nr=Rr()(Object(x.jsx)(i.a.Fragment,{children:Object(x.jsx)("path",{d:" M 5.932 4.519 C 5.976 4.353 6 4.179 6 4 C 6 2.896 5.104 2 4 2 C 2.896 2 2 2.896 2 4 L 2 4 L 2 4 L 2 4 L 2 4 C 2 4.74 2.402 5.386 3 5.732 L 3 18.268 C 2.402 18.614 2 19.26 2 20 L 2 20 L 2 20 L 2 20 L 2 20 C 2 21.104 2.896 22 4 22 C 4.74 22 5.386 21.598 5.732 21 L 18.268 21 L 18.268 21 C 18.614 21.598 19.26 22 20 22 C 21.104 22 22 21.104 22 20 C 22 19.26 21.598 18.614 21 18.268 L 21 9.732 L 21 9.732 C 21.598 9.386 22 8.74 22 8 C 22 6.896 21.104 6 20 6 C 18.937 6 18.067 6.831 18.004 7.878 L 13.1 10.33 C 12.784 10.121 12.406 10 12 10 C 11.822 10 11.65 10.023 11.486 10.067 L 5.932 4.519 Z  M 5 18.268 C 5.303 18.444 5.556 18.697 5.732 19 L 18.268 19 C 18.444 18.697 18.697 18.444 19 18.268 L 19 9.732 C 18.966 9.712 18.933 9.692 18.9 9.67 L 13.996 12.122 C 13.933 13.169 13.063 14 12 14 C 10.896 14 10 13.104 10 12 L 10 12 C 10 11.822 10.023 11.649 10.067 11.485 L 5 6.41 L 5 18.268 Z ",fillRule:"evenodd"},void 0)},void 0),"Polygon"),Ar=Rr()(Object(x.jsxs)(i.a.Fragment,{children:[Object(x.jsx)("circle",{vectorEffect:"non-scaling-stroke",cx:"4",cy:"13",r:"2"},void 0),Object(x.jsx)("circle",{vectorEffect:"non-scaling-stroke",cx:"12",cy:"9",r:"2"},void 0),Object(x.jsx)("circle",{vectorEffect:"non-scaling-stroke",cx:"20",cy:"13",r:"2"},void 0),Object(x.jsx)("path",{d:" M 4.45 13.89 L 3.55 14.34 L 2.66 12.55 L 3.55 12.11 L 12 7.88 L 20.45 12.11 L 21.34 12.55 L 20.45 14.34 L 19.55 13.89 L 12 10.12 L 4.45 13.89 Z "},void 0)]},void 0),"Polyline"),Dr=(Rr()(Object(x.jsxs)(i.a.Fragment,{children:[Object(x.jsx)("path",{d:"M22,2l0,20l-20,0l0,-20l20,0Zm-2,2l-16,0l0,16l16,0l0,-16Z"},void 0),Object(x.jsx)("rect",{x:"5",y:"5",width:"4",height:"4"},void 0),Object(x.jsx)("rect",{x:"15",y:"5",width:"4",height:"4"},void 0),Object(x.jsx)("rect",{x:"5",y:"15",width:"4",height:"4"},void 0),Object(x.jsx)("rect",{x:"10",y:"10",width:"1",height:"5"},void 0),Object(x.jsx)("rect",{x:"11",y:"10",width:"6",height:"2"},void 0),Object(x.jsx)("rect",{x:"11",y:"12",width:"2",height:"2"},void 0),Object(x.jsx)("rect",{x:"13",y:"7",width:"1",height:"2"},void 0),Object(x.jsx)("rect",{x:"14",y:"9",width:"1",height:"1"},void 0),Object(x.jsx)("rect",{x:"8",y:"10",width:"1",height:"4"},void 0),Object(x.jsx)("rect",{x:"7",y:"11",width:"1",height:"3"},void 0),Object(x.jsx)("rect",{x:"9",y:"11",width:"1",height:"1"},void 0),Object(x.jsx)("rect",{x:"10",y:"6",width:"2",height:"3"},void 0),Object(x.jsx)("rect",{x:"12",y:"7",width:"1",height:"1"},void 0),Object(x.jsx)("rect",{x:"15",y:"14",width:"2",height:"4"},void 0),Object(x.jsx)("rect",{x:"14",y:"14",width:"1",height:"1"},void 0),Object(x.jsx)("rect",{x:"17",y:"15",width:"2",height:"2"},void 0),Object(x.jsx)("rect",{x:"11",y:"16",width:"1",height:"3"},void 0),Object(x.jsx)("rect",{x:"12",y:"15",width:"2",height:"2"},void 0),Object(x.jsx)("rect",{x:"10",y:"18",width:"1",height:"1"},void 0)]},void 0),"QRCode"),function(){return Dr=Object.assign||function(e){for(var t,a=1,r=arguments.length;a<r;a++)for(var n in t=arguments[a])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},Dr.apply(this,arguments)}),Ur=Rr()(Object(x.jsxs)(i.a.Fragment,{children:[Object(x.jsxs)("g",{children:[Object(x.jsx)("g",Dr({transform:"matrix(1,0,0,1,-1.77636e-15,3.97768)"},{children:Object(x.jsx)("rect",{x:"4",y:"4.022",width:"4",height:"3.978"},void 0)}),void 0),Object(x.jsx)("g",Dr({transform:"matrix(1,0,0,1,0,11.9777)"},{children:Object(x.jsx)("rect",{x:"4",y:"4.022",width:"4",height:"3.978"},void 0)}),void 0),Object(x.jsx)("g",Dr({transform:"matrix(1,0,0,1,8,4)"},{children:Object(x.jsx)("rect",{x:"4",y:"4.022",width:"4",height:"3.978"},void 0)}),void 0),Object(x.jsx)("g",Dr({transform:"matrix(1,0,0,1,8,12)"},{children:Object(x.jsx)("rect",{x:"4",y:"4.022",width:"4",height:"3.978"},void 0)}),void 0),Object(x.jsx)("g",Dr({transform:"matrix(1,0,0,1,4,-0.0223232)"},{children:Object(x.jsx)("rect",{x:"4",y:"4.022",width:"4",height:"3.978"},void 0)}),void 0),Object(x.jsx)("g",Dr({transform:"matrix(1,0,0,1,4,7.97768)"},{children:Object(x.jsx)("rect",{x:"4",y:"4.022",width:"4",height:"3.978"},void 0)}),void 0),Object(x.jsx)("g",Dr({transform:"matrix(1,0,0,1,12,0)"},{children:Object(x.jsx)("rect",{x:"4",y:"4.022",width:"4",height:"3.978"},void 0)}),void 0),Object(x.jsx)("g",Dr({transform:"matrix(1,0,0,1,12,8)"},{children:Object(x.jsx)("rect",{x:"4",y:"4.022",width:"4",height:"3.978"},void 0)}),void 0)]},void 0),Object(x.jsxs)("g",Dr({id:"Raster"},{children:[Object(x.jsx)("path",{d:"M21,5.432C21,4.09 19.91,3 18.568,3L5.432,3C4.09,3 3,4.09 3,5.432L3,18.568C3,19.91 4.09,21 5.432,21L18.568,21C19.91,21 21,19.91 21,18.568L21,5.432Z",style:{fillOpacity:0}},void 0),Object(x.jsx)("path",{d:"M22,5.432C22,3.538 20.462,2 18.568,2L5.432,2C3.538,2 2,3.538 2,5.432L2,18.568C2,20.462 3.538,22 5.432,22L18.568,22C20.462,22 22,20.462 22,18.568L22,5.432ZM20,5.432L20,18.568C20,19.358 19.358,20 18.568,20C18.568,20 5.432,20 5.432,20C4.642,20 4,19.358 4,18.568C4,18.568 4,5.432 4,5.432C4,4.642 4.642,4 5.432,4C5.432,4 18.568,4 18.568,4C19.358,4 20,4.642 20,5.432Z"},void 0)]}),void 0)]},void 0),"Multidot"),Mr=a(356),Fr=a.n(Mr),Br=function(){return Br=Object.assign||function(e){for(var t,a=1,r=arguments.length;a<r;a++)for(var n in t=arguments[a])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},Br.apply(this,arguments)},$r=Object(v.a)((function(){return{root:{}}})),Gr=function(e){var t=e.layerType,a=e.iconProps,r=e.className,n=$r(),o=Er;switch(t){case D.ProjectTreeLayerTypes.POINT:o=Er;break;case D.ProjectTreeLayerTypes.LINE:o=Ar;break;case D.ProjectTreeLayerTypes.POLYGON:o=Nr;break;case D.ProjectTreeLayerTypes.RASTER:o=Ur;break;case D.ProjectTreeLayerTypes.FILE:o=Ke.a;break;case D.ProjectTreeLayerTypes.REPORT:o=Fr.a}return Object(x.jsx)(o,Br({className:r||n.root},a),void 0)},Wr=Object(v.a)((function(e){return{leaf:{cursor:"context-menu",marginLeft:e.spacing(2)},active:{fontWeight:"bold"},treeLeafLabel:{display:"flex"},innerLabel:{flexGrow:0},spacer:{flexGrow:1},metaIcon:{margin:e.spacing(.25),opacity:.2,fontSize:e.spacing(2),lineHeight:"1rem"},loadingSpinner:{color:e.palette.text.secondary},tileStatus:{flexGrow:0,fontStyle:"italic"},leafQUEUED:{color:"#999999",fontStyle:"italic"},leafNO_GEOMETRIES:{color:"#666666"},leafCREATING:{color:"orange"},leafTILING_ERROR:{color:"red",fontStyle:"italic"},leafTIMEOUT:{color:"#999999",fontStyle:"italic"},leafFETCH_ERROR:{color:"red",fontStyle:"italic"},leafNOT_FOUND:{color:"red",fontStyle:"italic"},leafINDEX_NOT_FOUND:{color:"red",fontStyle:"italic"},leafLAYER_NOT_FOUND:{color:"red",fontStyle:"italic"},leafUNKNOWN:{color:e.palette.text.secondary,fontStyle:"italic"},leafFETCHING:{color:e.palette.text.secondary,fontStyle:"italic"},leafSUCCESS:{}}})),Vr=function(e){var t=e.id,a=e.layerType,r=e.label,n=e.active,o=e.hidden,i=e.searchText,l=e.tilesState,s=e.handleContext,c=e.handleClick,d=e.handleDoubleClick,p=Wr(),u=null;if(D.ProjectTreeLayerTileTypes.indexOf(a)>-1||a===D.ProjectTreeLayerTypes.REPORT)switch(l){case D.TilingStatus.SUCCESS:break;case D.TilingStatus.QUEUED:u="Queued...";break;case D.TilingStatus.CREATING:u="Building...";break;case D.TilingStatus.TILING_ERROR:u="Tile Error";break;case D.TilingStatus.TIMEOUT:u="Timeout";break;case D.TilingStatus.INDEX_NOT_FOUND:u="Index Error";break;case D.TilingStatus.NO_GEOMETRIES:u="Empty";break;case D.TilingStatus.LAYER_NOT_FOUND:u="Layer Missing";break;case D.TilingStatus.FETCH_ERROR:u="Fetch Error";break;case D.TilingStatus.UNKNOWN:case D.TilingStatus.FETCHING:u=Object(x.jsx)(ze.a,{className:p.loadingSpinner,color:"inherit",thickness:3,size:15})}return Object(x.jsx)(rt.a,{nodeId:"l-".concat(t),className:Object(Ve.a)(p.leaf,l&&p["leaf".concat(l)]),hidden:o,onClick:function(){return c(t)},onDoubleClick:function(){return d(t)},label:Object(x.jsxs)("div",{className:p.treeLeafLabel,children:[Object(x.jsx)(w.a,{variant:"body2",color:"inherit",className:Object(Ve.a)(p.innerLabel,n&&p.active),children:Object(x.jsx)(Lr,{text:r,query:i})}),Object(x.jsx)("div",{className:p.spacer}),u&&Object(x.jsx)(w.a,{variant:"caption",color:"inherit",className:Object(Ve.a)(p.innerLabel,n&&p.active),children:u})]}),onContextMenu:function(e){e.preventDefault(),s(t,e.clientX-2,e.clientY-4)},icon:Object(x.jsx)(Gr,{layerType:a})})},Hr=Object(v.a)((function(e){return{branch:{marginTop:e.spacing(.5)},iconContainer:{width:e.spacing(4)},label:{}}})),Zr=function(e){var t=e.id,a=e.hidden,r=e.label,n=e.searchText,o=e.children,i=Hr();return Object(x.jsx)(rt.a,{nodeId:"b-".concat(t),className:Object(Ve.a)(i.branch),classes:{label:i.label,iconContainer:i.iconContainer},onDoubleClick:function(e){e.preventDefault(),e.stopPropagation()},onContextMenu:function(e){e.preventDefault(),e.stopPropagation()},hidden:a,label:Object(x.jsx)(w.a,{variant:"body1",children:Object(x.jsx)(Lr,{text:r,query:n})}),children:o})},qr=a(704),Jr=a(359),Xr=a.n(Jr),Kr=a(358),Qr=a.n(Kr),Yr=a(357),en=a.n(Yr),tn=Object(v.a)((function(e){return{container:{height:"100%",width:"100%",display:"flex",flexDirection:"column"},folderIcon:{color:e.palette.secondary.main},tree:{flexGrow:1,overflow:"scroll",paddingBottom:e.spacing(5)},searchBox:{flexGrow:0,padding:e.spacing(.5)},searchBoxInput:{padding:e.spacing(.75,.5)}}})),an=function(e){var t=e.lyrInfoOpen,a=e.setSearchText,r=e.expanded,n=e.ctxMenu,o=e.lyrInfo,i=e.selected,l=e.setExpanded,s=e.setSelected,c=e.children,d=tn(),p=Object(St.debounce)((function(e){return a(e)}),100);return Object(x.jsx)(Or,{open:t,split:"horizontal",primary:"first",defaultSize:"60%",maxSize:"80%",minSize:"30%",child1:Object(x.jsxs)("div",{className:d.container,children:[Object(x.jsx)(M.a,{fullWidth:!0,className:d.searchBox,placeholder:"Filter Project Layers...",variant:"outlined",onChange:function(e){p(e.target.value.toLowerCase().trim())},InputProps:{classes:{input:d.searchBoxInput},startAdornment:Object(x.jsx)(qr.a,{position:"start",children:Object(x.jsx)(en.a,{})})}}),Object(x.jsx)(Qe.a,{className:d.tree,defaultCollapseIcon:Object(x.jsxs)(x.Fragment,{children:[Object(x.jsx)(et.a,{}),Object(x.jsx)(Qr.a,{className:d.folderIcon})]}),defaultExpandIcon:Object(x.jsxs)(x.Fragment,{children:[Object(x.jsx)(at.a,{}),Object(x.jsx)(Xr.a,{className:d.folderIcon})]}),onNodeToggle:function(e,t){l(t)},onNodeSelect:function(e,t){s(Array.isArray(t)?t:[t])},selected:i,expanded:r,children:c}),n]}),child2:o||Object(x.jsx)("div",{})})},rn=Object(v.a)((function(e){return{root:{},item:{},error:{color:e.palette.error.main}}})),nn=function(e){var t=e.open,a=e.position,r=e.onClose,n=e.menuItems,o=rn();return Object(x.jsx)(T.a,{keepMounted:!0,open:t,onClose:r,anchorReference:"anchorPosition",anchorPosition:a,className:o.root,children:n.map((function(e,t){var a=e.label,r=e.handleClick,n=e.disabled,i=e.error;return Object(x.jsx)(_.a,{onClick:r,disabled:n,className:Object(Ve.a)(o.item,i&&o.error),children:a},"ctxMenuIt-".concat(t))}))})},on=function(e){var t,a=e.ctxState,r=e.onClose,n=e.downloadFile,o=Object(Zt.i)(ir(a.leafId)),i=Object(Zt.k)(Ra),l=Object(Zt.k)(Ea),s=zr(),c=s.addLayer,d=s.removeLayer,p=[];o.leaf.layerType===D.ProjectTreeLayerTypes.REPORT?o.tileStatus===D.TilingStatus.FETCHING||o.tileStatus===D.TilingStatus.QUEUED?p.push({label:"Report queued for upload...",disabled:!0}):p.push({label:"Open Report",disabled:!((null===(t=o.tiles)||void 0===t?void 0:t.url)&&o.tileStatus===D.TilingStatus.SUCCESS),handleClick:function(){var e,t=window.open((null===(e=o.tiles)||void 0===e?void 0:e.url)+"index.html","_blank","noopener,noreferrer");t&&(t.opener=null),r()}}):o.leaf.layerType===D.ProjectTreeLayerTypes.FILE?p.push({label:"Download file",handleClick:function(){o.leaf.layerPath&&n(o.leaf.layerPath),r()}}):o.tileStatus===D.TilingStatus.FETCHING||o.symbologyStatus===D.SymbologyStatus.FETCHING?p.push({label:"Loading tile data...",disabled:!0}):(o.tileStatus===D.TilingStatus.SUCCESS?o.legendActive?p.push({label:"Remove from map",handleClick:function(){d(o.leaf.id),r()}}):!o.legendActive&&o.renderable&&p.push({label:"Add to map",handleClick:function(){c(o.leaf.id),r()}}):o.tileStatus===D.TilingStatus.QUEUED?p.push({label:"Queued for tiling...",disabled:!0}):o.tileStatus===D.TilingStatus.NOT_APPLICABLE?p.push({label:"Tiling is not applicable to this layer",disabled:!0}):o.tileStatus===D.TilingStatus.NO_GEOMETRIES?p.push({label:"No Geometries were found",disabled:!0}):o.tileStatus===D.TilingStatus.CREATING?p.push({label:"Currently building tiles...",disabled:!0}):o.tileStatus===D.TilingStatus.TILING_ERROR?p.push({label:"Tiles did not build",disabled:!0,error:!0}):o.tileStatus===D.TilingStatus.TIMEOUT?p.push({label:"Tiling timed out",disabled:!0,error:!0}):o.tileStatus===D.TilingStatus.INDEX_NOT_FOUND?p.push({label:"Error fetching tile info",disabled:!0,error:!0}):o.tileStatus===D.TilingStatus.LAYER_NOT_FOUND?p.push({label:"The original GIS layer is missing",disabled:!0,error:!0}):o.tileStatus===D.TilingStatus.FETCH_ERROR&&p.push({label:"Error fetching tile info",disabled:!0,error:!0}),p.push({label:"Layer Information",handleClick:function(){i(a.leafId),l(!0),r()}}));return Object(x.jsx)(nn,{open:Boolean(a),position:a.position,onClose:r,menuItems:p})},ln=a(706),sn=a(707),cn=a(709),dn=a(705),pn=a(708),un=a(55),mn=Object(v.a)((function(e){return{root:{padding:e.spacing(1)},table:{},section:{marginBottom:e.spacing(3)},sectionHeader:{borderBottom:"1px solid"},metaKey:{fontWeight:"bold"},metaValue:{color:e.palette.text.secondary,overflowWrap:"anywhere",textAlign:"left"}}})),gn={datecreated:function(e){var t=un.dates.HTML5InputToTimestamp(e);return t>0?"".concat(un.dates.formatDate(t,"lll")," (").concat(un.dates.formatDateAgo(t),")"):"unknown"}},yn=function(e,t){var a=e.toLowerCase();return Object.keys(gn).indexOf(a)>-1?gn[a](t):t&&t.match(/https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/)?Object(x.jsx)(Je.a,{href:t,target:"_blank",children:t}):t},hn=function(e){var t=e.title,a=e.meta,r=mn();return 0===Object.keys(a).length?null:Object(x.jsxs)("div",{className:r.section,children:[Object(x.jsx)(w.a,{variant:"subtitle1",className:r.sectionHeader,children:t}),Object(x.jsx)(dn.a,{children:Object(x.jsx)(ln.a,{className:r.table,size:"small","aria-label":"a dense table",children:Object(x.jsx)(sn.a,{children:Object.keys(a).map((function(e){return Object(x.jsxs)(pn.a,{children:[Object(x.jsx)(cn.a,{component:"th",scope:"row",className:r.metaKey,children:e}),Object(x.jsx)(cn.a,{align:"right",className:r.metaValue,children:yn(e,a[e])})]},e)}))})})})]})},bn=["_rs_lyr_origin_url"],fn=Object(v.a)((function(e){return{root:{padding:e.spacing(1)},minimal:{},whNote:{padding:e.spacing(2,1)}}}));var xn=function(e){var t=e.leaf,a=e.minimal,r=fn(),n=t.meta||{},o=function(e){var t=Object.keys(e).filter((function(e){return bn.indexOf(e)<0})),a=function(a){return t.filter((function(e){return 0===e.indexOf(a)})).reduce((function(t,r){return Object(p.a)(Object(p.a)({},t),{},Object(Qt.a)({},r.replace(a,""),e[r]))}),{})};return{upstreamWarehouse:a("_rs_wh_"),upstreamProject:a("_rs_prj_"),upstreamLayer:a("_rs_lyr_"),Layer:t.filter((function(e){return 0!==e.indexOf("_rs")})).reduce((function(t,a){return Object(p.a)(Object(p.a)({},t),{},Object(Qt.a)({},a,e[a]))}),{})}}(n);return Object(x.jsxs)(Me.a,{className:a?r.minimal:r.root,children:[Object.keys(o.Layer).length>0&&Object(x.jsx)(hn,{title:"Layer Metadata",meta:o.Layer}),!a&&Object.keys(o.upstreamWarehouse).length>0&&Object(x.jsxs)("div",{className:r.whNote,children:[Object(x.jsxs)(w.a,{variant:"caption",component:"div",children:["This layer was imported from a ",n._rs_prj_projType," project in the Riverscapes warehouse. You can visit the original project using the button below."]}),Object(x.jsx)(Ue,{title:"Original ".concat(n._rs_prj_projType," Project"),href:"".concat(fa,"#/").concat(n._rs_wh_program,"/").concat(n._rs_wh_id)})]}),Object.keys(o.upstreamProject).length>0&&Object(x.jsx)(hn,{title:"Original Project Metadata",meta:o.upstreamProject}),Object.keys(o.upstreamLayer).length>0&&Object(x.jsx)(hn,{title:"Original Layer Metadata",meta:o.upstreamLayer}),Object(x.jsx)(hn,{title:"Other",meta:{Symbology:t.symbology||"None"}})]})},jn=a(193),wn=a.n(jn),vn=Object(v.a)((function(e){return{root:{padding:e.spacing(1)},sectionHeader:{borderBottom:"1px solid"},table:{},metaKey:{fontWeight:"bold"},metaValue:{color:e.palette.text.secondary}}})),On=function(e){var t,a,r,n,o=e.tiles,i=vn(),l={Status:o.status,Error:o.error,Started:o?"".concat(un.dates.formatDate(o.started,"lll")," (").concat(un.dates.formatDateAgo(o.started),")"):"unknown","Last status":o?"".concat(un.dates.formatDate(o.lastStatus,"lll")," (").concat(un.dates.formatDateAgo(o.lastStatus),")"):"unknown","Creation time":o?"".concat(((o.duration||0)/60).toFixed(0)," minutes"):"unknown","Original Size":o&&o.originFile?wn()(o.originFile.size).format("0.0 b"):"unknown",Files:o&&o.numFiles?wn()(o.numFiles).format("0,0"):"unknown","Relative path":(null===(t=o.rsLayer)||void 0===t?void 0:t.path)||"unknown","Physical path":o?null===(a=o.originFile)||void 0===a?void 0:a.key:"unknown","Modified (origin)":o?"".concat(un.dates.formatDate(null===(r=o.originFile)||void 0===r?void 0:r.lastModified,"lll")," (").concat(un.dates.formatDateAgo(null===(n=o.originFile)||void 0===n?void 0:n.lastModified),")"):"unknown"};return Object(x.jsx)(Me.a,{className:i.root,children:Object(x.jsx)(hn,{title:"Webtile information",meta:l})})},Sn=Object(v.a)((function(e){return{root:{height:"100%",overflow:"hidden",display:"flex",flexDirection:"column"},toolbar:{flex:"0 0 ",padding:e.spacing(0,1),minHeight:e.spacing(6),background:e.palette.primary.dark,color:e.palette.primary.contrastText},spacer:{flexGrow:1},layerTitle:{},layerIcon:{},layerMeta:{flexGrow:1,overflowY:"scroll",userSelect:"text","& *":{userSelect:"text"}},typeContainer:{},closeButton:{}}})),kn=function(e){var t=e.leaf,a=e.tiles,r=e.handleClose,n=Sn();return Object(x.jsxs)("div",{className:n.root,children:[Object(x.jsxs)(O.a,{className:n.toolbar,children:[Object(x.jsx)(_e.a,{title:"This is a ".concat(t.layerType," layer"),children:Object(x.jsx)(E.a,{edge:"start",className:n.layerIcon,color:"inherit","aria-label":"menu",children:Object(x.jsx)(Gr,{layerType:t.layerType})})}),Object(x.jsx)(w.a,{variant:"body2",className:n.layerTitle,children:t.label}),Object(x.jsx)("div",{className:n.spacer}),Object(x.jsx)(E.a,{edge:"start",className:n.closeButton,color:"inherit","aria-label":"menu",onClick:r,children:Object(x.jsx)($.a,{})})]}),Object(x.jsxs)("div",{className:n.layerMeta,children:[t&&Object(x.jsx)(xn,{leaf:t}),a&&Object(x.jsx)(On,{tiles:a})]})]})},_n=function(e){var t=e.leafID,a=e.handleClose,r=Object(Zt.i)(ir(t));return Object(x.jsx)(kn,{leaf:r.leaf,tiles:r.tiles,handleClose:a})},Tn=function e(t){var a=t.branchId,r=t.depth,n=t.downloadFile,o=Object(Zt.i)($a(a)),i=Object(Zt.i)(La);if(!o||!o.branch)return null;var l=null===o||void 0===o?void 0:o.branch.children.branches.map((function(t,a){return Object(x.jsx)(e,{downloadFile:n,branchId:t,depth:r+1},"".concat(null===o||void 0===o?void 0:o.branch.branch.label,"-").concat(t,"-").concat(a))})).filter((function(e){return e})),s=null===o||void 0===o?void 0:o.branch.children.leaves.map((function(e,t){return Object(x.jsx)(zn,{downloadFile:n,leafId:e,depth:r+1},"".concat(null===o||void 0===o?void 0:o.branch.branch.label,"-").concat(e,"-").concat(t))})).filter((function(e){return e}));return 0===s.length&&0===l.length?null:Object(x.jsx)(Zr,{id:a,label:null===o||void 0===o?void 0:o.branch.branch.label,hidden:null===o||void 0===o?void 0:o.hidden,searchText:i,children:[].concat(Object(qt.a)(l),Object(qt.a)(s))})},zn=function(e){var t=e.leafId,a=e.downloadFile,r=Object(Zt.i)(Ma(t)),o=Object(Zt.i)(La),i=Object(Zt.k)(Ga),l=Object(Zt.k)(Ra),s=zr().toggleLayer;if(!r||!r.leaf||!r.leaf.nodeExists)return null;var c=r.leaf,d=c.id,p=c.layerType,u=c.label;return Object(x.jsx)(Vr,{id:d,layerType:p,label:u,active:r.active,hidden:r.hidden,tilesState:r.tilesState,searchText:o,handleClick:l,handleDoubleClick:function(){if(n.event("webrave","double_click"),r.leaf.layerType===D.ProjectTreeLayerTypes.REPORT&&r.renderable){var e=window.open(r.reportUrl,"_blank","noopener,noreferrer");e&&(e.opener=null)}else r.leaf.layerType===D.ProjectTreeLayerTypes.FILE?r.leaf.layerPath&&a(r.leaf.layerPath):r.renderable&&s(r.leaf.id)},handleContext:function(e,t,a){n.event("webrave","open_context_menu"),i({leafId:e,position:{left:t,top:a}})}})},Pn=function(e){var t=e.downloadFile,a=Object(Zt.k)(La),r=Object(Zt.i)(Fa),n=Object(Zt.h)(Wa),o=Object(m.a)(n,2),i=o[0],l=o[1],s=Object(Zt.h)(Aa),c=Object(m.a)(s,2),d=c[0],p=c[1],u=Object(Zt.h)(Ga),g=Object(m.a)(u,2),y=g[0],b=g[1],f=Object(Zt.i)(Ra),j=Object(Zt.i)(Ha),w=Object(Zt.i)(Ua),v=Object(Zt.h)(Ea),O=Object(m.a)(v,2),S=O[0],k=O[1],_=w.branches.length>0?j:i,T=w.branches.length>0?function(){h.a.debug("collapsing turned off")}:l,z=S&&null!==f?Object(x.jsx)(_n,{leafID:f,handleClose:function(){return k(!1)}}):null,P=y&&Object(x.jsx)(on,{ctxState:y,onClose:function(){return b(null)},downloadFile:t}),C=null!==r?Object(x.jsx)(Tn,{branchId:r,depth:0,downloadFile:t}):Object(x.jsx)("div",{});return Object(x.jsx)(an,{lyrInfoOpen:S,setSearchText:a,expanded:_,ctxMenu:P,lyrInfo:z,selected:d,setExpanded:T,setSelected:function(e){Object(St.isEqual)(e,d)||p(e)},children:C})},Cn=function(e){var t=e.layerPath,a=Object(Zt.j)(Qa(t)),r=Object(Zt.g)((function(e){var a=e.snapshot,r=e.set;return Object(u.a)(d.a.mark((function e(){var n,o,i,l,s,c,p,u;return d.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if("hasValue"===(n=a.getLoadable(Qa(t))).state){e.next=3;break}return e.abrupt("return");case 3:return o=n.contents,e.next=6,a.getPromise(Xa(t));case 6:return i=e.sent,e.next=9,a.getPromise(Ka(t));case 9:return l=e.sent,e.next=12,a.getPromise(gr);case 12:return s=e.sent,e.next=15,a.getPromise(yr);case 15:c=e.sent,o.status===D.TilingStatus.FETCH_ERROR?l<5&&setTimeout((function(){return r(Ka(t),l+1)}),1e3*xa.retryDelayS):o.status===D.TilingStatus.QUEUED||o.status===D.TilingStatus.UNKNOWN||o.status===D.TilingStatus.CREATING?setTimeout((function(){return r(Xa(t),i+1)}),1e3*xa.refreshDelayS):o.status===D.TilingStatus.SUCCESS&&(d=xa.worldBounds,m=s,g=o.bounds||null,p=g||m?g&&!m?[Math.max(d[0],g[0]),Math.max(d[1],g[1]),Math.min(d[2],g[2]),Math.min(d[3],g[3])]:m&&!g?[Math.max(d[0],m[0]),Math.max(d[1],m[1]),Math.min(d[2],m[2]),Math.min(d[3],m[3])]:m&&g?[Math.max(d[0],Math.min(g[0],m[0])),Math.max(d[1],Math.min(g[1],m[1])),Math.min(d[2],Math.max(g[2],m[2])),Math.min(d[3],Math.max(g[3],m[3]))]:null:null,u=ea(c,[o.minZoom,o.maxZoom]),r(gr,p),r(yr,u));case 17:case"end":return e.stop()}var d,m,g}),e)})))}));return Object(o.useEffect)((function(){r()}),[a]),null},Ln=a(723),In=a(674),Rn=a(716),En=Object(v.a)((function(){return{root:{}}})),Nn="custom",An=function(e){var t=e.activeView,a=e.defaultView,r=e.projectViews,n=e.handleChange,i=En(),l=null===t?Nn:t,s=Object(o.useMemo)((function(){if(!r||0===r.length)return[Object(x.jsx)(_.a,{value:"custom",disabled:!0,children:Object(x.jsx)(w.a,{variant:"subtitle1",color:"textSecondary",children:Object(x.jsx)("em",{children:"No custom views"})})},Nn)];var e=r.map((function(e,t){var r=e.id===a?"(default)":"";return Object(x.jsxs)(_.a,{value:e.id,children:[e.name," ",r]},"view-".concat(t))}))||[];return[].concat(Object(qt.a)(e),[null===t&&Object(x.jsx)(_.a,{value:"custom",children:Object(x.jsx)(w.a,{variant:"subtitle1",color:"textSecondary",children:Object(x.jsx)("em",{children:"Custom View"})})},Nn)])}),[r,t]);return Object(x.jsxs)(In.a,{className:i.root,fullWidth:!0,size:"small",children:[Object(x.jsx)(Ln.a,{htmlFor:"grouped-native-select",children:"Curated Views"}),Object(x.jsx)(Rn.a,{id:"view",value:l,disabled:!r||0===r.length,variant:"filled",onChange:function(e){return e.target.value!==Nn&&n(e.target.value)},children:s})]})},Dn=Object(v.a)((function(e){return{root:{},menuIcon:{marginRight:e.spacing(1)},menuItem:{display:"flex"}}})),Un=function(e){var t=e.baseLayer,a=e.baseLayers,r=e.setBaseLayer,n=Dn(),o=a.map((function(e,t){var a=e.Icon;return Object(x.jsxs)(_.a,{value:e.id,className:n.menuItem,children:[Object(x.jsx)(a,{className:n.menuIcon}),Object(x.jsx)(w.a,{children:e.title})]},"view-".concat(t))}));return Object(x.jsxs)(In.a,{className:n.root,fullWidth:!0,size:"small",children:[Object(x.jsx)(Ln.a,{children:"Basemap"}),Object(x.jsx)(Rn.a,{id:"baselayer",value:t.id,variant:"filled",classes:{selectMenu:n.menuItem},onChange:function(e){var t=a.find((function(t){return t.id===e.target.value}));t&&r(t)},children:o})]})},Mn=function(e){var t=e.error;return Object(x.jsx)(w.a,{color:"error",children:t||" "})},Fn=Object(v.a)((function(e){return{root:{zIndex:1e3,padding:e.spacing(0),border:"1px solid #EEEEEE",borderRadius:5,position:"absolute",background:"white",width:270,maxHeight:"90%",overflow:"hidden",boxShadow:"3px 3px 3px #00000066",top:15,right:15,display:"flex",flexDirection:"column"},subheaders:{background:"white"},legendList:{height:"100%",flex:"1 1",overflow:"scroll"}}})),Bn=function(e){var t=e.views,a=e.defaultView,r=e.children,n=e.baseLayer,o=e.baseLayers,i=e.setBaseLayer,l=e.error,s=e.viewId,c=e.setViewId,d=Fn();return Object(x.jsxs)("div",{className:d.root,children:[Object(x.jsx)(Un,{baseLayer:n,baseLayers:o,setBaseLayer:i}),Object(x.jsx)(An,{activeView:s,defaultView:a,handleChange:c,projectViews:t}),Object(x.jsx)(Be.a,{dense:!0,disablePadding:!0,className:d.legendList,children:r}),Object(x.jsx)(Mn,{error:l})]})},$n=a(711),Gn=Object(v.a)((function(e){return{root:{flexDirection:"column",paddingLeft:e.spacing(5)},tooltip:{display:"flex","&>div":{marginRight:e.spacing(1)}},row:{width:"100%",display:"flex"},colorBox:{flexGrow:0,flexShrink:0,border:"1px solid #eaeaea",overflow:"hidden",color:"#FFFFFF00",width:e.spacing(2),height:e.spacing(2)},value:{color:e.palette.text.secondary,paddingLeft:e.spacing(1),whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis"}}})),Wn=function(e){var t=e.max,a=e.min,r=e.rampType,n=e.legend,o=Gn(),i=function(e,t,a,r){var n=[];n=t&&a&&r===D.RampType.INTERPOLATED?e.map((function(e){var r=Object(m.a)(e,2),n=r[0],o=r[1],i=o.match(/^([0-9.]+)%$/);if(i){var l=parseFloat(i[1]);return[n,(a+(t-a)*l/100).toFixed(2)]}return[n,o]})):Object(qt.a)(e);var o=n.reduce((function(e,t){return Object(p.a)(Object(p.a)({},e),{},Object(Qt.a)({},"".concat(t[0]).concat(t[1]),t))}),{});return Object.values(o)}(n,t,a,r);return Object(x.jsx)($e.a,{divider:!0,dense:!0,disableGutters:!0,className:o.root,children:i.map((function(e,t){return Object(x.jsxs)("div",{className:o.row,children:[Object(x.jsx)("div",{className:o.colorBox,style:{background:e[0]},children:"color"}),Object(x.jsx)(_e.a,{enterDelay:2e3,title:Object(x.jsxs)("div",{className:o.tooltip,children:[Object(x.jsx)("div",{className:o.colorBox,style:{background:e[0]},children:"color"}),e[1]]}),children:Object(x.jsx)(w.a,{variant:"caption",component:"div",className:o.value,children:e[1]})})]},"cr-".concat(t))}))})};var Vn=a(360),Hn=a.n(Vn),Zn=a(710),qn=a(64),Jn=Object(v.a)((function(e){return{container:{},listItem:{paddingTop:0,paddingBottom:0,paddingLeft:0,paddingRight:26},listItemActive:{"& *":{cursor:"pointer"}},listItemAvatar:{minWidth:e.spacing(3.5)},expandIcon:{minWidth:e.spacing(1)},avatar:{width:e.spacing(3),height:e.spacing(3),"& svg":{height:"0.7em",width:"0.7em"}},expandIconButton:{padding:0,"& svg":{width:"0.7em",height:"0.7em"}},expandDisabled:{color:"rgba(0,0,0,0.05)!important"},textPrimary:{whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis"},textSecondary:{whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis"},secondary:{right:0},root:{marginTop:e.spacing(2)},heading:{marginTop:e.spacing(1)},loadingSpinner:{color:e.palette.text.secondary},layerItem:{display:"flex"},legendName:{flexGrow:1},deleteButtonHover:{},legendColor:{border:"1px solid black",width:"20px",display:"inline-block",height:"14px",marginRight:"5px"},deleteButton:{flexGrow:0,color:"#CCCCCC",padding:0,marginRight:0,"& < svg":{width:"0.8em",height:"0.8em"}}}})),Xn=function(e){var t=e.label,a=e.leafId,r=e.loading,n=e.max,l=e.min,s=e.subLabel,c=e.fallbackColor,d=e.symbology,p=e.layerType,u=e.removeLayer,g=Jn(),y=Object(qn.a)(),h=Object(o.useState)(!0),b=Object(m.a)(h,2),f=b[0],j=b[1],v=Boolean(d&&d.legend&&d.legend.length>1),O=Boolean(d&&d.legend&&1===d.legend.length),S=y.palette.text.primary,k=y.palette.background.default;O&&(null===d||void 0===d?void 0:d.legend)?p===D.ProjectTreeLayerTypes.POLYGON||p===D.ProjectTreeLayerTypes.RASTER?(k=d.legend[0][0],S=y.palette.getContrastText(k)):(S=d.legend[0][0],k=y.palette.background.default):c&&(p===D.ProjectTreeLayerTypes.POLYGON||p===D.ProjectTreeLayerTypes.RASTER?(S=c[500],k=c[100]):(S=c[500],k=y.palette.background.default));var _=function(){return v?j(!f):void 0};return Object(x.jsxs)(i.a.Fragment,{children:[Object(x.jsxs)($e.a,{dense:!0,className:Object(Ve.a)(g.listItem,v&&g.listItemActive),children:[Object(x.jsx)(Zn.a,{className:g.expandIcon,children:Object(x.jsx)(E.a,{size:"small",onClick:_,disabled:!v,classes:{root:g.expandIconButton,disabled:g.expandDisabled},children:v&&f?Object(x.jsx)(et.a,{}):Object(x.jsx)(at.a,{})})}),Object(x.jsx)(We.a,{className:g.listItemAvatar,children:Object(x.jsx)(Fe.a,{className:g.avatar,style:{background:k},onClick:_,children:Object(x.jsx)(Gr,{layerType:p,iconProps:{style:{color:S}}})})}),Object(x.jsx)(_e.a,{enterDelay:1500,title:Object(x.jsxs)(i.a.Fragment,{children:[Object(x.jsx)(w.a,{color:"inherit",children:t}),s&&Object(x.jsx)(w.a,{variant:"caption",children:s})]}),children:Object(x.jsx)(Ge.a,{primary:t,secondary:s,onClick:_,classes:{primary:g.textPrimary,secondary:g.textSecondary}})}),Object(x.jsxs)($n.a,{className:g.secondary,children:[r&&Object(x.jsx)(ze.a,{className:g.loadingSpinner,color:"inherit",thickness:3,size:15}),!r&&Object(x.jsx)(E.a,{edge:"end",className:g.deleteButton,"aria-label":"delete",onClick:function(e){e.stopPropagation(),u(a)},children:Object(x.jsx)(Hn.a,{})})]})]}),v&&f&&Object(x.jsx)(Wn,{max:n,min:l,rampType:null===d||void 0===d?void 0:d.rampType,legend:null===d||void 0===d?void 0:d.legend})]})},Kn=function(){var e=Object(Zt.i)(Oa),t=Object(Zt.i)(dr),a=Object(Zt.i)(za),r=Object(Zt.h)(sr),o=Object(m.a)(r,2),i=o[0],l=o[1],s=Object(Zt.i)(mr),c=br().setView;if(!e)return null;var d=e.tree.views?e.tree.views:[],p=d.length>0&&e.tree.defaultView?e.tree.defaultView:"";return Object(x.jsx)(Bn,{views:d,defaultView:p,baseLayer:i,baseLayers:ya,error:t,setBaseLayer:function(e){n.event("webrave","set_base_layer",e.id),l(e)},viewId:s,setViewId:c,children:a.map((function(e,t){var a=e.id;return Object(x.jsx)(Qn,{lid:a},"lgdLyr-".concat(t))}))})},Qn=function(e){var t,a,r=e.lid,n=Object(Zt.i)(Na(r)),o=Object(Zt.i)(ir(r)),i=Object(Zt.i)(nr(r)),l=zr().removeLayer,s=null===(t=o.tiles)||void 0===t||null===(a=t.rasterStats)||void 0===a?void 0:a.stats,c=n.id,d=n.layerType,p=n.label,u=void 0,m=void 0,g=void 0;if(s)try{var y,b;u=s.max||s.maximum||void 0,m=s.min||s.minimum||void 0,u&&u>0&&m&&m>0&&(g="min: ".concat(null===(y=m)||void 0===y?void 0:y.toFixed(2)," max: ").concat(null===(b=u)||void 0===b?void 0:b.toFixed(2)))}catch(f){h.a.error("Could not get stats using object: ".concat(JSON.stringify(s)))}return Object(x.jsx)(Xn,{leafId:c,layerType:d,symbology:o.symbology,max:u,min:m,label:p,subLabel:g,fallbackColor:null!==i?wa[i]:void 0,loading:o.tileStatus===D.TilingStatus.FETCHING||o.symbologyStatus===D.SymbologyStatus.FETCHING,removeLayer:l})},Yn=a(199),eo=(a(531),function(){return Object(x.jsx)(f.b,{logoSVG:Object(x.jsx)(ze.a,{size:"3rem",thickness:4}),status:Object(x.jsx)(w.a,{variant:"h5",component:"div",children:"Loading Map..."}),containerProps:{maxWidth:"xl",style:{position:"absolute",zIndex:1e3,top:0,left:0,width:"100%",height:"100%",background:"#FFFFFF33"}}})}),to=Object(v.a)((function(e){return{root:{marginLeft:e.spacing(1)},container:{display:"flex",height:"100%"},mapContainer:{position:"relative",background:"#CCCCCC",height:"100%",width:"100%","&>h1":{color:"#9999FF",position:"absolute",top:"50%",left:"50%",transform:"translate(-50%, -50%)"}},drawerContents:{height:"100%",display:"flex"},drawerSpacer:{flex:"0 0 0%"},drawerSpacerOpen:{},dialogContainer:{alignItems:"left",justifyContent:"left"},loaderSpinner:{position:"absolute",bottom:10,right:10,color:e.palette.secondary.main},dialog:{position:"absolute",margin:0,left:"20px",top:"20px"},subheaders:{background:"white"},dummyText:{}}})),ao=kt.a.debounce((function(){return h.a.debug.apply(h.a,arguments)}),1500),ro=function(e){var t=e.children,a=e.baseLayer,n=e.styleLoading,i=e.bounds,l=e.zoomBounds,s=to(),c=Object(Zt.h)(cr),d=Object(m.a)(c,2),u=d[0],g=d[1],y=Object(o.useState)(!1),b=Object(m.a)(y,2),f=b[0],j=b[1],w=Object(Zt.h)(pr),v=Object(m.a)(w,2),O=v[0],S=v[1],k=Object(o.useRef)();k.current=u;var _=Object(o.useCallback)((function(e){h.a.debug("Map loadHandler");var t=e.target.isStyleLoaded();O!==t&&S(t)}),[O]),T=Object(o.useCallback)((function(e){var t=Object(p.a)(Object(p.a)(Object(p.a)({},k.current),e),{},{pitch:0,bearing:0});l&&t.zoom&&(t.zoom>l[1]?t.zoom=l[1]:t.zoom<l[0]&&(t.zoom=l[0]));var a=function(e,t){var a=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(!e&&t&&!0===a)return[(t[0]+t[2])/2,(t[1]+t[3])/2];if(!t||!e||Object(St.isUndefined)(e[0])||Object(St.isUndefined)(e[1]))return null;var r=[t[0]>e[0]?t[0]:t[2]<e[0]?t[2]:e[0],t[1]>e[1]?t[1]:t[3]<e[1]?t[3]:e[1]];return r[0]===e[0]&&r[1]===e[1]?null:a?[(t[0]+t[2])/2,(t[1]+t[3])/2]:r}([t.longitude,t.latitude],i||xa.worldBounds,i&&!f);Array.isArray(a)&&(ao("setViewport GEOFENCED",a,i&&!f),t.longitude=a[0],t.latitude=a[1]),ao("setViewport DEBOUNCED",{inV:e,outV:t,bounds:i,center:i&&!f}),g(t)}),[i,l,f]),z=Object(o.useMemo)((function(){return function(e){return Object(p.a)(Object(p.a)({},ja),{},{sources:e.sources,layers:e.layers})}(a)}),[]);Object(o.useEffect)((function(){ao("setViewport useEffect",{bounds:i,zoomBounds:l,boundsSet:f}),!f&&i&&j(!0),T(Object(p.a)({},k.current))}),[i,l,f]);var P=n&&Object(x.jsx)(ze.a,{size:"2rem",thickness:6,className:s.loaderSpinner});return z&&i?Object(x.jsx)("div",{className:s.mapContainer,children:Object(x.jsxs)(Yn.b,Object(p.a)(Object(p.a)({},u),{},{width:"100%",height:"100%",minZoom:l[0]||4,maxZoom:l[1]||20,clickRadius:2,onLoad:_,onResize:function(){return h.a.debug("Map Resize")},mapStyle:z,onViewportChange:T,onError:function(e){(!e.error||!e.error.status||e.error.status<400||e.error.status>500)&&console.error("MAP ERROR",e)},mapboxApiAccessToken:r.mapConfig.mapBoxToken,children:[P,t]}))}):Object(x.jsx)(eo,{})},no=a(712),oo=a(362),io=a.n(oo),lo=a(363),so=a.n(lo),co=Object(v.a)((function(e){return{root:{position:"absolute",top:e.spacing(1),left:e.spacing(1)}}})),po=function(e){var t=e.drawerOpen,a=e.toggleDrawer,r=co();return Object(x.jsx)(no.a,{color:"primary","aria-label":"add",onClick:a,size:"small",className:r.root,children:t?Object(x.jsx)(io.a,{}):Object(x.jsx)(so.a,{})})},uo=function(){var e=Object(Zt.h)(ka),t=Object(m.a)(e,2),a=t[0],r=t[1];return Object(x.jsx)(po,{drawerOpen:a,toggleDrawer:function(){n.event("webrave","set_map_drawer",a?"open":"closed"),r(!a)}},"treeToggleBtn")},mo=function(){var e=i.a.useContext(Yn.a).map,t=Object(Zt.i)(sr),a=Object(Zt.i)(ur),r=Object(o.useRef)(e),n=Object(o.useState)({check:0,base:0,layers:0}),l=Object(m.a)(n,2),s=l[0],c=l[1];return Object(o.useEffect)((function(){if(r.current){var e=s.check,n=s.base,o=s.layers,i={check:e,base:n,layers:o};if(n>0){var l=function(e,t){if(!la(e))return!1;h.a.debug("MM: changeBaseLayer",t.id);var a=Date.now(),r=e,n=[];Object.keys(t.sources).forEach((function(e){r.getSource(e)||(r=r.addSource(e,t.sources[e]))}));var o=null,i=0;t.layers.forEach((function(e){r.getLayer(e.id)||(r=r.addLayer(e,o),i++),n.push(e.id),o=e.id})),h.a.debug("MM: changeBaseLayer Added ".concat(i," background layers"));var l=0;return sa(r).filter((function(e){return 0===e.indexOf(ra.bgLayer)})).filter((function(e){return n.indexOf(e)<0})).forEach((function(e){l++,r=r.removeLayer(e)})),l>0&&h.a.debug("MM: changeBaseLayer Removed ".concat(l," unneeded background layers")),h.a.debug("userLayerRecalc took ".concat(Date.now()-a," ms")),!0}(r.current,t);h.a.debug("MapLayers::changeBaseLayer: ".concat(l)),l?(i.base=0,i.check+=1):i.base+=1}if(o>0){var d=da(r.current,a);h.a.debug("MapLayers::userLayerRecalc: ".concat(d)),d?(i.layers=0,i.check+=1):i.layers+=1}if(e>0){var u=function(e,t){if(!la(e))return!1;var a=e,r=sa(a).reduce((function(e,t){return Object(p.a)(Object(p.a)({},e),{},Object(Qt.a)({},t,a.getLayer(t).metadata))}),{}),n=t.map((function(e){var t=e.leaf;return"".concat(t.layerPath,"/").concat(t.symbology)})).reverse(),o=sa(a,ra.bgLayer);o.sort((function(e,t){return r[e].mIdx-r[t].mIdx}));var i=sa(a,ra.userContent);i.sort((function(e,t){var a=n.indexOf(r[e].mRef)-n.indexOf(r[t].mRef);return 0!==a?a:r[e].mIdx-r[t].mIdx}));var l=[].concat(Object(qt.a)(o),Object(qt.a)(i));l.reverse(),h.a.debug("MM: verifyLayerOrder",{have:sa(a).reverse(),need:l});var s=sa(a);return s.reverse(),l.forEach((function(e,t){if(t!==s.indexOf(e)){var r=0===t?null:l[t-1];h.a.debug("MM: Move Needed ".concat(e," to before ").concat(r)),a=a.moveLayer(e,r),(s=sa(a)).reverse()}})),!0}(r.current,a);h.a.debug("MapLayers::verifyLayerOrder: ".concat(u)),u?i.check=0:i.check+=1}Object(St.isEqual)(i,s)||setTimeout((function(){h.a.debug("MapLayers::setRefreshNeeded",s,i),c(i)}),500)}}),[s,t,a]),Object(o.useEffect)((function(){}),[]),Object(o.useEffect)((function(){c(Object(p.a)(Object(p.a)({},s),{},{base:s.base+1}))}),[t]),Object(o.useEffect)((function(){c(Object(p.a)(Object(p.a)({},s),{},{layers:s.layers+1}))}),[a]),null},go=function(){var e=Object(Zt.i)(hr),t=Object(Zt.i)(pr),a=Object(Zt.i)(sr);return h.a.debug("RENDER MapConnect"),Object(x.jsxs)(x.Fragment,{children:[Object(x.jsx)(Kn,{}),Object(x.jsx)(ro,{baseLayer:a,zoomBounds:e.zoom,bounds:e.bounds,styleLoading:!t,children:[Object(x.jsx)(uo,{},"toggleBtn"),Object(x.jsx)(mo,{},"mapLayers")]})]})},yo=Object(v.a)((function(e){return{root:{padding:e.spacing(1),height:"100%",overflowY:"scroll",userSelect:"text","& *":{userSelect:"text"}},btnGroup:{width:"100%",display:"flex",justifyContent:"space-between","&>*":{flex:"0 0 calc(50% - 0.5em)"},margin:e.spacing(1,1,3,1)},divider:{marginTop:e.spacing(3)},footerLogo:{}}})),ho=function(e){var t=e.project,a=e.downloadZipFile,r=e.pendingZips,n=yo(),o={Title:t.name,Type:t.projType,"Warehouse ID":t.id,"Warehouse Tags":Array.isArray(t.tags)?t.tags.join(", "):"<None>","Project Created":"".concat(un.dates.formatDate(t.createdOn,"lll")," (").concat(un.dates.formatDateAgo(t.createdOn),")"),"Project Updated":"".concat(un.dates.formatDate(t.updatedOn,"lll")," (").concat(un.dates.formatDateAgo(t.updatedOn),")")},i=t&&r[t.id];return Object(x.jsxs)(Me.a,{className:n.root,children:[Object(x.jsxs)(w.a,{variant:"h4",paragraph:!0,color:"textPrimary",children:[t.projType," Project"]}),Object(x.jsx)(k.a,{}),Object(x.jsxs)(w.a,{component:"div",paragraph:!0,children:["This project exists within the Riverscapes Data Warehouse. You can download this project and view it using the free"," ",Object(x.jsx)("a",{href:"https://rave.riverscapes.xyz",target:"_blank",rel:"noreferrer",children:"RAVE"})," ","plugin for ArcGIS."]}),Object(x.jsxs)("div",{className:n.btnGroup,children:[Object(x.jsx)(Ue,{title:"Warehouse",href:"".concat(fa,"/#/").concat(t.program,"/").concat(t.id)}),Object(x.jsx)(Ne,{downloadZipFile:a,pendingSince:i,project:t,title:"Download"})]}),Object(x.jsx)(hn,{title:"Project Information",meta:o}),Object(x.jsx)(hn,{title:"Project Metadata",meta:t.meta}),Object(x.jsx)(k.a,{className:n.divider}),Object(x.jsx)("a",{href:"http://riverscapes.xyz",target:"_blank",rel:"noreferrer",children:Object(x.jsx)("img",{className:n.footerLogo,alt:"footer",src:"".concat("/webrave-staging","/cc-watermarks-riverscapes_orig.png")})})]})},bo=function(){var e=Object(Zt.i)(Ta),t=Object(Zt.g)((function(e){var t=e.snapshot,a=e.set;return function(){var e=Object(u.a)(d.a.mark((function e(r){var n,o,i,l,s;return d.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.getPromise(rr);case 2:return n=e.sent,e.next=5,t.getPromise(nr(r));case 5:return o=e.sent,e.next=8,t.getPromise(ir(r));case 8:return i=e.sent,e.next=11,t.getPromise(or);case 11:l=e.sent,s=!1,i.symbology&&i.symbology.status===D.SymbologyStatus.FOUND||(s=!0),s&&null===o?(a(rr,[].concat(Object(qt.a)(n),[l])),a(nr(r),l)):s||null===o||(a(rr,n.filter((function(e){return e===o}))),a(nr(r),null));case 15:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()}));Object(o.useEffect)((function(){var a=function(){var a=Object(u.a)(d.a.mark((function a(){var r;return d.a.wrap((function(a){for(;;)switch(a.prev=a.next){case 0:r=0;case 1:if(!(r<e.length)){a.next=8;break}if(e[r].layerType===D.ProjectTreeLayerTypes.RASTER){a.next=5;break}return a.next=5,t(e[r].id);case 5:r++,a.next=1;break;case 8:case"end":return a.stop()}}),a)})));return function(){return a.apply(this,arguments)}}();a()}),[e])},fo=function(e){var t=e.history,a=e.auth,r=e.program,i=Object(Zt.i)(ka),l=Object(Zt.i)(Ca),s=r&&Object.values(D.WarehouseRoleEnum).indexOf(r.role)>-1,c=It(a,r,!1,!0),d=c.project,p=c.loading,u=c.initialized,m=Pt(a,r),g=m.downloadZipFile,y=m.downloadFileFn,h=m.pendingZips,b=function(e){return d?y(d,e):Promise.resolve()};fr(a,d),bo();var f=Object(o.useMemo)((function(){return Object(x.jsx)(go,{})}),[]),j=Object(o.useMemo)((function(){return Object(x.jsx)(Tr,{tabs:[{label:"Project Tree",value:Object(x.jsx)(Pn,{downloadFile:b})},{label:"Project Info",value:d?Object(x.jsx)(ho,{project:d,downloadZipFile:g,pendingZips:h}):Object(x.jsx)("div",{})}]})}),[d,b,g,h]);return s?!u||p?Object(x.jsx)(Vt,{title:"Loading",history:t,signOut:a.signOut,children:Object(x.jsx)(Ht,{title:p?"Loading Project...":"Initializing..."})}):d?(d||p||n.event("error","project_not_found",window.location.hash),Object(x.jsxs)(x.Fragment,{children:[l.map((function(e){return Object(x.jsx)(Cn,{layerPath:e},e)})),Object(x.jsx)(Vt,{title:d.name,history:t,signOut:a.signOut,children:Object(x.jsx)(Or,{open:i,split:"vertical",primary:"second",minSize:500,maxSize:"85%",defaultSize:"75%",child1:j,child2:f})})]})):Object(x.jsx)(Vt,{title:"Project not found",history:t,signOut:a.signOut,children:Object(x.jsx)(jr,{})}):(n.event("error","access_denied",window.location.hash),Object(x.jsx)(Vt,{title:"Access Denied",history:t,signOut:a.signOut,children:Object(x.jsx)(gt,{program:r,onClose:function(){return t.push("/")}})}))},xo=a(374);n.init();var jo=new Ot("AppAuth",300);jo.prune();var wo=function(){var e=window.location.hash.split("/");return e.length>1&&e[1].match(/[A-Za-z0-9-_]{3,25}/g)?e[1]:null},vo=function(){var e=Object(o.useState)(),t=Object(m.a)(e,2),a=t[0],i=t[1],l=Object(o.useState)({program:null,loading:!0,machineName:wo()}),s=Object(m.a)(l,2),c=s[0],y=s[1],b=Object(o.useState)(!0),j=Object(m.a)(b,2),w=j[0],v=j[1],O=Object(xo.a)(a,!1,!1),S=Object(g.e)();Object(o.useEffect)((function(){n.currentPageView(),Object(D.authCheck)(r.endpoints.graphql,"",xa.apiTimeout).then((function(e){var t;h.a.debug("authResp",e);var a=null===(t=e.data)||void 0===t?void 0:t.auth;a&&a.region&&(i({region:a.region,userPoolId:a.userPool,userPoolWebClientId:a.clientId,mandatorySignIn:!0,oauth:{domain:a.domain,scope:["email","profile","openid"],redirectSignIn:r.redirectUrl.toString(),redirectSignOut:r.redirectUrl.toString(),responseType:"code"}}),v(!1))})).catch((function(e){h.a.error("api.getPrograms error",e)}))}),[]),Object(o.useEffect)((function(){if(S){var e=function(){var e=Object(u.a)(d.a.mark((function e(){var t,a,r,n;return d.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="RSUrl",e.next=3,jo.get(t);case 3:a=e.sent,r=S.location.pathname,h.a.debug("[".concat(t,"] Cache:::REDIRECT checking ").concat(a," === ").concat(r)),O.isAuthenticated||O.error||!O.isAuthComplete||(h.a.debug("[".concat(t,"] Cache:::REDIRECT:::SET ").concat(r)),jo.set(t,r)),a&&O.isAuthenticated&&O.isAuthComplete&&!O.error&&(r!==a&&(h.a.debug("[".concat(t,"] Cache:::REDIRECT Needed! ").concat(r," !== ").concat(a)),S.push(a),c.machineName||(n=wo(),h.a.debug("Setting program machine name",n),y(Object(p.a)(Object(p.a)({},c),{},{machineName:n})))),jo.del(t));case 8:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();e()}}),[S,O]);var k=Object(o.useCallback)((function(e,t,a){var r;r=a?"/"+t.machineName+"/"+a.id:"/"+t.machineName,n.event("webrave","navigate",r),e.push(r)}),[]);Object(o.useEffect)((function(){O.isAuthenticated&&!(null===c||void 0===c?void 0:c.program)&&c.machineName&&O.getCurrentToken().then((function(e){return Object(D.getProgramAuth)(r.endpoints.graphql,e,c.machineName||"UNKNOWN")})).then((function(e){h.a.debug("API GetProgram",e),e.data&&e.data.program&&y({program:e.data.program,loading:!1,machineName:e.data.program.machineName})})).catch((function(e){h.a.error("api.getPrograms error",e)}))}),[O,c]);var _=Object(x.jsx)("img",{src:"/webrave-staging/RiverscapesLogo.png",alt:"logo"});if(w)return Object(x.jsx)(Vt,{title:"Loading authentication info",children:Object(x.jsx)(f.b,{logoSVG:_,title:xa.appName,message:"Loading authentication info",version:r.version})});if(O.isAuthenticated){if(!c||(null===c||void 0===c?void 0:c.loading))return Object(x.jsx)(Vt,{title:"webRAVE",children:Object(x.jsx)(f.b,{logoSVG:_,title:"WebRave",message:"Loading Program: ".concat(c.machineName||"NULL"),version:r.version})});var T={navigate:k,signOut:O.signOut};return Object(x.jsxs)(g.c,{children:[Object(x.jsx)(g.a,{path:"/:programId/:projectId/:config?",render:function(e){return Object(x.jsx)(fo,Object(p.a)(Object(p.a)({},e),{},{auth:O,program:null===c||void 0===c?void 0:c.program}))}}),Object(x.jsx)(g.a,{path:"*",render:function(e){return Object(x.jsx)(Vt,Object(p.a)(Object(p.a)(Object(p.a)({},e),T),{},{children:Object(x.jsx)(jr,{})}))}})]})}return O.isAuthComplete?Object(x.jsx)(Vt,{title:"Sign in",children:Object(x.jsx)(st,{signIn:O.signIn,title:"Riverscapes Map Viewer"})}):Object(x.jsx)(Vt,{title:"webRAVE",children:Object(x.jsx)(f.b,{logoSVG:_,title:"Authenticating",message:"Authenticating",version:r.version})})},Oo=(a(584),a(177));a.n(Oo).a.workerClass=a(585).default,h.a.setDefaultLevel(h.a.levels.DEBUG),a(586),s.a.render(Object(x.jsx)(Zt.a,{children:Object(x.jsx)(g.b,{basename:"/",history:Et,children:Object(x.jsx)(vo,{})})}),document.getElementById("root")),window.addEventListener("load",(function(){window.history.pushState({},"")})),navigator.storage&&navigator.storage.persist?navigator.storage.persist().then((function(e){e?h.a.debug("Storage will not be cleared except by explicit user action"):h.a.warn("Storage may be cleared by the UA under storage pressure.")})):h.a.warn("navigator.storage API not implemented.")}},[[587,1,2]]]);
//# sourceMappingURL=main.637403a1.chunk.js.map